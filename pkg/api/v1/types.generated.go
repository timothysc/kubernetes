/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg5_util "k8s.io/kubernetes/pkg/util"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	codecSelferC_UTF81234         = 1
	codecSelferC_RAW1234          = 0
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 4 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			4, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg5_util.IntOrString
		var v5 pkg4_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				var yynn2 int = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
			}
			if yyr2 || yy2arr2 {
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yysep2 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym43 := z.DecBinary()
	_ = yym43
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl44 := r.ReadMapStart()
			if yyl44 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl44, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl44 := r.ReadArrayStart()
			if yyl44 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl44, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys45Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys45Slc
	var yyhl45 bool = l >= 0
	for yyj45 := 0; ; yyj45++ {
		if yyhl45 {
			if yyj45 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys45Slc = r.DecodeBytes(yys45Slc, true, true)
		yys45 := string(yys45Slc)
		switch yys45 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv53 := &x.CreationTimestamp
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else if yym54 {
					z.DecBinaryUnmarshal(yyv53)
				} else if !yym54 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv53)
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym56 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym56 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv59 := &x.Labels
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					z.F.DecMapStringStringX(yyv59, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv61 := &x.Annotations
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					z.F.DecMapStringStringX(yyv61, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys45)
		} // end switch yys45
	} // end for yyj45
	if !yyhl45 {
		r.ReadEnd()
	}
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv71 := &x.CreationTimestamp
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv71) {
		} else if yym72 {
			z.DecBinaryUnmarshal(yyv71)
		} else if !yym72 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv71)
		} else {
			z.DecFallback(yyv71, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym74 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym74 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv77 := &x.Labels
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			z.F.DecMapStringStringX(yyv77, false, d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv79 := &x.Annotations
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			z.F.DecMapStringStringX(yyv79, false, d)
		}
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	r.ReadEnd()
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [17]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq82[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq82[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq82[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq82[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq82[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq82[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq82[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq82[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq82[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq82[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq82[12] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq82[13] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq82[14] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq82[15] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq82[16] = x.VolumeSource.FC != nil && x.FC != nil
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(17)
			} else {
				var yynn82 int = 1
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
			}
			if yyr82 || yy2arr82 {
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym85 := z.EncBinary()
				_ = yym85
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn86 bool
			if x.VolumeSource.HostPath == nil {
				yyn86 = true
				goto LABEL86
			}
		LABEL86:
			if yyr82 || yy2arr82 {
				if yyn86 {
					r.EncodeNil()
				} else {
					if yyq82[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn86 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn87 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn87 = true
				goto LABEL87
			}
		LABEL87:
			if yyr82 || yy2arr82 {
				if yyn87 {
					r.EncodeNil()
				} else {
					if yyq82[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[2] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if yyn87 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn88 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn88 = true
				goto LABEL88
			}
		LABEL88:
			if yyr82 || yy2arr82 {
				if yyn88 {
					r.EncodeNil()
				} else {
					if yyq82[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[3] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn88 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn89 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn89 = true
				goto LABEL89
			}
		LABEL89:
			if yyr82 || yy2arr82 {
				if yyn89 {
					r.EncodeNil()
				} else {
					if yyq82[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[4] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn89 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn90 bool
			if x.VolumeSource.GitRepo == nil {
				yyn90 = true
				goto LABEL90
			}
		LABEL90:
			if yyr82 || yy2arr82 {
				if yyn90 {
					r.EncodeNil()
				} else {
					if yyq82[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[5] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if yyn90 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn91 bool
			if x.VolumeSource.Secret == nil {
				yyn91 = true
				goto LABEL91
			}
		LABEL91:
			if yyr82 || yy2arr82 {
				if yyn91 {
					r.EncodeNil()
				} else {
					if yyq82[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[6] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if yyn91 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn92 bool
			if x.VolumeSource.NFS == nil {
				yyn92 = true
				goto LABEL92
			}
		LABEL92:
			if yyr82 || yy2arr82 {
				if yyn92 {
					r.EncodeNil()
				} else {
					if yyq82[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[7] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn92 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn93 bool
			if x.VolumeSource.ISCSI == nil {
				yyn93 = true
				goto LABEL93
			}
		LABEL93:
			if yyr82 || yy2arr82 {
				if yyn93 {
					r.EncodeNil()
				} else {
					if yyq82[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[8] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn93 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn94 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr82 || yy2arr82 {
				if yyn94 {
					r.EncodeNil()
				} else {
					if yyq82[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[9] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn94 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn95 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn95 = true
				goto LABEL95
			}
		LABEL95:
			if yyr82 || yy2arr82 {
				if yyn95 {
					r.EncodeNil()
				} else {
					if yyq82[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[10] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if yyn95 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn96 bool
			if x.VolumeSource.RBD == nil {
				yyn96 = true
				goto LABEL96
			}
		LABEL96:
			if yyr82 || yy2arr82 {
				if yyn96 {
					r.EncodeNil()
				} else {
					if yyq82[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[11] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn96 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn97 bool
			if x.VolumeSource.Cinder == nil {
				yyn97 = true
				goto LABEL97
			}
		LABEL97:
			if yyr82 || yy2arr82 {
				if yyn97 {
					r.EncodeNil()
				} else {
					if yyq82[12] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn97 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn98 bool
			if x.VolumeSource.CephFS == nil {
				yyn98 = true
				goto LABEL98
			}
		LABEL98:
			if yyr82 || yy2arr82 {
				if yyn98 {
					r.EncodeNil()
				} else {
					if yyq82[13] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[13] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn98 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn99 bool
			if x.VolumeSource.Flocker == nil {
				yyn99 = true
				goto LABEL99
			}
		LABEL99:
			if yyr82 || yy2arr82 {
				if yyn99 {
					r.EncodeNil()
				} else {
					if yyq82[14] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[14] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn99 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn100 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr82 || yy2arr82 {
				if yyn100 {
					r.EncodeNil()
				} else {
					if yyq82[15] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[15] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.FC == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr82 || yy2arr82 {
				if yyn101 {
					r.EncodeNil()
				} else {
					if yyq82[16] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[16] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yysep82 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym102 := z.DecBinary()
	_ = yym102
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl103 := r.ReadMapStart()
			if yyl103 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl103, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl103 := r.ReadArrayStart()
			if yyl103 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl103, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys104Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys104Slc
	var yyhl104 bool = l >= 0
	for yyj104 := 0; ; yyj104++ {
		if yyhl104 {
			if yyj104 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys104Slc = r.DecodeBytes(yys104Slc, true, true)
		yys104 := string(yys104Slc)
		switch yys104 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys104)
		} // end switch yys104
	} // end for yyj104
	if !yyhl104 {
		r.ReadEnd()
	}
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj122 int
	var yyb122 bool
	var yyhl122 bool = l >= 0
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj122++
		if yyhl122 {
			yyb122 = yyj122 > l
		} else {
			yyb122 = r.CheckBreak()
		}
		if yyb122 {
			break
		}
		z.DecStructFieldNotFound(yyj122-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym140 := z.EncBinary()
		_ = yym140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep141 := !z.EncBinary()
			yy2arr141 := z.EncBasicHandle().StructToArray
			var yyq141 [16]bool
			_, _, _ = yysep141, yyq141, yy2arr141
			const yyr141 bool = false
			yyq141[0] = x.HostPath != nil
			yyq141[1] = x.EmptyDir != nil
			yyq141[2] = x.GCEPersistentDisk != nil
			yyq141[3] = x.AWSElasticBlockStore != nil
			yyq141[4] = x.GitRepo != nil
			yyq141[5] = x.Secret != nil
			yyq141[6] = x.NFS != nil
			yyq141[7] = x.ISCSI != nil
			yyq141[8] = x.Glusterfs != nil
			yyq141[9] = x.PersistentVolumeClaim != nil
			yyq141[10] = x.RBD != nil
			yyq141[11] = x.Cinder != nil
			yyq141[12] = x.CephFS != nil
			yyq141[13] = x.Flocker != nil
			yyq141[14] = x.DownwardAPI != nil
			yyq141[15] = x.FC != nil
			if yyr141 || yy2arr141 {
				r.EncodeArrayStart(16)
			} else {
				var yynn141 int = 0
				for _, b := range yyq141 {
					if b {
						yynn141++
					}
				}
				r.EncodeMapStart(yynn141)
			}
			if yyr141 || yy2arr141 {
				if yyq141[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[1] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[2] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[3] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[4] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[5] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[8] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[9] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[10] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[11] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[11] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[12] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[13] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[13] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[14] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[14] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[15] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[15] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yysep141 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym158 := z.DecBinary()
	_ = yym158
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl159 := r.ReadMapStart()
			if yyl159 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl159, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl159 := r.ReadArrayStart()
			if yyl159 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl159, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys160Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys160Slc
	var yyhl160 bool = l >= 0
	for yyj160 := 0; ; yyj160++ {
		if yyhl160 {
			if yyj160 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys160Slc = r.DecodeBytes(yys160Slc, true, true)
		yys160 := string(yys160Slc)
		switch yys160 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys160)
		} // end switch yys160
	} // end for yyj160
	if !yyhl160 {
		r.ReadEnd()
	}
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj177 int
	var yyb177 bool
	var yyhl177 bool = l >= 0
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj177++
		if yyhl177 {
			yyb177 = yyj177 > l
		} else {
			yyb177 = r.CheckBreak()
		}
		if yyb177 {
			break
		}
		z.DecStructFieldNotFound(yyj177-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym194 := z.EncBinary()
		_ = yym194
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep195 := !z.EncBinary()
			yy2arr195 := z.EncBasicHandle().StructToArray
			var yyq195 [2]bool
			_, _, _ = yysep195, yyq195, yy2arr195
			const yyr195 bool = false
			yyq195[1] = x.ReadOnly != false
			if yyr195 || yy2arr195 {
				r.EncodeArrayStart(2)
			} else {
				var yynn195 int = 1
				for _, b := range yyq195 {
					if b {
						yynn195++
					}
				}
				r.EncodeMapStart(yynn195)
			}
			if yyr195 || yy2arr195 {
				yym197 := z.EncBinary()
				_ = yym197
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				yym198 := z.EncBinary()
				_ = yym198
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[1] {
					yym200 := z.EncBinary()
					_ = yym200
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq195[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym201 := z.EncBinary()
					_ = yym201
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep195 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym202 := z.DecBinary()
	_ = yym202
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl203 := r.ReadMapStart()
			if yyl203 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl203, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl203 := r.ReadArrayStart()
			if yyl203 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl203, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys204Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys204Slc
	var yyhl204 bool = l >= 0
	for yyj204 := 0; ; yyj204++ {
		if yyhl204 {
			if yyj204 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys204Slc = r.DecodeBytes(yys204Slc, true, true)
		yys204 := string(yys204Slc)
		switch yys204 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys204)
		} // end switch yys204
	} // end for yyj204
	if !yyhl204 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj207 int
	var yyb207 bool
	var yyhl207 bool = l >= 0
	yyj207++
	if yyhl207 {
		yyb207 = yyj207 > l
	} else {
		yyb207 = r.CheckBreak()
	}
	if yyb207 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj207++
	if yyhl207 {
		yyb207 = yyj207 > l
	} else {
		yyb207 = r.CheckBreak()
	}
	if yyb207 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj207++
		if yyhl207 {
			yyb207 = yyj207 > l
		} else {
			yyb207 = r.CheckBreak()
		}
		if yyb207 {
			break
		}
		z.DecStructFieldNotFound(yyj207-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym210 := z.EncBinary()
		_ = yym210
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep211 := !z.EncBinary()
			yy2arr211 := z.EncBasicHandle().StructToArray
			var yyq211 [11]bool
			_, _, _ = yysep211, yyq211, yy2arr211
			const yyr211 bool = false
			yyq211[0] = x.GCEPersistentDisk != nil
			yyq211[1] = x.AWSElasticBlockStore != nil
			yyq211[2] = x.HostPath != nil
			yyq211[3] = x.Glusterfs != nil
			yyq211[4] = x.NFS != nil
			yyq211[5] = x.RBD != nil
			yyq211[6] = x.ISCSI != nil
			yyq211[7] = x.Cinder != nil
			yyq211[8] = x.CephFS != nil
			yyq211[9] = x.FC != nil
			yyq211[10] = x.Flocker != nil
			if yyr211 || yy2arr211 {
				r.EncodeArrayStart(11)
			} else {
				var yynn211 int = 0
				for _, b := range yyq211 {
					if b {
						yynn211++
					}
				}
				r.EncodeMapStart(yynn211)
			}
			if yyr211 || yy2arr211 {
				if yyq211[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[0] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[1] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[2] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[3] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[4] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[5] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[6] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[7] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[9] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr211 || yy2arr211 {
				if yyq211[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq211[10] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yysep211 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym223 := z.DecBinary()
	_ = yym223
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl224 := r.ReadMapStart()
			if yyl224 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl224, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl224 := r.ReadArrayStart()
			if yyl224 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl224, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys225Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys225Slc
	var yyhl225 bool = l >= 0
	for yyj225 := 0; ; yyj225++ {
		if yyhl225 {
			if yyj225 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys225Slc = r.DecodeBytes(yys225Slc, true, true)
		yys225 := string(yys225Slc)
		switch yys225 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys225)
		} // end switch yys225
	} // end for yyj225
	if !yyhl225 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj237 int
	var yyb237 bool
	var yyhl237 bool = l >= 0
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	for {
		yyj237++
		if yyhl237 {
			yyb237 = yyj237 > l
		} else {
			yyb237 = r.CheckBreak()
		}
		if yyb237 {
			break
		}
		z.DecStructFieldNotFound(yyj237-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym249 := z.EncBinary()
		_ = yym249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep250 := !z.EncBinary()
			yy2arr250 := z.EncBasicHandle().StructToArray
			var yyq250 [5]bool
			_, _, _ = yysep250, yyq250, yy2arr250
			const yyr250 bool = false
			yyq250[0] = x.Kind != ""
			yyq250[1] = x.APIVersion != ""
			yyq250[2] = true
			yyq250[3] = true
			yyq250[4] = true
			if yyr250 || yy2arr250 {
				r.EncodeArrayStart(5)
			} else {
				var yynn250 int = 0
				for _, b := range yyq250 {
					if b {
						yynn250++
					}
				}
				r.EncodeMapStart(yynn250)
			}
			if yyr250 || yy2arr250 {
				if yyq250[0] {
					yym252 := z.EncBinary()
					_ = yym252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym253 := z.EncBinary()
					_ = yym253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[1] {
					yym255 := z.EncBinary()
					_ = yym255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym256 := z.EncBinary()
					_ = yym256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[2] {
					yy258 := &x.ObjectMeta
					yy258.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy259 := &x.ObjectMeta
					yy259.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[3] {
					yy261 := &x.Spec
					yy261.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy262 := &x.Spec
					yy262.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[4] {
					yy264 := &x.Status
					yy264.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy265 := &x.Status
					yy265.CodecEncodeSelf(e)
				}
			}
			if yysep250 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym266 := z.DecBinary()
	_ = yym266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl267 := r.ReadMapStart()
			if yyl267 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl267, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl267 := r.ReadArrayStart()
			if yyl267 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys268Slc
	var yyhl268 bool = l >= 0
	for yyj268 := 0; ; yyj268++ {
		if yyhl268 {
			if yyj268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys268Slc = r.DecodeBytes(yys268Slc, true, true)
		yys268 := string(yys268Slc)
		switch yys268 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv271 := &x.ObjectMeta
				yyv271.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv272 := &x.Spec
				yyv272.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv273 := &x.Status
				yyv273.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys268)
		} // end switch yys268
	} // end for yyj268
	if !yyhl268 {
		r.ReadEnd()
	}
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj274 int
	var yyb274 bool
	var yyhl274 bool = l >= 0
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv277 := &x.ObjectMeta
		yyv277.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv278 := &x.Spec
		yyv278.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv279 := &x.Status
		yyv279.CodecDecodeSelf(d)
	}
	for {
		yyj274++
		if yyhl274 {
			yyb274 = yyj274 > l
		} else {
			yyb274 = r.CheckBreak()
		}
		if yyb274 {
			break
		}
		z.DecStructFieldNotFound(yyj274-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym280 := z.EncBinary()
		_ = yym280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep281 := !z.EncBinary()
			yy2arr281 := z.EncBasicHandle().StructToArray
			var yyq281 [15]bool
			_, _, _ = yysep281, yyq281, yy2arr281
			const yyr281 bool = false
			yyq281[0] = len(x.Capacity) != 0
			yyq281[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq281[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq281[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq281[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq281[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq281[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq281[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq281[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq281[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq281[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq281[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq281[12] = len(x.AccessModes) != 0
			yyq281[13] = x.ClaimRef != nil
			yyq281[14] = x.PersistentVolumeReclaimPolicy != ""
			if yyr281 || yy2arr281 {
				r.EncodeArrayStart(15)
			} else {
				var yynn281 int = 0
				for _, b := range yyq281 {
					if b {
						yynn281++
					}
				}
				r.EncodeMapStart(yynn281)
			}
			if yyr281 || yy2arr281 {
				if yyq281[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			var yyn283 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn283 = true
				goto LABEL283
			}
		LABEL283:
			if yyr281 || yy2arr281 {
				if yyn283 {
					r.EncodeNil()
				} else {
					if yyq281[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[1] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn283 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn284 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn284 = true
				goto LABEL284
			}
		LABEL284:
			if yyr281 || yy2arr281 {
				if yyn284 {
					r.EncodeNil()
				} else {
					if yyq281[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[2] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn284 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn285 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn285 = true
				goto LABEL285
			}
		LABEL285:
			if yyr281 || yy2arr281 {
				if yyn285 {
					r.EncodeNil()
				} else {
					if yyq281[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[3] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn285 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn286 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn286 = true
				goto LABEL286
			}
		LABEL286:
			if yyr281 || yy2arr281 {
				if yyn286 {
					r.EncodeNil()
				} else {
					if yyq281[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[4] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn286 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn287 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn287 = true
				goto LABEL287
			}
		LABEL287:
			if yyr281 || yy2arr281 {
				if yyn287 {
					r.EncodeNil()
				} else {
					if yyq281[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn287 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn288 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn288 = true
				goto LABEL288
			}
		LABEL288:
			if yyr281 || yy2arr281 {
				if yyn288 {
					r.EncodeNil()
				} else {
					if yyq281[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[6] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn288 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn289 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn289 = true
				goto LABEL289
			}
		LABEL289:
			if yyr281 || yy2arr281 {
				if yyn289 {
					r.EncodeNil()
				} else {
					if yyq281[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn289 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn290 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn290 = true
				goto LABEL290
			}
		LABEL290:
			if yyr281 || yy2arr281 {
				if yyn290 {
					r.EncodeNil()
				} else {
					if yyq281[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn290 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn291 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn291 = true
				goto LABEL291
			}
		LABEL291:
			if yyr281 || yy2arr281 {
				if yyn291 {
					r.EncodeNil()
				} else {
					if yyq281[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[9] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn291 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn292 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn292 = true
				goto LABEL292
			}
		LABEL292:
			if yyr281 || yy2arr281 {
				if yyn292 {
					r.EncodeNil()
				} else {
					if yyq281[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[10] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn292 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn293 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn293 = true
				goto LABEL293
			}
		LABEL293:
			if yyr281 || yy2arr281 {
				if yyn293 {
					r.EncodeNil()
				} else {
					if yyq281[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[11] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn293 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[12] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym295 := z.EncBinary()
						_ = yym295
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[12] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym296 := z.EncBinary()
						_ = yym296
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[13] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[13] {
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[14] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq281[14] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yysep281 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym299 := z.DecBinary()
	_ = yym299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl300 := r.ReadMapStart()
			if yyl300 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl300, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl300 := r.ReadArrayStart()
			if yyl300 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl300, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys301Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys301Slc
	var yyhl301 bool = l >= 0
	for yyj301 := 0; ; yyj301++ {
		if yyhl301 {
			if yyj301 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys301Slc = r.DecodeBytes(yys301Slc, true, true)
		yys301 := string(yys301Slc)
		switch yys301 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv302 := &x.Capacity
				yyv302.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv314 := &x.AccessModes
				yym315 := z.DecBinary()
				_ = yym315
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv314), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys301)
		} // end switch yys301
	} // end for yyj301
	if !yyhl301 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj318 int
	var yyb318 bool
	var yyhl318 bool = l >= 0
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv319 := &x.Capacity
		yyv319.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv331 := &x.AccessModes
		yym332 := z.DecBinary()
		_ = yym332
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv331), d)
		}
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj318++
		if yyhl318 {
			yyb318 = yyj318 > l
		} else {
			yyb318 = r.CheckBreak()
		}
		if yyb318 {
			break
		}
		z.DecStructFieldNotFound(yyj318-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym335 := z.EncBinary()
	_ = yym335
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym336 := z.DecBinary()
	_ = yym336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym337 := z.EncBinary()
		_ = yym337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep338 := !z.EncBinary()
			yy2arr338 := z.EncBasicHandle().StructToArray
			var yyq338 [3]bool
			_, _, _ = yysep338, yyq338, yy2arr338
			const yyr338 bool = false
			yyq338[0] = x.Phase != ""
			yyq338[1] = x.Message != ""
			yyq338[2] = x.Reason != ""
			if yyr338 || yy2arr338 {
				r.EncodeArrayStart(3)
			} else {
				var yynn338 int = 0
				for _, b := range yyq338 {
					if b {
						yynn338++
					}
				}
				r.EncodeMapStart(yynn338)
			}
			if yyr338 || yy2arr338 {
				if yyq338[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr338 || yy2arr338 {
				if yyq338[1] {
					yym341 := z.EncBinary()
					_ = yym341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym342 := z.EncBinary()
					_ = yym342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr338 || yy2arr338 {
				if yyq338[2] {
					yym344 := z.EncBinary()
					_ = yym344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym345 := z.EncBinary()
					_ = yym345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yysep338 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym346 := z.DecBinary()
	_ = yym346
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl347 := r.ReadMapStart()
			if yyl347 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl347, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl347 := r.ReadArrayStart()
			if yyl347 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl347, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys348Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys348Slc
	var yyhl348 bool = l >= 0
	for yyj348 := 0; ; yyj348++ {
		if yyhl348 {
			if yyj348 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys348Slc = r.DecodeBytes(yys348Slc, true, true)
		yys348 := string(yys348Slc)
		switch yys348 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys348)
		} // end switch yys348
	} // end for yyj348
	if !yyhl348 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj352 int
	var yyb352 bool
	var yyhl352 bool = l >= 0
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj352++
		if yyhl352 {
			yyb352 = yyj352 > l
		} else {
			yyb352 = r.CheckBreak()
		}
		if yyb352 {
			break
		}
		z.DecStructFieldNotFound(yyj352-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym356 := z.EncBinary()
		_ = yym356
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep357 := !z.EncBinary()
			yy2arr357 := z.EncBasicHandle().StructToArray
			var yyq357 [4]bool
			_, _, _ = yysep357, yyq357, yy2arr357
			const yyr357 bool = false
			yyq357[0] = x.Kind != ""
			yyq357[1] = x.APIVersion != ""
			yyq357[2] = true
			if yyr357 || yy2arr357 {
				r.EncodeArrayStart(4)
			} else {
				var yynn357 int = 1
				for _, b := range yyq357 {
					if b {
						yynn357++
					}
				}
				r.EncodeMapStart(yynn357)
			}
			if yyr357 || yy2arr357 {
				if yyq357[0] {
					yym359 := z.EncBinary()
					_ = yym359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym360 := z.EncBinary()
					_ = yym360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr357 || yy2arr357 {
				if yyq357[1] {
					yym362 := z.EncBinary()
					_ = yym362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym363 := z.EncBinary()
					_ = yym363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr357 || yy2arr357 {
				if yyq357[2] {
					yy365 := &x.ListMeta
					yym366 := z.EncBinary()
					_ = yym366
					if false {
					} else if z.HasExtensions() && z.EncExt(yy365) {
					} else {
						z.EncFallback(yy365)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq357[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy367 := &x.ListMeta
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else if z.HasExtensions() && z.EncExt(yy367) {
					} else {
						z.EncFallback(yy367)
					}
				}
			}
			if yyr357 || yy2arr357 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym370 := z.EncBinary()
					_ = yym370
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yysep357 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym372 := z.DecBinary()
	_ = yym372
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl373 := r.ReadMapStart()
			if yyl373 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl373, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl373 := r.ReadArrayStart()
			if yyl373 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl373, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys374Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys374Slc
	var yyhl374 bool = l >= 0
	for yyj374 := 0; ; yyj374++ {
		if yyhl374 {
			if yyj374 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys374Slc = r.DecodeBytes(yys374Slc, true, true)
		yys374 := string(yys374Slc)
		switch yys374 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv377 := &x.ListMeta
				yym378 := z.DecBinary()
				_ = yym378
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv377) {
				} else {
					z.DecFallback(yyv377, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv379 := &x.Items
				yym380 := z.DecBinary()
				_ = yym380
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv379), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys374)
		} // end switch yys374
	} // end for yyj374
	if !yyhl374 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj381 int
	var yyb381 bool
	var yyhl381 bool = l >= 0
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv384 := &x.ListMeta
		yym385 := z.DecBinary()
		_ = yym385
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv384) {
		} else {
			z.DecFallback(yyv384, false)
		}
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv386 := &x.Items
		yym387 := z.DecBinary()
		_ = yym387
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv386), d)
		}
	}
	for {
		yyj381++
		if yyhl381 {
			yyb381 = yyj381 > l
		} else {
			yyb381 = r.CheckBreak()
		}
		if yyb381 {
			break
		}
		z.DecStructFieldNotFound(yyj381-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym388 := z.EncBinary()
		_ = yym388
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep389 := !z.EncBinary()
			yy2arr389 := z.EncBasicHandle().StructToArray
			var yyq389 [5]bool
			_, _, _ = yysep389, yyq389, yy2arr389
			const yyr389 bool = false
			yyq389[0] = x.Kind != ""
			yyq389[1] = x.APIVersion != ""
			yyq389[2] = true
			yyq389[3] = true
			yyq389[4] = true
			if yyr389 || yy2arr389 {
				r.EncodeArrayStart(5)
			} else {
				var yynn389 int = 0
				for _, b := range yyq389 {
					if b {
						yynn389++
					}
				}
				r.EncodeMapStart(yynn389)
			}
			if yyr389 || yy2arr389 {
				if yyq389[0] {
					yym391 := z.EncBinary()
					_ = yym391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym392 := z.EncBinary()
					_ = yym392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[1] {
					yym394 := z.EncBinary()
					_ = yym394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[2] {
					yy397 := &x.ObjectMeta
					yy397.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy398 := &x.ObjectMeta
					yy398.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[3] {
					yy400 := &x.Spec
					yy400.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy401 := &x.Spec
					yy401.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[4] {
					yy403 := &x.Status
					yy403.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy404 := &x.Status
					yy404.CodecEncodeSelf(e)
				}
			}
			if yysep389 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym405 := z.DecBinary()
	_ = yym405
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl406 := r.ReadMapStart()
			if yyl406 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl406, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl406 := r.ReadArrayStart()
			if yyl406 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl406, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys407Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys407Slc
	var yyhl407 bool = l >= 0
	for yyj407 := 0; ; yyj407++ {
		if yyhl407 {
			if yyj407 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys407Slc = r.DecodeBytes(yys407Slc, true, true)
		yys407 := string(yys407Slc)
		switch yys407 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv410 := &x.ObjectMeta
				yyv410.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv411 := &x.Spec
				yyv411.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv412 := &x.Status
				yyv412.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys407)
		} // end switch yys407
	} // end for yyj407
	if !yyhl407 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj413 int
	var yyb413 bool
	var yyhl413 bool = l >= 0
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv416 := &x.ObjectMeta
		yyv416.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv417 := &x.Spec
		yyv417.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv418 := &x.Status
		yyv418.CodecDecodeSelf(d)
	}
	for {
		yyj413++
		if yyhl413 {
			yyb413 = yyj413 > l
		} else {
			yyb413 = r.CheckBreak()
		}
		if yyb413 {
			break
		}
		z.DecStructFieldNotFound(yyj413-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym419 := z.EncBinary()
		_ = yym419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep420 := !z.EncBinary()
			yy2arr420 := z.EncBasicHandle().StructToArray
			var yyq420 [4]bool
			_, _, _ = yysep420, yyq420, yy2arr420
			const yyr420 bool = false
			yyq420[0] = x.Kind != ""
			yyq420[1] = x.APIVersion != ""
			yyq420[2] = true
			if yyr420 || yy2arr420 {
				r.EncodeArrayStart(4)
			} else {
				var yynn420 int = 1
				for _, b := range yyq420 {
					if b {
						yynn420++
					}
				}
				r.EncodeMapStart(yynn420)
			}
			if yyr420 || yy2arr420 {
				if yyq420[0] {
					yym422 := z.EncBinary()
					_ = yym422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym423 := z.EncBinary()
					_ = yym423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr420 || yy2arr420 {
				if yyq420[1] {
					yym425 := z.EncBinary()
					_ = yym425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr420 || yy2arr420 {
				if yyq420[2] {
					yy428 := &x.ListMeta
					yym429 := z.EncBinary()
					_ = yym429
					if false {
					} else if z.HasExtensions() && z.EncExt(yy428) {
					} else {
						z.EncFallback(yy428)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq420[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy430 := &x.ListMeta
					yym431 := z.EncBinary()
					_ = yym431
					if false {
					} else if z.HasExtensions() && z.EncExt(yy430) {
					} else {
						z.EncFallback(yy430)
					}
				}
			}
			if yyr420 || yy2arr420 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym433 := z.EncBinary()
					_ = yym433
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yysep420 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym435 := z.DecBinary()
	_ = yym435
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl436 := r.ReadMapStart()
			if yyl436 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl436, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl436 := r.ReadArrayStart()
			if yyl436 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl436, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys437Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys437Slc
	var yyhl437 bool = l >= 0
	for yyj437 := 0; ; yyj437++ {
		if yyhl437 {
			if yyj437 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys437Slc = r.DecodeBytes(yys437Slc, true, true)
		yys437 := string(yys437Slc)
		switch yys437 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv440 := &x.ListMeta
				yym441 := z.DecBinary()
				_ = yym441
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv440) {
				} else {
					z.DecFallback(yyv440, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv442 := &x.Items
				yym443 := z.DecBinary()
				_ = yym443
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv442), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys437)
		} // end switch yys437
	} // end for yyj437
	if !yyhl437 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj444 int
	var yyb444 bool
	var yyhl444 bool = l >= 0
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv447 := &x.ListMeta
		yym448 := z.DecBinary()
		_ = yym448
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv447) {
		} else {
			z.DecFallback(yyv447, false)
		}
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv449 := &x.Items
		yym450 := z.DecBinary()
		_ = yym450
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv449), d)
		}
	}
	for {
		yyj444++
		if yyhl444 {
			yyb444 = yyj444 > l
		} else {
			yyb444 = r.CheckBreak()
		}
		if yyb444 {
			break
		}
		z.DecStructFieldNotFound(yyj444-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym451 := z.EncBinary()
		_ = yym451
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep452 := !z.EncBinary()
			yy2arr452 := z.EncBasicHandle().StructToArray
			var yyq452 [3]bool
			_, _, _ = yysep452, yyq452, yy2arr452
			const yyr452 bool = false
			yyq452[0] = len(x.AccessModes) != 0
			yyq452[1] = true
			yyq452[2] = x.VolumeName != ""
			if yyr452 || yy2arr452 {
				r.EncodeArrayStart(3)
			} else {
				var yynn452 int = 0
				for _, b := range yyq452 {
					if b {
						yynn452++
					}
				}
				r.EncodeMapStart(yynn452)
			}
			if yyr452 || yy2arr452 {
				if yyq452[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym454 := z.EncBinary()
						_ = yym454
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[0] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym455 := z.EncBinary()
						_ = yym455
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr452 || yy2arr452 {
				if yyq452[1] {
					yy457 := &x.Resources
					yy457.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[1] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy458 := &x.Resources
					yy458.CodecEncodeSelf(e)
				}
			}
			if yyr452 || yy2arr452 {
				if yyq452[2] {
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq452[2] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					yym461 := z.EncBinary()
					_ = yym461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yysep452 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym462 := z.DecBinary()
	_ = yym462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl463 := r.ReadMapStart()
			if yyl463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl463, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl463 := r.ReadArrayStart()
			if yyl463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys464Slc
	var yyhl464 bool = l >= 0
	for yyj464 := 0; ; yyj464++ {
		if yyhl464 {
			if yyj464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys464Slc = r.DecodeBytes(yys464Slc, true, true)
		yys464 := string(yys464Slc)
		switch yys464 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv465 := &x.AccessModes
				yym466 := z.DecBinary()
				_ = yym466
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv465), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv467 := &x.Resources
				yyv467.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys464)
		} // end switch yys464
	} // end for yyj464
	if !yyhl464 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj469 int
	var yyb469 bool
	var yyhl469 bool = l >= 0
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv470 := &x.AccessModes
		yym471 := z.DecBinary()
		_ = yym471
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv470), d)
		}
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv472 := &x.Resources
		yyv472.CodecDecodeSelf(d)
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj469++
		if yyhl469 {
			yyb469 = yyj469 > l
		} else {
			yyb469 = r.CheckBreak()
		}
		if yyb469 {
			break
		}
		z.DecStructFieldNotFound(yyj469-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym474 := z.EncBinary()
		_ = yym474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep475 := !z.EncBinary()
			yy2arr475 := z.EncBasicHandle().StructToArray
			var yyq475 [3]bool
			_, _, _ = yysep475, yyq475, yy2arr475
			const yyr475 bool = false
			yyq475[0] = x.Phase != ""
			yyq475[1] = len(x.AccessModes) != 0
			yyq475[2] = len(x.Capacity) != 0
			if yyr475 || yy2arr475 {
				r.EncodeArrayStart(3)
			} else {
				var yynn475 int = 0
				for _, b := range yyq475 {
					if b {
						yynn475++
					}
				}
				r.EncodeMapStart(yynn475)
			}
			if yyr475 || yy2arr475 {
				if yyq475[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq475[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr475 || yy2arr475 {
				if yyq475[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym478 := z.EncBinary()
						_ = yym478
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[1] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym479 := z.EncBinary()
						_ = yym479
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr475 || yy2arr475 {
				if yyq475[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[2] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yysep475 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym481 := z.DecBinary()
	_ = yym481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl482 := r.ReadMapStart()
			if yyl482 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl482, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl482 := r.ReadArrayStart()
			if yyl482 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys483Slc
	var yyhl483 bool = l >= 0
	for yyj483 := 0; ; yyj483++ {
		if yyhl483 {
			if yyj483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys483Slc = r.DecodeBytes(yys483Slc, true, true)
		yys483 := string(yys483Slc)
		switch yys483 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv485 := &x.AccessModes
				yym486 := z.DecBinary()
				_ = yym486
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv485), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv487 := &x.Capacity
				yyv487.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys483)
		} // end switch yys483
	} // end for yyj483
	if !yyhl483 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj488 int
	var yyb488 bool
	var yyhl488 bool = l >= 0
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv490 := &x.AccessModes
		yym491 := z.DecBinary()
		_ = yym491
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv490), d)
		}
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv492 := &x.Capacity
		yyv492.CodecDecodeSelf(d)
	}
	for {
		yyj488++
		if yyhl488 {
			yyb488 = yyj488 > l
		} else {
			yyb488 = r.CheckBreak()
		}
		if yyb488 {
			break
		}
		z.DecStructFieldNotFound(yyj488-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym493 := z.EncBinary()
	_ = yym493
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym494 := z.DecBinary()
	_ = yym494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym495 := z.EncBinary()
	_ = yym495
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym496 := z.DecBinary()
	_ = yym496
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym497 := z.EncBinary()
	_ = yym497
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym498 := z.DecBinary()
	_ = yym498
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym499 := z.EncBinary()
		_ = yym499
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep500 := !z.EncBinary()
			yy2arr500 := z.EncBasicHandle().StructToArray
			var yyq500 [1]bool
			_, _, _ = yysep500, yyq500, yy2arr500
			const yyr500 bool = false
			if yyr500 || yy2arr500 {
				r.EncodeArrayStart(1)
			} else {
				var yynn500 int = 1
				for _, b := range yyq500 {
					if b {
						yynn500++
					}
				}
				r.EncodeMapStart(yynn500)
			}
			if yyr500 || yy2arr500 {
				yym502 := z.EncBinary()
				_ = yym502
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym503 := z.EncBinary()
				_ = yym503
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yysep500 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym504 := z.DecBinary()
	_ = yym504
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl505 := r.ReadMapStart()
			if yyl505 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl505, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl505 := r.ReadArrayStart()
			if yyl505 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl505, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys506Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys506Slc
	var yyhl506 bool = l >= 0
	for yyj506 := 0; ; yyj506++ {
		if yyhl506 {
			if yyj506 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys506Slc = r.DecodeBytes(yys506Slc, true, true)
		yys506 := string(yys506Slc)
		switch yys506 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys506)
		} // end switch yys506
	} // end for yyj506
	if !yyhl506 {
		r.ReadEnd()
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj508 int
	var yyb508 bool
	var yyhl508 bool = l >= 0
	yyj508++
	if yyhl508 {
		yyb508 = yyj508 > l
	} else {
		yyb508 = r.CheckBreak()
	}
	if yyb508 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj508++
		if yyhl508 {
			yyb508 = yyj508 > l
		} else {
			yyb508 = r.CheckBreak()
		}
		if yyb508 {
			break
		}
		z.DecStructFieldNotFound(yyj508-1, "")
	}
	r.ReadEnd()
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym510 := z.EncBinary()
		_ = yym510
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep511 := !z.EncBinary()
			yy2arr511 := z.EncBasicHandle().StructToArray
			var yyq511 [1]bool
			_, _, _ = yysep511, yyq511, yy2arr511
			const yyr511 bool = false
			yyq511[0] = x.Medium != ""
			if yyr511 || yy2arr511 {
				r.EncodeArrayStart(1)
			} else {
				var yynn511 int = 0
				for _, b := range yyq511 {
					if b {
						yynn511++
					}
				}
				r.EncodeMapStart(yynn511)
			}
			if yyr511 || yy2arr511 {
				if yyq511[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq511[0] {
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yysep511 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym513 := z.DecBinary()
	_ = yym513
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl514 := r.ReadMapStart()
			if yyl514 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl514, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl514 := r.ReadArrayStart()
			if yyl514 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl514, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys515Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys515Slc
	var yyhl515 bool = l >= 0
	for yyj515 := 0; ; yyj515++ {
		if yyhl515 {
			if yyj515 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys515Slc = r.DecodeBytes(yys515Slc, true, true)
		yys515 := string(yys515Slc)
		switch yys515 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys515)
		} // end switch yys515
	} // end for yyj515
	if !yyhl515 {
		r.ReadEnd()
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj517 int
	var yyb517 bool
	var yyhl517 bool = l >= 0
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj517++
		if yyhl517 {
			yyb517 = yyj517 > l
		} else {
			yyb517 = r.CheckBreak()
		}
		if yyb517 {
			break
		}
		z.DecStructFieldNotFound(yyj517-1, "")
	}
	r.ReadEnd()
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym519 := z.EncBinary()
		_ = yym519
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep520 := !z.EncBinary()
			yy2arr520 := z.EncBasicHandle().StructToArray
			var yyq520 [3]bool
			_, _, _ = yysep520, yyq520, yy2arr520
			const yyr520 bool = false
			yyq520[2] = x.ReadOnly != false
			if yyr520 || yy2arr520 {
				r.EncodeArrayStart(3)
			} else {
				var yynn520 int = 2
				for _, b := range yyq520 {
					if b {
						yynn520++
					}
				}
				r.EncodeMapStart(yynn520)
			}
			if yyr520 || yy2arr520 {
				yym522 := z.EncBinary()
				_ = yym522
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				yym523 := z.EncBinary()
				_ = yym523
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr520 || yy2arr520 {
				yym525 := z.EncBinary()
				_ = yym525
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym526 := z.EncBinary()
				_ = yym526
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr520 || yy2arr520 {
				if yyq520[2] {
					yym528 := z.EncBinary()
					_ = yym528
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq520[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym529 := z.EncBinary()
					_ = yym529
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep520 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym530 := z.DecBinary()
	_ = yym530
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl531 := r.ReadMapStart()
			if yyl531 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl531, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl531 := r.ReadArrayStart()
			if yyl531 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl531, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys532Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys532Slc
	var yyhl532 bool = l >= 0
	for yyj532 := 0; ; yyj532++ {
		if yyhl532 {
			if yyj532 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys532Slc = r.DecodeBytes(yys532Slc, true, true)
		yys532 := string(yys532Slc)
		switch yys532 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys532)
		} // end switch yys532
	} // end for yyj532
	if !yyhl532 {
		r.ReadEnd()
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj536 int
	var yyb536 bool
	var yyhl536 bool = l >= 0
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj536++
		if yyhl536 {
			yyb536 = yyj536 > l
		} else {
			yyb536 = r.CheckBreak()
		}
		if yyb536 {
			break
		}
		z.DecStructFieldNotFound(yyj536-1, "")
	}
	r.ReadEnd()
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym540 := z.EncBinary()
	_ = yym540
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym541 := z.DecBinary()
	_ = yym541
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym542 := z.EncBinary()
		_ = yym542
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep543 := !z.EncBinary()
			yy2arr543 := z.EncBasicHandle().StructToArray
			var yyq543 [8]bool
			_, _, _ = yysep543, yyq543, yy2arr543
			const yyr543 bool = false
			yyq543[2] = x.FSType != ""
			yyq543[7] = x.ReadOnly != false
			if yyr543 || yy2arr543 {
				r.EncodeArrayStart(8)
			} else {
				var yynn543 int = 6
				for _, b := range yyq543 {
					if b {
						yynn543++
					}
				}
				r.EncodeMapStart(yynn543)
			}
			if yyr543 || yy2arr543 {
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym545 := z.EncBinary()
					_ = yym545
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym546 := z.EncBinary()
					_ = yym546
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr543 || yy2arr543 {
				yym548 := z.EncBinary()
				_ = yym548
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym549 := z.EncBinary()
				_ = yym549
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr543 || yy2arr543 {
				if yyq543[2] {
					yym551 := z.EncBinary()
					_ = yym551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq543[2] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym552 := z.EncBinary()
					_ = yym552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr543 || yy2arr543 {
				yym554 := z.EncBinary()
				_ = yym554
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				yym555 := z.EncBinary()
				_ = yym555
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr543 || yy2arr543 {
				yym557 := z.EncBinary()
				_ = yym557
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				yym558 := z.EncBinary()
				_ = yym558
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr543 || yy2arr543 {
				yym560 := z.EncBinary()
				_ = yym560
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				yym561 := z.EncBinary()
				_ = yym561
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr543 || yy2arr543 {
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr543 || yy2arr543 {
				if yyq543[7] {
					yym564 := z.EncBinary()
					_ = yym564
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq543[7] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym565 := z.EncBinary()
					_ = yym565
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep543 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym566 := z.DecBinary()
	_ = yym566
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl567 := r.ReadMapStart()
			if yyl567 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl567, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl567 := r.ReadArrayStart()
			if yyl567 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl567, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys568Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys568Slc
	var yyhl568 bool = l >= 0
	for yyj568 := 0; ; yyj568++ {
		if yyhl568 {
			if yyj568 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys568Slc = r.DecodeBytes(yys568Slc, true, true)
		yys568 := string(yys568Slc)
		switch yys568 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv569 := &x.CephMonitors
				yym570 := z.DecBinary()
				_ = yym570
				if false {
				} else {
					z.F.DecSliceStringX(yyv569, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys568)
		} // end switch yys568
	} // end for yyj568
	if !yyhl568 {
		r.ReadEnd()
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj578 int
	var yyb578 bool
	var yyhl578 bool = l >= 0
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv579 := &x.CephMonitors
		yym580 := z.DecBinary()
		_ = yym580
		if false {
		} else {
			z.F.DecSliceStringX(yyv579, false, d)
		}
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj578++
		if yyhl578 {
			yyb578 = yyj578 > l
		} else {
			yyb578 = r.CheckBreak()
		}
		if yyb578 {
			break
		}
		z.DecStructFieldNotFound(yyj578-1, "")
	}
	r.ReadEnd()
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym588 := z.EncBinary()
		_ = yym588
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep589 := !z.EncBinary()
			yy2arr589 := z.EncBasicHandle().StructToArray
			var yyq589 [3]bool
			_, _, _ = yysep589, yyq589, yy2arr589
			const yyr589 bool = false
			yyq589[1] = x.FSType != ""
			yyq589[2] = x.ReadOnly != false
			if yyr589 || yy2arr589 {
				r.EncodeArrayStart(3)
			} else {
				var yynn589 int = 1
				for _, b := range yyq589 {
					if b {
						yynn589++
					}
				}
				r.EncodeMapStart(yynn589)
			}
			if yyr589 || yy2arr589 {
				yym591 := z.EncBinary()
				_ = yym591
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym592 := z.EncBinary()
				_ = yym592
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr589 || yy2arr589 {
				if yyq589[1] {
					yym594 := z.EncBinary()
					_ = yym594
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq589[1] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym595 := z.EncBinary()
					_ = yym595
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr589 || yy2arr589 {
				if yyq589[2] {
					yym597 := z.EncBinary()
					_ = yym597
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq589[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym598 := z.EncBinary()
					_ = yym598
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep589 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym599 := z.DecBinary()
	_ = yym599
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl600 := r.ReadMapStart()
			if yyl600 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl600, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl600 := r.ReadArrayStart()
			if yyl600 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl600, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys601Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys601Slc
	var yyhl601 bool = l >= 0
	for yyj601 := 0; ; yyj601++ {
		if yyhl601 {
			if yyj601 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys601Slc = r.DecodeBytes(yys601Slc, true, true)
		yys601 := string(yys601Slc)
		switch yys601 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys601)
		} // end switch yys601
	} // end for yyj601
	if !yyhl601 {
		r.ReadEnd()
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj605 int
	var yyb605 bool
	var yyhl605 bool = l >= 0
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj605++
		if yyhl605 {
			yyb605 = yyj605 > l
		} else {
			yyb605 = r.CheckBreak()
		}
		if yyb605 {
			break
		}
		z.DecStructFieldNotFound(yyj605-1, "")
	}
	r.ReadEnd()
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym609 := z.EncBinary()
		_ = yym609
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep610 := !z.EncBinary()
			yy2arr610 := z.EncBasicHandle().StructToArray
			var yyq610 [5]bool
			_, _, _ = yysep610, yyq610, yy2arr610
			const yyr610 bool = false
			yyq610[1] = x.User != ""
			yyq610[2] = x.SecretFile != ""
			yyq610[3] = x.SecretRef != nil
			yyq610[4] = x.ReadOnly != false
			if yyr610 || yy2arr610 {
				r.EncodeArrayStart(5)
			} else {
				var yynn610 int = 1
				for _, b := range yyq610 {
					if b {
						yynn610++
					}
				}
				r.EncodeMapStart(yynn610)
			}
			if yyr610 || yy2arr610 {
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym612 := z.EncBinary()
					_ = yym612
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym613 := z.EncBinary()
					_ = yym613
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[1] {
					yym615 := z.EncBinary()
					_ = yym615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq610[1] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym616 := z.EncBinary()
					_ = yym616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[2] {
					yym618 := z.EncBinary()
					_ = yym618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq610[2] {
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[3] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq610[3] {
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr610 || yy2arr610 {
				if yyq610[4] {
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq610[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym623 := z.EncBinary()
					_ = yym623
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep610 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym624 := z.DecBinary()
	_ = yym624
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl625 := r.ReadMapStart()
			if yyl625 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl625, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl625 := r.ReadArrayStart()
			if yyl625 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl625, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys626Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys626Slc
	var yyhl626 bool = l >= 0
	for yyj626 := 0; ; yyj626++ {
		if yyhl626 {
			if yyj626 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys626Slc = r.DecodeBytes(yys626Slc, true, true)
		yys626 := string(yys626Slc)
		switch yys626 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv627 := &x.Monitors
				yym628 := z.DecBinary()
				_ = yym628
				if false {
				} else {
					z.F.DecSliceStringX(yyv627, false, d)
				}
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys626)
		} // end switch yys626
	} // end for yyj626
	if !yyhl626 {
		r.ReadEnd()
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj633 int
	var yyb633 bool
	var yyhl633 bool = l >= 0
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv634 := &x.Monitors
		yym635 := z.DecBinary()
		_ = yym635
		if false {
		} else {
			z.F.DecSliceStringX(yyv634, false, d)
		}
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj633++
		if yyhl633 {
			yyb633 = yyj633 > l
		} else {
			yyb633 = r.CheckBreak()
		}
		if yyb633 {
			break
		}
		z.DecStructFieldNotFound(yyj633-1, "")
	}
	r.ReadEnd()
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym640 := z.EncBinary()
		_ = yym640
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep641 := !z.EncBinary()
			yy2arr641 := z.EncBasicHandle().StructToArray
			var yyq641 [1]bool
			_, _, _ = yysep641, yyq641, yy2arr641
			const yyr641 bool = false
			if yyr641 || yy2arr641 {
				r.EncodeArrayStart(1)
			} else {
				var yynn641 int = 1
				for _, b := range yyq641 {
					if b {
						yynn641++
					}
				}
				r.EncodeMapStart(yynn641)
			}
			if yyr641 || yy2arr641 {
				yym643 := z.EncBinary()
				_ = yym643
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				yym644 := z.EncBinary()
				_ = yym644
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yysep641 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym645 := z.DecBinary()
	_ = yym645
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl646 := r.ReadMapStart()
			if yyl646 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl646, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl646 := r.ReadArrayStart()
			if yyl646 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl646, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys647Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys647Slc
	var yyhl647 bool = l >= 0
	for yyj647 := 0; ; yyj647++ {
		if yyhl647 {
			if yyj647 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys647Slc = r.DecodeBytes(yys647Slc, true, true)
		yys647 := string(yys647Slc)
		switch yys647 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys647)
		} // end switch yys647
	} // end for yyj647
	if !yyhl647 {
		r.ReadEnd()
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj649 int
	var yyb649 bool
	var yyhl649 bool = l >= 0
	yyj649++
	if yyhl649 {
		yyb649 = yyj649 > l
	} else {
		yyb649 = r.CheckBreak()
	}
	if yyb649 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj649++
		if yyhl649 {
			yyb649 = yyj649 > l
		} else {
			yyb649 = r.CheckBreak()
		}
		if yyb649 {
			break
		}
		z.DecStructFieldNotFound(yyj649-1, "")
	}
	r.ReadEnd()
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym651 := z.EncBinary()
	_ = yym651
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym652 := z.DecBinary()
	_ = yym652
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym653 := z.EncBinary()
		_ = yym653
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep654 := !z.EncBinary()
			yy2arr654 := z.EncBasicHandle().StructToArray
			var yyq654 [4]bool
			_, _, _ = yysep654, yyq654, yy2arr654
			const yyr654 bool = false
			yyq654[2] = x.Partition != 0
			yyq654[3] = x.ReadOnly != false
			if yyr654 || yy2arr654 {
				r.EncodeArrayStart(4)
			} else {
				var yynn654 int = 2
				for _, b := range yyq654 {
					if b {
						yynn654++
					}
				}
				r.EncodeMapStart(yynn654)
			}
			if yyr654 || yy2arr654 {
				yym656 := z.EncBinary()
				_ = yym656
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				yym657 := z.EncBinary()
				_ = yym657
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr654 || yy2arr654 {
				yym659 := z.EncBinary()
				_ = yym659
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym660 := z.EncBinary()
				_ = yym660
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr654 || yy2arr654 {
				if yyq654[2] {
					yym662 := z.EncBinary()
					_ = yym662
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq654[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym663 := z.EncBinary()
					_ = yym663
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr654 || yy2arr654 {
				if yyq654[3] {
					yym665 := z.EncBinary()
					_ = yym665
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq654[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym666 := z.EncBinary()
					_ = yym666
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep654 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym667 := z.DecBinary()
	_ = yym667
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl668 := r.ReadMapStart()
			if yyl668 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl668, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl668 := r.ReadArrayStart()
			if yyl668 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl668, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys669Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys669Slc
	var yyhl669 bool = l >= 0
	for yyj669 := 0; ; yyj669++ {
		if yyhl669 {
			if yyj669 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys669Slc = r.DecodeBytes(yys669Slc, true, true)
		yys669 := string(yys669Slc)
		switch yys669 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys669)
		} // end switch yys669
	} // end for yyj669
	if !yyhl669 {
		r.ReadEnd()
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj674 int
	var yyb674 bool
	var yyhl674 bool = l >= 0
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj674++
	if yyhl674 {
		yyb674 = yyj674 > l
	} else {
		yyb674 = r.CheckBreak()
	}
	if yyb674 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj674++
		if yyhl674 {
			yyb674 = yyj674 > l
		} else {
			yyb674 = r.CheckBreak()
		}
		if yyb674 {
			break
		}
		z.DecStructFieldNotFound(yyj674-1, "")
	}
	r.ReadEnd()
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym679 := z.EncBinary()
		_ = yym679
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep680 := !z.EncBinary()
			yy2arr680 := z.EncBasicHandle().StructToArray
			var yyq680 [4]bool
			_, _, _ = yysep680, yyq680, yy2arr680
			const yyr680 bool = false
			yyq680[2] = x.Partition != 0
			yyq680[3] = x.ReadOnly != false
			if yyr680 || yy2arr680 {
				r.EncodeArrayStart(4)
			} else {
				var yynn680 int = 2
				for _, b := range yyq680 {
					if b {
						yynn680++
					}
				}
				r.EncodeMapStart(yynn680)
			}
			if yyr680 || yy2arr680 {
				yym682 := z.EncBinary()
				_ = yym682
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym683 := z.EncBinary()
				_ = yym683
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr680 || yy2arr680 {
				yym685 := z.EncBinary()
				_ = yym685
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym686 := z.EncBinary()
				_ = yym686
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr680 || yy2arr680 {
				if yyq680[2] {
					yym688 := z.EncBinary()
					_ = yym688
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq680[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym689 := z.EncBinary()
					_ = yym689
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr680 || yy2arr680 {
				if yyq680[3] {
					yym691 := z.EncBinary()
					_ = yym691
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq680[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym692 := z.EncBinary()
					_ = yym692
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep680 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym693 := z.DecBinary()
	_ = yym693
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl694 := r.ReadMapStart()
			if yyl694 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl694, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl694 := r.ReadArrayStart()
			if yyl694 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl694, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys695Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys695Slc
	var yyhl695 bool = l >= 0
	for yyj695 := 0; ; yyj695++ {
		if yyhl695 {
			if yyj695 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys695Slc = r.DecodeBytes(yys695Slc, true, true)
		yys695 := string(yys695Slc)
		switch yys695 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys695)
		} // end switch yys695
	} // end for yyj695
	if !yyhl695 {
		r.ReadEnd()
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj700 int
	var yyb700 bool
	var yyhl700 bool = l >= 0
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj700++
		if yyhl700 {
			yyb700 = yyj700 > l
		} else {
			yyb700 = r.CheckBreak()
		}
		if yyb700 {
			break
		}
		z.DecStructFieldNotFound(yyj700-1, "")
	}
	r.ReadEnd()
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym705 := z.EncBinary()
		_ = yym705
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep706 := !z.EncBinary()
			yy2arr706 := z.EncBasicHandle().StructToArray
			var yyq706 [2]bool
			_, _, _ = yysep706, yyq706, yy2arr706
			const yyr706 bool = false
			if yyr706 || yy2arr706 {
				r.EncodeArrayStart(2)
			} else {
				var yynn706 int = 2
				for _, b := range yyq706 {
					if b {
						yynn706++
					}
				}
				r.EncodeMapStart(yynn706)
			}
			if yyr706 || yy2arr706 {
				yym708 := z.EncBinary()
				_ = yym708
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				yym709 := z.EncBinary()
				_ = yym709
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr706 || yy2arr706 {
				yym711 := z.EncBinary()
				_ = yym711
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("revision"))
				yym712 := z.EncBinary()
				_ = yym712
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			}
			if yysep706 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym713 := z.DecBinary()
	_ = yym713
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl714 := r.ReadMapStart()
			if yyl714 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl714, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl714 := r.ReadArrayStart()
			if yyl714 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl714, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys715Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys715Slc
	var yyhl715 bool = l >= 0
	for yyj715 := 0; ; yyj715++ {
		if yyhl715 {
			if yyj715 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys715Slc = r.DecodeBytes(yys715Slc, true, true)
		yys715 := string(yys715Slc)
		switch yys715 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys715)
		} // end switch yys715
	} // end for yyj715
	if !yyhl715 {
		r.ReadEnd()
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj718 int
	var yyb718 bool
	var yyhl718 bool = l >= 0
	yyj718++
	if yyhl718 {
		yyb718 = yyj718 > l
	} else {
		yyb718 = r.CheckBreak()
	}
	if yyb718 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj718++
	if yyhl718 {
		yyb718 = yyj718 > l
	} else {
		yyb718 = r.CheckBreak()
	}
	if yyb718 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	for {
		yyj718++
		if yyhl718 {
			yyb718 = yyj718 > l
		} else {
			yyb718 = r.CheckBreak()
		}
		if yyb718 {
			break
		}
		z.DecStructFieldNotFound(yyj718-1, "")
	}
	r.ReadEnd()
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym721 := z.EncBinary()
		_ = yym721
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep722 := !z.EncBinary()
			yy2arr722 := z.EncBasicHandle().StructToArray
			var yyq722 [1]bool
			_, _, _ = yysep722, yyq722, yy2arr722
			const yyr722 bool = false
			if yyr722 || yy2arr722 {
				r.EncodeArrayStart(1)
			} else {
				var yynn722 int = 1
				for _, b := range yyq722 {
					if b {
						yynn722++
					}
				}
				r.EncodeMapStart(yynn722)
			}
			if yyr722 || yy2arr722 {
				yym724 := z.EncBinary()
				_ = yym724
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				yym725 := z.EncBinary()
				_ = yym725
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yysep722 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym726 := z.DecBinary()
	_ = yym726
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl727 := r.ReadMapStart()
			if yyl727 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl727, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl727 := r.ReadArrayStart()
			if yyl727 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl727, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys728Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys728Slc
	var yyhl728 bool = l >= 0
	for yyj728 := 0; ; yyj728++ {
		if yyhl728 {
			if yyj728 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys728Slc = r.DecodeBytes(yys728Slc, true, true)
		yys728 := string(yys728Slc)
		switch yys728 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys728)
		} // end switch yys728
	} // end for yyj728
	if !yyhl728 {
		r.ReadEnd()
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj730 int
	var yyb730 bool
	var yyhl730 bool = l >= 0
	yyj730++
	if yyhl730 {
		yyb730 = yyj730 > l
	} else {
		yyb730 = r.CheckBreak()
	}
	if yyb730 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj730++
		if yyhl730 {
			yyb730 = yyj730 > l
		} else {
			yyb730 = r.CheckBreak()
		}
		if yyb730 {
			break
		}
		z.DecStructFieldNotFound(yyj730-1, "")
	}
	r.ReadEnd()
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym732 := z.EncBinary()
		_ = yym732
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep733 := !z.EncBinary()
			yy2arr733 := z.EncBasicHandle().StructToArray
			var yyq733 [3]bool
			_, _, _ = yysep733, yyq733, yy2arr733
			const yyr733 bool = false
			yyq733[2] = x.ReadOnly != false
			if yyr733 || yy2arr733 {
				r.EncodeArrayStart(3)
			} else {
				var yynn733 int = 2
				for _, b := range yyq733 {
					if b {
						yynn733++
					}
				}
				r.EncodeMapStart(yynn733)
			}
			if yyr733 || yy2arr733 {
				yym735 := z.EncBinary()
				_ = yym735
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				yym736 := z.EncBinary()
				_ = yym736
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr733 || yy2arr733 {
				yym738 := z.EncBinary()
				_ = yym738
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym739 := z.EncBinary()
				_ = yym739
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr733 || yy2arr733 {
				if yyq733[2] {
					yym741 := z.EncBinary()
					_ = yym741
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq733[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym742 := z.EncBinary()
					_ = yym742
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep733 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym743 := z.DecBinary()
	_ = yym743
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl744 := r.ReadMapStart()
			if yyl744 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl744, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl744 := r.ReadArrayStart()
			if yyl744 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl744, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys745Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys745Slc
	var yyhl745 bool = l >= 0
	for yyj745 := 0; ; yyj745++ {
		if yyhl745 {
			if yyj745 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys745Slc = r.DecodeBytes(yys745Slc, true, true)
		yys745 := string(yys745Slc)
		switch yys745 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys745)
		} // end switch yys745
	} // end for yyj745
	if !yyhl745 {
		r.ReadEnd()
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj749 int
	var yyb749 bool
	var yyhl749 bool = l >= 0
	yyj749++
	if yyhl749 {
		yyb749 = yyj749 > l
	} else {
		yyb749 = r.CheckBreak()
	}
	if yyb749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj749++
	if yyhl749 {
		yyb749 = yyj749 > l
	} else {
		yyb749 = r.CheckBreak()
	}
	if yyb749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj749++
	if yyhl749 {
		yyb749 = yyj749 > l
	} else {
		yyb749 = r.CheckBreak()
	}
	if yyb749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj749++
		if yyhl749 {
			yyb749 = yyj749 > l
		} else {
			yyb749 = r.CheckBreak()
		}
		if yyb749 {
			break
		}
		z.DecStructFieldNotFound(yyj749-1, "")
	}
	r.ReadEnd()
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym753 := z.EncBinary()
		_ = yym753
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep754 := !z.EncBinary()
			yy2arr754 := z.EncBasicHandle().StructToArray
			var yyq754 [5]bool
			_, _, _ = yysep754, yyq754, yy2arr754
			const yyr754 bool = false
			yyq754[4] = x.ReadOnly != false
			if yyr754 || yy2arr754 {
				r.EncodeArrayStart(5)
			} else {
				var yynn754 int = 4
				for _, b := range yyq754 {
					if b {
						yynn754++
					}
				}
				r.EncodeMapStart(yynn754)
			}
			if yyr754 || yy2arr754 {
				yym756 := z.EncBinary()
				_ = yym756
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				yym757 := z.EncBinary()
				_ = yym757
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr754 || yy2arr754 {
				yym759 := z.EncBinary()
				_ = yym759
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				yym760 := z.EncBinary()
				_ = yym760
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr754 || yy2arr754 {
				yym762 := z.EncBinary()
				_ = yym762
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				yym763 := z.EncBinary()
				_ = yym763
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr754 || yy2arr754 {
				yym765 := z.EncBinary()
				_ = yym765
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym766 := z.EncBinary()
				_ = yym766
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr754 || yy2arr754 {
				if yyq754[4] {
					yym768 := z.EncBinary()
					_ = yym768
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq754[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym769 := z.EncBinary()
					_ = yym769
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep754 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym770 := z.DecBinary()
	_ = yym770
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl771 := r.ReadMapStart()
			if yyl771 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl771, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl771 := r.ReadArrayStart()
			if yyl771 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl771, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys772Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys772Slc
	var yyhl772 bool = l >= 0
	for yyj772 := 0; ; yyj772++ {
		if yyhl772 {
			if yyj772 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys772Slc = r.DecodeBytes(yys772Slc, true, true)
		yys772 := string(yys772Slc)
		switch yys772 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys772)
		} // end switch yys772
	} // end for yyj772
	if !yyhl772 {
		r.ReadEnd()
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj778 int
	var yyb778 bool
	var yyhl778 bool = l >= 0
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj778++
	if yyhl778 {
		yyb778 = yyj778 > l
	} else {
		yyb778 = r.CheckBreak()
	}
	if yyb778 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj778++
		if yyhl778 {
			yyb778 = yyj778 > l
		} else {
			yyb778 = r.CheckBreak()
		}
		if yyb778 {
			break
		}
		z.DecStructFieldNotFound(yyj778-1, "")
	}
	r.ReadEnd()
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym784 := z.EncBinary()
		_ = yym784
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep785 := !z.EncBinary()
			yy2arr785 := z.EncBasicHandle().StructToArray
			var yyq785 [4]bool
			_, _, _ = yysep785, yyq785, yy2arr785
			const yyr785 bool = false
			yyq785[3] = x.ReadOnly != false
			if yyr785 || yy2arr785 {
				r.EncodeArrayStart(4)
			} else {
				var yynn785 int = 3
				for _, b := range yyq785 {
					if b {
						yynn785++
					}
				}
				r.EncodeMapStart(yynn785)
			}
			if yyr785 || yy2arr785 {
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym787 := z.EncBinary()
					_ = yym787
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym788 := z.EncBinary()
					_ = yym788
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr785 || yy2arr785 {
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy790 := *x.Lun
					yym791 := z.EncBinary()
					_ = yym791
					if false {
					} else {
						r.EncodeInt(int64(yy790))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy792 := *x.Lun
					yym793 := z.EncBinary()
					_ = yym793
					if false {
					} else {
						r.EncodeInt(int64(yy792))
					}
				}
			}
			if yyr785 || yy2arr785 {
				yym795 := z.EncBinary()
				_ = yym795
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym796 := z.EncBinary()
				_ = yym796
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr785 || yy2arr785 {
				if yyq785[3] {
					yym798 := z.EncBinary()
					_ = yym798
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq785[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym799 := z.EncBinary()
					_ = yym799
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep785 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym800 := z.DecBinary()
	_ = yym800
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl801 := r.ReadMapStart()
			if yyl801 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl801, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl801 := r.ReadArrayStart()
			if yyl801 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl801, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys802Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys802Slc
	var yyhl802 bool = l >= 0
	for yyj802 := 0; ; yyj802++ {
		if yyhl802 {
			if yyj802 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys802Slc = r.DecodeBytes(yys802Slc, true, true)
		yys802 := string(yys802Slc)
		switch yys802 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv803 := &x.TargetWWNs
				yym804 := z.DecBinary()
				_ = yym804
				if false {
				} else {
					z.F.DecSliceStringX(yyv803, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int)
				}
				yym806 := z.DecBinary()
				_ = yym806
				if false {
				} else {
					*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys802)
		} // end switch yys802
	} // end for yyj802
	if !yyhl802 {
		r.ReadEnd()
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj809 int
	var yyb809 bool
	var yyhl809 bool = l >= 0
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv810 := &x.TargetWWNs
		yym811 := z.DecBinary()
		_ = yym811
		if false {
		} else {
			z.F.DecSliceStringX(yyv810, false, d)
		}
	}
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int)
		}
		yym813 := z.DecBinary()
		_ = yym813
		if false {
		} else {
			*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj809++
		if yyhl809 {
			yyb809 = yyj809 > l
		} else {
			yyb809 = r.CheckBreak()
		}
		if yyb809 {
			break
		}
		z.DecStructFieldNotFound(yyj809-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym816 := z.EncBinary()
		_ = yym816
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep817 := !z.EncBinary()
			yy2arr817 := z.EncBasicHandle().StructToArray
			var yyq817 [5]bool
			_, _, _ = yysep817, yyq817, yy2arr817
			const yyr817 bool = false
			yyq817[0] = x.Name != ""
			yyq817[1] = x.HostPort != 0
			yyq817[3] = x.Protocol != ""
			yyq817[4] = x.HostIP != ""
			if yyr817 || yy2arr817 {
				r.EncodeArrayStart(5)
			} else {
				var yynn817 int = 1
				for _, b := range yyq817 {
					if b {
						yynn817++
					}
				}
				r.EncodeMapStart(yynn817)
			}
			if yyr817 || yy2arr817 {
				if yyq817[0] {
					yym819 := z.EncBinary()
					_ = yym819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq817[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym820 := z.EncBinary()
					_ = yym820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr817 || yy2arr817 {
				if yyq817[1] {
					yym822 := z.EncBinary()
					_ = yym822
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq817[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					yym823 := z.EncBinary()
					_ = yym823
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr817 || yy2arr817 {
				yym825 := z.EncBinary()
				_ = yym825
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				yym826 := z.EncBinary()
				_ = yym826
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr817 || yy2arr817 {
				if yyq817[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq817[3] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr817 || yy2arr817 {
				if yyq817[4] {
					yym829 := z.EncBinary()
					_ = yym829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq817[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym830 := z.EncBinary()
					_ = yym830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yysep817 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym831 := z.DecBinary()
	_ = yym831
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl832 := r.ReadMapStart()
			if yyl832 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl832, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl832 := r.ReadArrayStart()
			if yyl832 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl832, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys833Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys833Slc
	var yyhl833 bool = l >= 0
	for yyj833 := 0; ; yyj833++ {
		if yyhl833 {
			if yyj833 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys833Slc = r.DecodeBytes(yys833Slc, true, true)
		yys833 := string(yys833Slc)
		switch yys833 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys833)
		} // end switch yys833
	} // end for yyj833
	if !yyhl833 {
		r.ReadEnd()
	}
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj839 int
	var yyb839 bool
	var yyhl839 bool = l >= 0
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj839++
	if yyhl839 {
		yyb839 = yyj839 > l
	} else {
		yyb839 = r.CheckBreak()
	}
	if yyb839 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj839++
		if yyhl839 {
			yyb839 = yyj839 > l
		} else {
			yyb839 = r.CheckBreak()
		}
		if yyb839 {
			break
		}
		z.DecStructFieldNotFound(yyj839-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym845 := z.EncBinary()
		_ = yym845
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep846 := !z.EncBinary()
			yy2arr846 := z.EncBasicHandle().StructToArray
			var yyq846 [3]bool
			_, _, _ = yysep846, yyq846, yy2arr846
			const yyr846 bool = false
			yyq846[1] = x.ReadOnly != false
			if yyr846 || yy2arr846 {
				r.EncodeArrayStart(3)
			} else {
				var yynn846 int = 2
				for _, b := range yyq846 {
					if b {
						yynn846++
					}
				}
				r.EncodeMapStart(yynn846)
			}
			if yyr846 || yy2arr846 {
				yym848 := z.EncBinary()
				_ = yym848
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym849 := z.EncBinary()
				_ = yym849
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr846 || yy2arr846 {
				if yyq846[1] {
					yym851 := z.EncBinary()
					_ = yym851
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq846[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym852 := z.EncBinary()
					_ = yym852
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr846 || yy2arr846 {
				yym854 := z.EncBinary()
				_ = yym854
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				yym855 := z.EncBinary()
				_ = yym855
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yysep846 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym856 := z.DecBinary()
	_ = yym856
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl857 := r.ReadMapStart()
			if yyl857 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl857, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl857 := r.ReadArrayStart()
			if yyl857 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl857, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys858Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys858Slc
	var yyhl858 bool = l >= 0
	for yyj858 := 0; ; yyj858++ {
		if yyhl858 {
			if yyj858 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys858Slc = r.DecodeBytes(yys858Slc, true, true)
		yys858 := string(yys858Slc)
		switch yys858 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys858)
		} // end switch yys858
	} // end for yyj858
	if !yyhl858 {
		r.ReadEnd()
	}
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj862 int
	var yyb862 bool
	var yyhl862 bool = l >= 0
	yyj862++
	if yyhl862 {
		yyb862 = yyj862 > l
	} else {
		yyb862 = r.CheckBreak()
	}
	if yyb862 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj862++
	if yyhl862 {
		yyb862 = yyj862 > l
	} else {
		yyb862 = r.CheckBreak()
	}
	if yyb862 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj862++
	if yyhl862 {
		yyb862 = yyj862 > l
	} else {
		yyb862 = r.CheckBreak()
	}
	if yyb862 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj862++
		if yyhl862 {
			yyb862 = yyj862 > l
		} else {
			yyb862 = r.CheckBreak()
		}
		if yyb862 {
			break
		}
		z.DecStructFieldNotFound(yyj862-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym866 := z.EncBinary()
		_ = yym866
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep867 := !z.EncBinary()
			yy2arr867 := z.EncBasicHandle().StructToArray
			var yyq867 [3]bool
			_, _, _ = yysep867, yyq867, yy2arr867
			const yyr867 bool = false
			yyq867[1] = x.Value != ""
			yyq867[2] = x.ValueFrom != nil
			if yyr867 || yy2arr867 {
				r.EncodeArrayStart(3)
			} else {
				var yynn867 int = 1
				for _, b := range yyq867 {
					if b {
						yynn867++
					}
				}
				r.EncodeMapStart(yynn867)
			}
			if yyr867 || yy2arr867 {
				yym869 := z.EncBinary()
				_ = yym869
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym870 := z.EncBinary()
				_ = yym870
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr867 || yy2arr867 {
				if yyq867[1] {
					yym872 := z.EncBinary()
					_ = yym872
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq867[1] {
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					yym873 := z.EncBinary()
					_ = yym873
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr867 || yy2arr867 {
				if yyq867[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq867[2] {
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yysep867 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym875 := z.DecBinary()
	_ = yym875
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl876 := r.ReadMapStart()
			if yyl876 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl876, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl876 := r.ReadArrayStart()
			if yyl876 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl876, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys877Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys877Slc
	var yyhl877 bool = l >= 0
	for yyj877 := 0; ; yyj877++ {
		if yyhl877 {
			if yyj877 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys877Slc = r.DecodeBytes(yys877Slc, true, true)
		yys877 := string(yys877Slc)
		switch yys877 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys877)
		} // end switch yys877
	} // end for yyj877
	if !yyhl877 {
		r.ReadEnd()
	}
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj881 int
	var yyb881 bool
	var yyhl881 bool = l >= 0
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj881++
		if yyhl881 {
			yyb881 = yyj881 > l
		} else {
			yyb881 = r.CheckBreak()
		}
		if yyb881 {
			break
		}
		z.DecStructFieldNotFound(yyj881-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym885 := z.EncBinary()
		_ = yym885
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep886 := !z.EncBinary()
			yy2arr886 := z.EncBasicHandle().StructToArray
			var yyq886 [1]bool
			_, _, _ = yysep886, yyq886, yy2arr886
			const yyr886 bool = false
			if yyr886 || yy2arr886 {
				r.EncodeArrayStart(1)
			} else {
				var yynn886 int = 1
				for _, b := range yyq886 {
					if b {
						yynn886++
					}
				}
				r.EncodeMapStart(yynn886)
			}
			if yyr886 || yy2arr886 {
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			}
			if yysep886 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym888 := z.DecBinary()
	_ = yym888
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl889 := r.ReadMapStart()
			if yyl889 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl889, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl889 := r.ReadArrayStart()
			if yyl889 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl889, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys890Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys890Slc
	var yyhl890 bool = l >= 0
	for yyj890 := 0; ; yyj890++ {
		if yyhl890 {
			if yyj890 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys890Slc = r.DecodeBytes(yys890Slc, true, true)
		yys890 := string(yys890Slc)
		switch yys890 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys890)
		} // end switch yys890
	} // end for yyj890
	if !yyhl890 {
		r.ReadEnd()
	}
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj892 int
	var yyb892 bool
	var yyhl892 bool = l >= 0
	yyj892++
	if yyhl892 {
		yyb892 = yyj892 > l
	} else {
		yyb892 = r.CheckBreak()
	}
	if yyb892 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj892++
		if yyhl892 {
			yyb892 = yyj892 > l
		} else {
			yyb892 = r.CheckBreak()
		}
		if yyb892 {
			break
		}
		z.DecStructFieldNotFound(yyj892-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym894 := z.EncBinary()
		_ = yym894
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep895 := !z.EncBinary()
			yy2arr895 := z.EncBasicHandle().StructToArray
			var yyq895 [2]bool
			_, _, _ = yysep895, yyq895, yy2arr895
			const yyr895 bool = false
			yyq895[0] = x.APIVersion != ""
			if yyr895 || yy2arr895 {
				r.EncodeArrayStart(2)
			} else {
				var yynn895 int = 1
				for _, b := range yyq895 {
					if b {
						yynn895++
					}
				}
				r.EncodeMapStart(yynn895)
			}
			if yyr895 || yy2arr895 {
				if yyq895[0] {
					yym897 := z.EncBinary()
					_ = yym897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq895[0] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym898 := z.EncBinary()
					_ = yym898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr895 || yy2arr895 {
				yym900 := z.EncBinary()
				_ = yym900
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				yym901 := z.EncBinary()
				_ = yym901
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yysep895 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym902 := z.DecBinary()
	_ = yym902
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl903 := r.ReadMapStart()
			if yyl903 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl903, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl903 := r.ReadArrayStart()
			if yyl903 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl903, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys904Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys904Slc
	var yyhl904 bool = l >= 0
	for yyj904 := 0; ; yyj904++ {
		if yyhl904 {
			if yyj904 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys904Slc = r.DecodeBytes(yys904Slc, true, true)
		yys904 := string(yys904Slc)
		switch yys904 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys904)
		} // end switch yys904
	} // end for yyj904
	if !yyhl904 {
		r.ReadEnd()
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj907 int
	var yyb907 bool
	var yyhl907 bool = l >= 0
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj907++
		if yyhl907 {
			yyb907 = yyj907 > l
		} else {
			yyb907 = r.CheckBreak()
		}
		if yyb907 {
			break
		}
		z.DecStructFieldNotFound(yyj907-1, "")
	}
	r.ReadEnd()
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym910 := z.EncBinary()
		_ = yym910
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep911 := !z.EncBinary()
			yy2arr911 := z.EncBasicHandle().StructToArray
			var yyq911 [4]bool
			_, _, _ = yysep911, yyq911, yy2arr911
			const yyr911 bool = false
			yyq911[0] = x.Path != ""
			yyq911[2] = x.Host != ""
			yyq911[3] = x.Scheme != ""
			if yyr911 || yy2arr911 {
				r.EncodeArrayStart(4)
			} else {
				var yynn911 int = 1
				for _, b := range yyq911 {
					if b {
						yynn911++
					}
				}
				r.EncodeMapStart(yynn911)
			}
			if yyr911 || yy2arr911 {
				if yyq911[0] {
					yym913 := z.EncBinary()
					_ = yym913
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq911[0] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym914 := z.EncBinary()
					_ = yym914
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr911 || yy2arr911 {
				yy916 := &x.Port
				yym917 := z.EncBinary()
				_ = yym917
				if false {
				} else if z.HasExtensions() && z.EncExt(yy916) {
				} else if !yym917 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy916)
				} else {
					z.EncFallback(yy916)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yy918 := &x.Port
				yym919 := z.EncBinary()
				_ = yym919
				if false {
				} else if z.HasExtensions() && z.EncExt(yy918) {
				} else if !yym919 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy918)
				} else {
					z.EncFallback(yy918)
				}
			}
			if yyr911 || yy2arr911 {
				if yyq911[2] {
					yym921 := z.EncBinary()
					_ = yym921
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq911[2] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym922 := z.EncBinary()
					_ = yym922
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr911 || yy2arr911 {
				if yyq911[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq911[3] {
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yysep911 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym924 := z.DecBinary()
	_ = yym924
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl925 := r.ReadMapStart()
			if yyl925 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl925, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl925 := r.ReadArrayStart()
			if yyl925 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl925, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys926Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys926Slc
	var yyhl926 bool = l >= 0
	for yyj926 := 0; ; yyj926++ {
		if yyhl926 {
			if yyj926 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys926Slc = r.DecodeBytes(yys926Slc, true, true)
		yys926 := string(yys926Slc)
		switch yys926 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_util.IntOrString{}
			} else {
				yyv928 := &x.Port
				yym929 := z.DecBinary()
				_ = yym929
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv928) {
				} else if !yym929 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv928)
				} else {
					z.DecFallback(yyv928, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys926)
		} // end switch yys926
	} // end for yyj926
	if !yyhl926 {
		r.ReadEnd()
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj932 int
	var yyb932 bool
	var yyhl932 bool = l >= 0
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_util.IntOrString{}
	} else {
		yyv934 := &x.Port
		yym935 := z.DecBinary()
		_ = yym935
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv934) {
		} else if !yym935 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv934)
		} else {
			z.DecFallback(yyv934, false)
		}
	}
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj932++
	if yyhl932 {
		yyb932 = yyj932 > l
	} else {
		yyb932 = r.CheckBreak()
	}
	if yyb932 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	for {
		yyj932++
		if yyhl932 {
			yyb932 = yyj932 > l
		} else {
			yyb932 = r.CheckBreak()
		}
		if yyb932 {
			break
		}
		z.DecStructFieldNotFound(yyj932-1, "")
	}
	r.ReadEnd()
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym938 := z.EncBinary()
	_ = yym938
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym939 := z.DecBinary()
	_ = yym939
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym940 := z.EncBinary()
		_ = yym940
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep941 := !z.EncBinary()
			yy2arr941 := z.EncBasicHandle().StructToArray
			var yyq941 [1]bool
			_, _, _ = yysep941, yyq941, yy2arr941
			const yyr941 bool = false
			if yyr941 || yy2arr941 {
				r.EncodeArrayStart(1)
			} else {
				var yynn941 int = 1
				for _, b := range yyq941 {
					if b {
						yynn941++
					}
				}
				r.EncodeMapStart(yynn941)
			}
			if yyr941 || yy2arr941 {
				yy943 := &x.Port
				yym944 := z.EncBinary()
				_ = yym944
				if false {
				} else if z.HasExtensions() && z.EncExt(yy943) {
				} else if !yym944 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy943)
				} else {
					z.EncFallback(yy943)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yy945 := &x.Port
				yym946 := z.EncBinary()
				_ = yym946
				if false {
				} else if z.HasExtensions() && z.EncExt(yy945) {
				} else if !yym946 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy945)
				} else {
					z.EncFallback(yy945)
				}
			}
			if yysep941 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym947 := z.DecBinary()
	_ = yym947
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl948 := r.ReadMapStart()
			if yyl948 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl948, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl948 := r.ReadArrayStart()
			if yyl948 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl948, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys949Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys949Slc
	var yyhl949 bool = l >= 0
	for yyj949 := 0; ; yyj949++ {
		if yyhl949 {
			if yyj949 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys949Slc = r.DecodeBytes(yys949Slc, true, true)
		yys949 := string(yys949Slc)
		switch yys949 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_util.IntOrString{}
			} else {
				yyv950 := &x.Port
				yym951 := z.DecBinary()
				_ = yym951
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv950) {
				} else if !yym951 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv950)
				} else {
					z.DecFallback(yyv950, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys949)
		} // end switch yys949
	} // end for yyj949
	if !yyhl949 {
		r.ReadEnd()
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj952 int
	var yyb952 bool
	var yyhl952 bool = l >= 0
	yyj952++
	if yyhl952 {
		yyb952 = yyj952 > l
	} else {
		yyb952 = r.CheckBreak()
	}
	if yyb952 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_util.IntOrString{}
	} else {
		yyv953 := &x.Port
		yym954 := z.DecBinary()
		_ = yym954
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv953) {
		} else if !yym954 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv953)
		} else {
			z.DecFallback(yyv953, false)
		}
	}
	for {
		yyj952++
		if yyhl952 {
			yyb952 = yyj952 > l
		} else {
			yyb952 = r.CheckBreak()
		}
		if yyb952 {
			break
		}
		z.DecStructFieldNotFound(yyj952-1, "")
	}
	r.ReadEnd()
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym955 := z.EncBinary()
		_ = yym955
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep956 := !z.EncBinary()
			yy2arr956 := z.EncBasicHandle().StructToArray
			var yyq956 [1]bool
			_, _, _ = yysep956, yyq956, yy2arr956
			const yyr956 bool = false
			yyq956[0] = len(x.Command) != 0
			if yyr956 || yy2arr956 {
				r.EncodeArrayStart(1)
			} else {
				var yynn956 int = 0
				for _, b := range yyq956 {
					if b {
						yynn956++
					}
				}
				r.EncodeMapStart(yynn956)
			}
			if yyr956 || yy2arr956 {
				if yyq956[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym958 := z.EncBinary()
						_ = yym958
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq956[0] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym959 := z.EncBinary()
						_ = yym959
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yysep956 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym960 := z.DecBinary()
	_ = yym960
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl961 := r.ReadMapStart()
			if yyl961 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl961, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl961 := r.ReadArrayStart()
			if yyl961 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl961, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys962Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys962Slc
	var yyhl962 bool = l >= 0
	for yyj962 := 0; ; yyj962++ {
		if yyhl962 {
			if yyj962 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys962Slc = r.DecodeBytes(yys962Slc, true, true)
		yys962 := string(yys962Slc)
		switch yys962 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv963 := &x.Command
				yym964 := z.DecBinary()
				_ = yym964
				if false {
				} else {
					z.F.DecSliceStringX(yyv963, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys962)
		} // end switch yys962
	} // end for yyj962
	if !yyhl962 {
		r.ReadEnd()
	}
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj965 int
	var yyb965 bool
	var yyhl965 bool = l >= 0
	yyj965++
	if yyhl965 {
		yyb965 = yyj965 > l
	} else {
		yyb965 = r.CheckBreak()
	}
	if yyb965 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv966 := &x.Command
		yym967 := z.DecBinary()
		_ = yym967
		if false {
		} else {
			z.F.DecSliceStringX(yyv966, false, d)
		}
	}
	for {
		yyj965++
		if yyhl965 {
			yyb965 = yyj965 > l
		} else {
			yyb965 = r.CheckBreak()
		}
		if yyb965 {
			break
		}
		z.DecStructFieldNotFound(yyj965-1, "")
	}
	r.ReadEnd()
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym968 := z.EncBinary()
		_ = yym968
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep969 := !z.EncBinary()
			yy2arr969 := z.EncBasicHandle().StructToArray
			var yyq969 [5]bool
			_, _, _ = yysep969, yyq969, yy2arr969
			const yyr969 bool = false
			yyq969[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq969[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq969[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq969[3] = x.InitialDelaySeconds != 0
			yyq969[4] = x.TimeoutSeconds != 0
			if yyr969 || yy2arr969 {
				r.EncodeArrayStart(5)
			} else {
				var yynn969 int = 0
				for _, b := range yyq969 {
					if b {
						yynn969++
					}
				}
				r.EncodeMapStart(yynn969)
			}
			var yyn970 bool
			if x.Handler.Exec == nil {
				yyn970 = true
				goto LABEL970
			}
		LABEL970:
			if yyr969 || yy2arr969 {
				if yyn970 {
					r.EncodeNil()
				} else {
					if yyq969[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq969[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if yyn970 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn971 bool
			if x.Handler.HTTPGet == nil {
				yyn971 = true
				goto LABEL971
			}
		LABEL971:
			if yyr969 || yy2arr969 {
				if yyn971 {
					r.EncodeNil()
				} else {
					if yyq969[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq969[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if yyn971 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn972 bool
			if x.Handler.TCPSocket == nil {
				yyn972 = true
				goto LABEL972
			}
		LABEL972:
			if yyr969 || yy2arr969 {
				if yyn972 {
					r.EncodeNil()
				} else {
					if yyq969[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq969[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if yyn972 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr969 || yy2arr969 {
				if yyq969[3] {
					yym974 := z.EncBinary()
					_ = yym974
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq969[3] {
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					yym975 := z.EncBinary()
					_ = yym975
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr969 || yy2arr969 {
				if yyq969[4] {
					yym977 := z.EncBinary()
					_ = yym977
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq969[4] {
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					yym978 := z.EncBinary()
					_ = yym978
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yysep969 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym979 := z.DecBinary()
	_ = yym979
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl980 := r.ReadMapStart()
			if yyl980 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl980, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl980 := r.ReadArrayStart()
			if yyl980 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl980, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys981Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys981Slc
	var yyhl981 bool = l >= 0
	for yyj981 := 0; ; yyj981++ {
		if yyhl981 {
			if yyj981 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys981Slc = r.DecodeBytes(yys981Slc, true, true)
		yys981 := string(yys981Slc)
		switch yys981 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int64(r.DecodeInt(64))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys981)
		} // end switch yys981
	} // end for yyj981
	if !yyhl981 {
		r.ReadEnd()
	}
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj987 int
	var yyb987 bool
	var yyhl987 bool = l >= 0
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int64(r.DecodeInt(64))
	}
	yyj987++
	if yyhl987 {
		yyb987 = yyj987 > l
	} else {
		yyb987 = r.CheckBreak()
	}
	if yyb987 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int64(r.DecodeInt(64))
	}
	for {
		yyj987++
		if yyhl987 {
			yyb987 = yyj987 > l
		} else {
			yyb987 = r.CheckBreak()
		}
		if yyb987 {
			break
		}
		z.DecStructFieldNotFound(yyj987-1, "")
	}
	r.ReadEnd()
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym993 := z.EncBinary()
	_ = yym993
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym994 := z.DecBinary()
	_ = yym994
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym995 := z.EncBinary()
	_ = yym995
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym996 := z.DecBinary()
	_ = yym996
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym997 := z.EncBinary()
		_ = yym997
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep998 := !z.EncBinary()
			yy2arr998 := z.EncBasicHandle().StructToArray
			var yyq998 [2]bool
			_, _, _ = yysep998, yyq998, yy2arr998
			const yyr998 bool = false
			yyq998[0] = len(x.Add) != 0
			yyq998[1] = len(x.Drop) != 0
			if yyr998 || yy2arr998 {
				r.EncodeArrayStart(2)
			} else {
				var yynn998 int = 0
				for _, b := range yyq998 {
					if b {
						yynn998++
					}
				}
				r.EncodeMapStart(yynn998)
			}
			if yyr998 || yy2arr998 {
				if yyq998[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1000 := z.EncBinary()
						_ = yym1000
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq998[0] {
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1001 := z.EncBinary()
						_ = yym1001
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr998 || yy2arr998 {
				if yyq998[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1003 := z.EncBinary()
						_ = yym1003
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq998[1] {
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1004 := z.EncBinary()
						_ = yym1004
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yysep998 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1005 := z.DecBinary()
	_ = yym1005
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1006 := r.ReadMapStart()
			if yyl1006 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1006, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1006 := r.ReadArrayStart()
			if yyl1006 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1006, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1007Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1007Slc
	var yyhl1007 bool = l >= 0
	for yyj1007 := 0; ; yyj1007++ {
		if yyhl1007 {
			if yyj1007 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1007Slc = r.DecodeBytes(yys1007Slc, true, true)
		yys1007 := string(yys1007Slc)
		switch yys1007 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1008 := &x.Add
				yym1009 := z.DecBinary()
				_ = yym1009
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1008), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1010 := &x.Drop
				yym1011 := z.DecBinary()
				_ = yym1011
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1010), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1007)
		} // end switch yys1007
	} // end for yyj1007
	if !yyhl1007 {
		r.ReadEnd()
	}
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1012 int
	var yyb1012 bool
	var yyhl1012 bool = l >= 0
	yyj1012++
	if yyhl1012 {
		yyb1012 = yyj1012 > l
	} else {
		yyb1012 = r.CheckBreak()
	}
	if yyb1012 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1013 := &x.Add
		yym1014 := z.DecBinary()
		_ = yym1014
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1013), d)
		}
	}
	yyj1012++
	if yyhl1012 {
		yyb1012 = yyj1012 > l
	} else {
		yyb1012 = r.CheckBreak()
	}
	if yyb1012 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1015 := &x.Drop
		yym1016 := z.DecBinary()
		_ = yym1016
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1015), d)
		}
	}
	for {
		yyj1012++
		if yyhl1012 {
			yyb1012 = yyj1012 > l
		} else {
			yyb1012 = r.CheckBreak()
		}
		if yyb1012 {
			break
		}
		z.DecStructFieldNotFound(yyj1012-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1017 := z.EncBinary()
		_ = yym1017
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1018 := !z.EncBinary()
			yy2arr1018 := z.EncBasicHandle().StructToArray
			var yyq1018 [2]bool
			_, _, _ = yysep1018, yyq1018, yy2arr1018
			const yyr1018 bool = false
			yyq1018[0] = len(x.Limits) != 0
			yyq1018[1] = len(x.Requests) != 0
			if yyr1018 || yy2arr1018 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1018 int = 0
				for _, b := range yyq1018 {
					if b {
						yynn1018++
					}
				}
				r.EncodeMapStart(yynn1018)
			}
			if yyr1018 || yy2arr1018 {
				if yyq1018[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1018[0] {
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1018 || yy2arr1018 {
				if yyq1018[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1018[1] {
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1018 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1021 := z.DecBinary()
	_ = yym1021
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1022 := r.ReadMapStart()
			if yyl1022 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1022, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1022 := r.ReadArrayStart()
			if yyl1022 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1022, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1023Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1023Slc
	var yyhl1023 bool = l >= 0
	for yyj1023 := 0; ; yyj1023++ {
		if yyhl1023 {
			if yyj1023 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1023Slc = r.DecodeBytes(yys1023Slc, true, true)
		yys1023 := string(yys1023Slc)
		switch yys1023 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1024 := &x.Limits
				yyv1024.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1025 := &x.Requests
				yyv1025.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1023)
		} // end switch yys1023
	} // end for yyj1023
	if !yyhl1023 {
		r.ReadEnd()
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1026 int
	var yyb1026 bool
	var yyhl1026 bool = l >= 0
	yyj1026++
	if yyhl1026 {
		yyb1026 = yyj1026 > l
	} else {
		yyb1026 = r.CheckBreak()
	}
	if yyb1026 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1027 := &x.Limits
		yyv1027.CodecDecodeSelf(d)
	}
	yyj1026++
	if yyhl1026 {
		yyb1026 = yyj1026 > l
	} else {
		yyb1026 = r.CheckBreak()
	}
	if yyb1026 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1028 := &x.Requests
		yyv1028.CodecDecodeSelf(d)
	}
	for {
		yyj1026++
		if yyhl1026 {
			yyb1026 = yyj1026 > l
		} else {
			yyb1026 = r.CheckBreak()
		}
		if yyb1026 {
			break
		}
		z.DecStructFieldNotFound(yyj1026-1, "")
	}
	r.ReadEnd()
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1029 := z.EncBinary()
		_ = yym1029
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1030 := !z.EncBinary()
			yy2arr1030 := z.EncBasicHandle().StructToArray
			var yyq1030 [17]bool
			_, _, _ = yysep1030, yyq1030, yy2arr1030
			const yyr1030 bool = false
			yyq1030[1] = x.Image != ""
			yyq1030[2] = len(x.Command) != 0
			yyq1030[3] = len(x.Args) != 0
			yyq1030[4] = x.WorkingDir != ""
			yyq1030[5] = len(x.Ports) != 0
			yyq1030[6] = len(x.Env) != 0
			yyq1030[7] = true
			yyq1030[8] = len(x.VolumeMounts) != 0
			yyq1030[9] = x.LivenessProbe != nil
			yyq1030[10] = x.ReadinessProbe != nil
			yyq1030[11] = x.Lifecycle != nil
			yyq1030[12] = x.TerminationMessagePath != ""
			yyq1030[13] = x.ImagePullPolicy != ""
			yyq1030[14] = x.SecurityContext != nil
			yyq1030[15] = x.Stdin != false
			yyq1030[16] = x.TTY != false
			if yyr1030 || yy2arr1030 {
				r.EncodeArrayStart(17)
			} else {
				var yynn1030 int = 1
				for _, b := range yyq1030 {
					if b {
						yynn1030++
					}
				}
				r.EncodeMapStart(yynn1030)
			}
			if yyr1030 || yy2arr1030 {
				yym1032 := z.EncBinary()
				_ = yym1032
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1033 := z.EncBinary()
				_ = yym1033
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[1] {
					yym1035 := z.EncBinary()
					_ = yym1035
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1030[1] {
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					yym1036 := z.EncBinary()
					_ = yym1036
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1038 := z.EncBinary()
						_ = yym1038
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[2] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1039 := z.EncBinary()
						_ = yym1039
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1041 := z.EncBinary()
						_ = yym1041
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[3] {
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1042 := z.EncBinary()
						_ = yym1042
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[4] {
					yym1044 := z.EncBinary()
					_ = yym1044
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1030[4] {
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					yym1045 := z.EncBinary()
					_ = yym1045
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1047 := z.EncBinary()
						_ = yym1047
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[5] {
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1048 := z.EncBinary()
						_ = yym1048
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1050 := z.EncBinary()
						_ = yym1050
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[6] {
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1051 := z.EncBinary()
						_ = yym1051
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[7] {
					yy1053 := &x.Resources
					yy1053.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[7] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy1054 := &x.Resources
					yy1054.CodecEncodeSelf(e)
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1056 := z.EncBinary()
						_ = yym1056
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[8] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1057 := z.EncBinary()
						_ = yym1057
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[9] {
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[10] {
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[11] {
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[12] {
					yym1062 := z.EncBinary()
					_ = yym1062
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1030[12] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					yym1063 := z.EncBinary()
					_ = yym1063
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[13] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1030[13] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1030[14] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[15] {
					yym1067 := z.EncBinary()
					_ = yym1067
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1030[15] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym1068 := z.EncBinary()
					_ = yym1068
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1030 || yy2arr1030 {
				if yyq1030[16] {
					yym1070 := z.EncBinary()
					_ = yym1070
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1030[16] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym1071 := z.EncBinary()
					_ = yym1071
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yysep1030 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1072 := z.DecBinary()
	_ = yym1072
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1073 := r.ReadMapStart()
			if yyl1073 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1073, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1073 := r.ReadArrayStart()
			if yyl1073 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1073, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1074Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1074Slc
	var yyhl1074 bool = l >= 0
	for yyj1074 := 0; ; yyj1074++ {
		if yyhl1074 {
			if yyj1074 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1074Slc = r.DecodeBytes(yys1074Slc, true, true)
		yys1074 := string(yys1074Slc)
		switch yys1074 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1077 := &x.Command
				yym1078 := z.DecBinary()
				_ = yym1078
				if false {
				} else {
					z.F.DecSliceStringX(yyv1077, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1079 := &x.Args
				yym1080 := z.DecBinary()
				_ = yym1080
				if false {
				} else {
					z.F.DecSliceStringX(yyv1079, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1082 := &x.Ports
				yym1083 := z.DecBinary()
				_ = yym1083
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1082), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1084 := &x.Env
				yym1085 := z.DecBinary()
				_ = yym1085
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1084), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1086 := &x.Resources
				yyv1086.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1087 := &x.VolumeMounts
				yym1088 := z.DecBinary()
				_ = yym1088
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1087), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1074)
		} // end switch yys1074
	} // end for yyj1074
	if !yyhl1074 {
		r.ReadEnd()
	}
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1097 int
	var yyb1097 bool
	var yyhl1097 bool = l >= 0
	yyj1097++
	if yyhl1097 {
		yyb1097 = yyj1097 > l
	} else {
		yyb1097 = r.CheckBreak()
	}
	if yyb1097 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1097++
	if yyhl1097 {
		yyb1097 = yyj1097 > l
	} else {
		yyb1097 = r.CheckBreak()
	}
	if yyb1097 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1097++
	if yyhl1097 {
		yyb1097 = yyj1097 > l
	} else {
		yyb1097 = r.CheckBreak()
	}
	if yyb1097 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1100 := &x.Command
		yym1101 := z.DecBinary()
		_ = yym1101
		if false {
		} else {
			z.F.DecSliceStringX(yyv1100, false, d)
		}
	}
	yyj1097++
	if yyhl1097 {
		yyb1097 = yyj1097 > l
	} else {
		yyb1097 = r.CheckBreak()
	}
	if yyb1097 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1102 := &x.Args
		yym1103 := z.DecBinary()
		_ = yym1103
		if false {
		} else {
			z.F.DecSliceStringX(yyv1102, false, d)
		}
	}
	yyj1097++
	if yyhl1097 {
		yyb1097 = yyj1097 > l
	} else {
		yyb1097 = r.CheckBreak()
	}
	if yyb1097 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1097++
	if yyhl1097 {
		yyb1097 = yyj1097 > l
	} else {
		yyb1097 = r.CheckBreak()
	}
	if yyb1097 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1105 := &x.Ports
		yym1106 := z.DecBinary()
		_ = yym1106
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1105), d)
		}
	}
	yyj1097++
	if yyhl1097 {
		yyb1097 = yyj1097 > l
	} else {
		yyb1097 = r.CheckBreak()
	}
	if yyb1097 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1107 := &x.Env
		yym1108 := z.DecBinary()
		_ = yym1108
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1107), d)
		}
	}
	yyj1097++
	if yyhl1097 {
		yyb1097 = yyj1097 > l
	} else {
		yyb1097 = r.CheckBreak()
	}
	if yyb1097 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1109 := &x.Resources
		yyv1109.CodecDecodeSelf(d)
	}
	yyj1097++
	if yyhl1097 {
		yyb1097 = yyj1097 > l
	} else {
		yyb1097 = r.CheckBreak()
	}
	if yyb1097 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1110 := &x.VolumeMounts
		yym1111 := z.DecBinary()
		_ = yym1111
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1110), d)
		}
	}
	yyj1097++
	if yyhl1097 {
		yyb1097 = yyj1097 > l
	} else {
		yyb1097 = r.CheckBreak()
	}
	if yyb1097 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1097++
	if yyhl1097 {
		yyb1097 = yyj1097 > l
	} else {
		yyb1097 = r.CheckBreak()
	}
	if yyb1097 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1097++
	if yyhl1097 {
		yyb1097 = yyj1097 > l
	} else {
		yyb1097 = r.CheckBreak()
	}
	if yyb1097 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1097++
	if yyhl1097 {
		yyb1097 = yyj1097 > l
	} else {
		yyb1097 = r.CheckBreak()
	}
	if yyb1097 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1097++
	if yyhl1097 {
		yyb1097 = yyj1097 > l
	} else {
		yyb1097 = r.CheckBreak()
	}
	if yyb1097 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1097++
	if yyhl1097 {
		yyb1097 = yyj1097 > l
	} else {
		yyb1097 = r.CheckBreak()
	}
	if yyb1097 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1097++
	if yyhl1097 {
		yyb1097 = yyj1097 > l
	} else {
		yyb1097 = r.CheckBreak()
	}
	if yyb1097 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1097++
	if yyhl1097 {
		yyb1097 = yyj1097 > l
	} else {
		yyb1097 = r.CheckBreak()
	}
	if yyb1097 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1097++
		if yyhl1097 {
			yyb1097 = yyj1097 > l
		} else {
			yyb1097 = r.CheckBreak()
		}
		if yyb1097 {
			break
		}
		z.DecStructFieldNotFound(yyj1097-1, "")
	}
	r.ReadEnd()
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1120 := z.EncBinary()
		_ = yym1120
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1121 := !z.EncBinary()
			yy2arr1121 := z.EncBasicHandle().StructToArray
			var yyq1121 [3]bool
			_, _, _ = yysep1121, yyq1121, yy2arr1121
			const yyr1121 bool = false
			yyq1121[0] = x.Exec != nil
			yyq1121[1] = x.HTTPGet != nil
			yyq1121[2] = x.TCPSocket != nil
			if yyr1121 || yy2arr1121 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1121 int = 0
				for _, b := range yyq1121 {
					if b {
						yynn1121++
					}
				}
				r.EncodeMapStart(yynn1121)
			}
			if yyr1121 || yy2arr1121 {
				if yyq1121[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1121[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1121 || yy2arr1121 {
				if yyq1121[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1121[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1121 || yy2arr1121 {
				if yyq1121[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1121[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1121 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1125 := z.DecBinary()
	_ = yym1125
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1126 := r.ReadMapStart()
			if yyl1126 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1126, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1126 := r.ReadArrayStart()
			if yyl1126 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1126, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1127Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1127Slc
	var yyhl1127 bool = l >= 0
	for yyj1127 := 0; ; yyj1127++ {
		if yyhl1127 {
			if yyj1127 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1127Slc = r.DecodeBytes(yys1127Slc, true, true)
		yys1127 := string(yys1127Slc)
		switch yys1127 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1127)
		} // end switch yys1127
	} // end for yyj1127
	if !yyhl1127 {
		r.ReadEnd()
	}
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1131 int
	var yyb1131 bool
	var yyhl1131 bool = l >= 0
	yyj1131++
	if yyhl1131 {
		yyb1131 = yyj1131 > l
	} else {
		yyb1131 = r.CheckBreak()
	}
	if yyb1131 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1131++
	if yyhl1131 {
		yyb1131 = yyj1131 > l
	} else {
		yyb1131 = r.CheckBreak()
	}
	if yyb1131 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1131++
	if yyhl1131 {
		yyb1131 = yyj1131 > l
	} else {
		yyb1131 = r.CheckBreak()
	}
	if yyb1131 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1131++
		if yyhl1131 {
			yyb1131 = yyj1131 > l
		} else {
			yyb1131 = r.CheckBreak()
		}
		if yyb1131 {
			break
		}
		z.DecStructFieldNotFound(yyj1131-1, "")
	}
	r.ReadEnd()
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1135 := z.EncBinary()
		_ = yym1135
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1136 := !z.EncBinary()
			yy2arr1136 := z.EncBasicHandle().StructToArray
			var yyq1136 [2]bool
			_, _, _ = yysep1136, yyq1136, yy2arr1136
			const yyr1136 bool = false
			yyq1136[0] = x.PostStart != nil
			yyq1136[1] = x.PreStop != nil
			if yyr1136 || yy2arr1136 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1136 int = 0
				for _, b := range yyq1136 {
					if b {
						yynn1136++
					}
				}
				r.EncodeMapStart(yynn1136)
			}
			if yyr1136 || yy2arr1136 {
				if yyq1136[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1136[0] {
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1136 || yy2arr1136 {
				if yyq1136[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1136[1] {
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1136 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1139 := z.DecBinary()
	_ = yym1139
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1140 := r.ReadMapStart()
			if yyl1140 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1140, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1140 := r.ReadArrayStart()
			if yyl1140 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1140, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1141Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1141Slc
	var yyhl1141 bool = l >= 0
	for yyj1141 := 0; ; yyj1141++ {
		if yyhl1141 {
			if yyj1141 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1141Slc = r.DecodeBytes(yys1141Slc, true, true)
		yys1141 := string(yys1141Slc)
		switch yys1141 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1141)
		} // end switch yys1141
	} // end for yyj1141
	if !yyhl1141 {
		r.ReadEnd()
	}
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1144 int
	var yyb1144 bool
	var yyhl1144 bool = l >= 0
	yyj1144++
	if yyhl1144 {
		yyb1144 = yyj1144 > l
	} else {
		yyb1144 = r.CheckBreak()
	}
	if yyb1144 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1144++
	if yyhl1144 {
		yyb1144 = yyj1144 > l
	} else {
		yyb1144 = r.CheckBreak()
	}
	if yyb1144 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1144++
		if yyhl1144 {
			yyb1144 = yyj1144 > l
		} else {
			yyb1144 = r.CheckBreak()
		}
		if yyb1144 {
			break
		}
		z.DecStructFieldNotFound(yyj1144-1, "")
	}
	r.ReadEnd()
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1147 := z.EncBinary()
	_ = yym1147
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1148 := z.DecBinary()
	_ = yym1148
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1149 := z.EncBinary()
		_ = yym1149
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1150 := !z.EncBinary()
			yy2arr1150 := z.EncBasicHandle().StructToArray
			var yyq1150 [2]bool
			_, _, _ = yysep1150, yyq1150, yy2arr1150
			const yyr1150 bool = false
			yyq1150[0] = x.Reason != ""
			yyq1150[1] = x.Message != ""
			if yyr1150 || yy2arr1150 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1150 int = 0
				for _, b := range yyq1150 {
					if b {
						yynn1150++
					}
				}
				r.EncodeMapStart(yynn1150)
			}
			if yyr1150 || yy2arr1150 {
				if yyq1150[0] {
					yym1152 := z.EncBinary()
					_ = yym1152
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1150[0] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1153 := z.EncBinary()
					_ = yym1153
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1150 || yy2arr1150 {
				if yyq1150[1] {
					yym1155 := z.EncBinary()
					_ = yym1155
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1150[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1156 := z.EncBinary()
					_ = yym1156
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1150 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1157 := z.DecBinary()
	_ = yym1157
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1158 := r.ReadMapStart()
			if yyl1158 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1158, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1158 := r.ReadArrayStart()
			if yyl1158 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1158, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1159Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1159Slc
	var yyhl1159 bool = l >= 0
	for yyj1159 := 0; ; yyj1159++ {
		if yyhl1159 {
			if yyj1159 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1159Slc = r.DecodeBytes(yys1159Slc, true, true)
		yys1159 := string(yys1159Slc)
		switch yys1159 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1159)
		} // end switch yys1159
	} // end for yyj1159
	if !yyhl1159 {
		r.ReadEnd()
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1162 int
	var yyb1162 bool
	var yyhl1162 bool = l >= 0
	yyj1162++
	if yyhl1162 {
		yyb1162 = yyj1162 > l
	} else {
		yyb1162 = r.CheckBreak()
	}
	if yyb1162 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1162++
	if yyhl1162 {
		yyb1162 = yyj1162 > l
	} else {
		yyb1162 = r.CheckBreak()
	}
	if yyb1162 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1162++
		if yyhl1162 {
			yyb1162 = yyj1162 > l
		} else {
			yyb1162 = r.CheckBreak()
		}
		if yyb1162 {
			break
		}
		z.DecStructFieldNotFound(yyj1162-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1165 := z.EncBinary()
		_ = yym1165
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1166 := !z.EncBinary()
			yy2arr1166 := z.EncBasicHandle().StructToArray
			var yyq1166 [1]bool
			_, _, _ = yysep1166, yyq1166, yy2arr1166
			const yyr1166 bool = false
			yyq1166[0] = true
			if yyr1166 || yy2arr1166 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1166 int = 0
				for _, b := range yyq1166 {
					if b {
						yynn1166++
					}
				}
				r.EncodeMapStart(yynn1166)
			}
			if yyr1166 || yy2arr1166 {
				if yyq1166[0] {
					yy1168 := &x.StartedAt
					yym1169 := z.EncBinary()
					_ = yym1169
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1168) {
					} else if yym1169 {
						z.EncBinaryMarshal(yy1168)
					} else if !yym1169 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1168)
					} else {
						z.EncFallback(yy1168)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1166[0] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1170 := &x.StartedAt
					yym1171 := z.EncBinary()
					_ = yym1171
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1170) {
					} else if yym1171 {
						z.EncBinaryMarshal(yy1170)
					} else if !yym1171 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1170)
					} else {
						z.EncFallback(yy1170)
					}
				}
			}
			if yysep1166 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1172 := z.DecBinary()
	_ = yym1172
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1173 := r.ReadMapStart()
			if yyl1173 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1173, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1173 := r.ReadArrayStart()
			if yyl1173 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1173, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1174Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1174Slc
	var yyhl1174 bool = l >= 0
	for yyj1174 := 0; ; yyj1174++ {
		if yyhl1174 {
			if yyj1174 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1174Slc = r.DecodeBytes(yys1174Slc, true, true)
		yys1174 := string(yys1174Slc)
		switch yys1174 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1175 := &x.StartedAt
				yym1176 := z.DecBinary()
				_ = yym1176
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1175) {
				} else if yym1176 {
					z.DecBinaryUnmarshal(yyv1175)
				} else if !yym1176 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1175)
				} else {
					z.DecFallback(yyv1175, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1174)
		} // end switch yys1174
	} // end for yyj1174
	if !yyhl1174 {
		r.ReadEnd()
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1177 int
	var yyb1177 bool
	var yyhl1177 bool = l >= 0
	yyj1177++
	if yyhl1177 {
		yyb1177 = yyj1177 > l
	} else {
		yyb1177 = r.CheckBreak()
	}
	if yyb1177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1178 := &x.StartedAt
		yym1179 := z.DecBinary()
		_ = yym1179
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1178) {
		} else if yym1179 {
			z.DecBinaryUnmarshal(yyv1178)
		} else if !yym1179 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1178)
		} else {
			z.DecFallback(yyv1178, false)
		}
	}
	for {
		yyj1177++
		if yyhl1177 {
			yyb1177 = yyj1177 > l
		} else {
			yyb1177 = r.CheckBreak()
		}
		if yyb1177 {
			break
		}
		z.DecStructFieldNotFound(yyj1177-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1180 := z.EncBinary()
		_ = yym1180
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1181 := !z.EncBinary()
			yy2arr1181 := z.EncBasicHandle().StructToArray
			var yyq1181 [7]bool
			_, _, _ = yysep1181, yyq1181, yy2arr1181
			const yyr1181 bool = false
			yyq1181[1] = x.Signal != 0
			yyq1181[2] = x.Reason != ""
			yyq1181[3] = x.Message != ""
			yyq1181[4] = true
			yyq1181[5] = true
			yyq1181[6] = x.ContainerID != ""
			if yyr1181 || yy2arr1181 {
				r.EncodeArrayStart(7)
			} else {
				var yynn1181 int = 1
				for _, b := range yyq1181 {
					if b {
						yynn1181++
					}
				}
				r.EncodeMapStart(yynn1181)
			}
			if yyr1181 || yy2arr1181 {
				yym1183 := z.EncBinary()
				_ = yym1183
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				yym1184 := z.EncBinary()
				_ = yym1184
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1181 || yy2arr1181 {
				if yyq1181[1] {
					yym1186 := z.EncBinary()
					_ = yym1186
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1181[1] {
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					yym1187 := z.EncBinary()
					_ = yym1187
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1181 || yy2arr1181 {
				if yyq1181[2] {
					yym1189 := z.EncBinary()
					_ = yym1189
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1181[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1190 := z.EncBinary()
					_ = yym1190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1181 || yy2arr1181 {
				if yyq1181[3] {
					yym1192 := z.EncBinary()
					_ = yym1192
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1181[3] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1193 := z.EncBinary()
					_ = yym1193
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1181 || yy2arr1181 {
				if yyq1181[4] {
					yy1195 := &x.StartedAt
					yym1196 := z.EncBinary()
					_ = yym1196
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1195) {
					} else if yym1196 {
						z.EncBinaryMarshal(yy1195)
					} else if !yym1196 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1195)
					} else {
						z.EncFallback(yy1195)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1181[4] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1197 := &x.StartedAt
					yym1198 := z.EncBinary()
					_ = yym1198
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1197) {
					} else if yym1198 {
						z.EncBinaryMarshal(yy1197)
					} else if !yym1198 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1197)
					} else {
						z.EncFallback(yy1197)
					}
				}
			}
			if yyr1181 || yy2arr1181 {
				if yyq1181[5] {
					yy1200 := &x.FinishedAt
					yym1201 := z.EncBinary()
					_ = yym1201
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1200) {
					} else if yym1201 {
						z.EncBinaryMarshal(yy1200)
					} else if !yym1201 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1200)
					} else {
						z.EncFallback(yy1200)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1181[5] {
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					yy1202 := &x.FinishedAt
					yym1203 := z.EncBinary()
					_ = yym1203
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1202) {
					} else if yym1203 {
						z.EncBinaryMarshal(yy1202)
					} else if !yym1203 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1202)
					} else {
						z.EncFallback(yy1202)
					}
				}
			}
			if yyr1181 || yy2arr1181 {
				if yyq1181[6] {
					yym1205 := z.EncBinary()
					_ = yym1205
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1181[6] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1206 := z.EncBinary()
					_ = yym1206
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1181 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1207 := z.DecBinary()
	_ = yym1207
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1208 := r.ReadMapStart()
			if yyl1208 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1208, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1208 := r.ReadArrayStart()
			if yyl1208 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1208, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1209Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1209Slc
	var yyhl1209 bool = l >= 0
	for yyj1209 := 0; ; yyj1209++ {
		if yyhl1209 {
			if yyj1209 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1209Slc = r.DecodeBytes(yys1209Slc, true, true)
		yys1209 := string(yys1209Slc)
		switch yys1209 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1214 := &x.StartedAt
				yym1215 := z.DecBinary()
				_ = yym1215
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1214) {
				} else if yym1215 {
					z.DecBinaryUnmarshal(yyv1214)
				} else if !yym1215 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1214)
				} else {
					z.DecFallback(yyv1214, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1216 := &x.FinishedAt
				yym1217 := z.DecBinary()
				_ = yym1217
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1216) {
				} else if yym1217 {
					z.DecBinaryUnmarshal(yyv1216)
				} else if !yym1217 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1216)
				} else {
					z.DecFallback(yyv1216, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1209)
		} // end switch yys1209
	} // end for yyj1209
	if !yyhl1209 {
		r.ReadEnd()
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1219 int
	var yyb1219 bool
	var yyhl1219 bool = l >= 0
	yyj1219++
	if yyhl1219 {
		yyb1219 = yyj1219 > l
	} else {
		yyb1219 = r.CheckBreak()
	}
	if yyb1219 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1219++
	if yyhl1219 {
		yyb1219 = yyj1219 > l
	} else {
		yyb1219 = r.CheckBreak()
	}
	if yyb1219 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1219++
	if yyhl1219 {
		yyb1219 = yyj1219 > l
	} else {
		yyb1219 = r.CheckBreak()
	}
	if yyb1219 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1219++
	if yyhl1219 {
		yyb1219 = yyj1219 > l
	} else {
		yyb1219 = r.CheckBreak()
	}
	if yyb1219 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1219++
	if yyhl1219 {
		yyb1219 = yyj1219 > l
	} else {
		yyb1219 = r.CheckBreak()
	}
	if yyb1219 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1224 := &x.StartedAt
		yym1225 := z.DecBinary()
		_ = yym1225
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1224) {
		} else if yym1225 {
			z.DecBinaryUnmarshal(yyv1224)
		} else if !yym1225 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1224)
		} else {
			z.DecFallback(yyv1224, false)
		}
	}
	yyj1219++
	if yyhl1219 {
		yyb1219 = yyj1219 > l
	} else {
		yyb1219 = r.CheckBreak()
	}
	if yyb1219 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1226 := &x.FinishedAt
		yym1227 := z.DecBinary()
		_ = yym1227
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1226) {
		} else if yym1227 {
			z.DecBinaryUnmarshal(yyv1226)
		} else if !yym1227 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1226)
		} else {
			z.DecFallback(yyv1226, false)
		}
	}
	yyj1219++
	if yyhl1219 {
		yyb1219 = yyj1219 > l
	} else {
		yyb1219 = r.CheckBreak()
	}
	if yyb1219 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1219++
		if yyhl1219 {
			yyb1219 = yyj1219 > l
		} else {
			yyb1219 = r.CheckBreak()
		}
		if yyb1219 {
			break
		}
		z.DecStructFieldNotFound(yyj1219-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1229 := z.EncBinary()
		_ = yym1229
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1230 := !z.EncBinary()
			yy2arr1230 := z.EncBasicHandle().StructToArray
			var yyq1230 [3]bool
			_, _, _ = yysep1230, yyq1230, yy2arr1230
			const yyr1230 bool = false
			yyq1230[0] = x.Waiting != nil
			yyq1230[1] = x.Running != nil
			yyq1230[2] = x.Terminated != nil
			if yyr1230 || yy2arr1230 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1230 int = 0
				for _, b := range yyq1230 {
					if b {
						yynn1230++
					}
				}
				r.EncodeMapStart(yynn1230)
			}
			if yyr1230 || yy2arr1230 {
				if yyq1230[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1230[0] {
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1230 || yy2arr1230 {
				if yyq1230[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1230[1] {
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1230 || yy2arr1230 {
				if yyq1230[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1230[2] {
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1230 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1234 := z.DecBinary()
	_ = yym1234
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1235 := r.ReadMapStart()
			if yyl1235 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1235, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1235 := r.ReadArrayStart()
			if yyl1235 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1235, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1236Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1236Slc
	var yyhl1236 bool = l >= 0
	for yyj1236 := 0; ; yyj1236++ {
		if yyhl1236 {
			if yyj1236 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1236Slc = r.DecodeBytes(yys1236Slc, true, true)
		yys1236 := string(yys1236Slc)
		switch yys1236 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1236)
		} // end switch yys1236
	} // end for yyj1236
	if !yyhl1236 {
		r.ReadEnd()
	}
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1240 int
	var yyb1240 bool
	var yyhl1240 bool = l >= 0
	yyj1240++
	if yyhl1240 {
		yyb1240 = yyj1240 > l
	} else {
		yyb1240 = r.CheckBreak()
	}
	if yyb1240 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1240++
	if yyhl1240 {
		yyb1240 = yyj1240 > l
	} else {
		yyb1240 = r.CheckBreak()
	}
	if yyb1240 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1240++
	if yyhl1240 {
		yyb1240 = yyj1240 > l
	} else {
		yyb1240 = r.CheckBreak()
	}
	if yyb1240 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1240++
		if yyhl1240 {
			yyb1240 = yyj1240 > l
		} else {
			yyb1240 = r.CheckBreak()
		}
		if yyb1240 {
			break
		}
		z.DecStructFieldNotFound(yyj1240-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1244 := z.EncBinary()
		_ = yym1244
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1245 := !z.EncBinary()
			yy2arr1245 := z.EncBasicHandle().StructToArray
			var yyq1245 [8]bool
			_, _, _ = yysep1245, yyq1245, yy2arr1245
			const yyr1245 bool = false
			yyq1245[1] = true
			yyq1245[2] = true
			yyq1245[7] = x.ContainerID != ""
			if yyr1245 || yy2arr1245 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1245 int = 5
				for _, b := range yyq1245 {
					if b {
						yynn1245++
					}
				}
				r.EncodeMapStart(yynn1245)
			}
			if yyr1245 || yy2arr1245 {
				yym1247 := z.EncBinary()
				_ = yym1247
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1248 := z.EncBinary()
				_ = yym1248
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1245 || yy2arr1245 {
				if yyq1245[1] {
					yy1250 := &x.State
					yy1250.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1245[1] {
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					yy1251 := &x.State
					yy1251.CodecEncodeSelf(e)
				}
			}
			if yyr1245 || yy2arr1245 {
				if yyq1245[2] {
					yy1253 := &x.LastTerminationState
					yy1253.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1245[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					yy1254 := &x.LastTerminationState
					yy1254.CodecEncodeSelf(e)
				}
			}
			if yyr1245 || yy2arr1245 {
				yym1256 := z.EncBinary()
				_ = yym1256
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				yym1257 := z.EncBinary()
				_ = yym1257
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1245 || yy2arr1245 {
				yym1259 := z.EncBinary()
				_ = yym1259
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				yym1260 := z.EncBinary()
				_ = yym1260
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1245 || yy2arr1245 {
				yym1262 := z.EncBinary()
				_ = yym1262
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym1263 := z.EncBinary()
				_ = yym1263
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1245 || yy2arr1245 {
				yym1265 := z.EncBinary()
				_ = yym1265
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				yym1266 := z.EncBinary()
				_ = yym1266
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1245 || yy2arr1245 {
				if yyq1245[7] {
					yym1268 := z.EncBinary()
					_ = yym1268
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1245[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1269 := z.EncBinary()
					_ = yym1269
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1245 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1270 := z.DecBinary()
	_ = yym1270
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1271 := r.ReadMapStart()
			if yyl1271 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1271, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1271 := r.ReadArrayStart()
			if yyl1271 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1271, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1272Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1272Slc
	var yyhl1272 bool = l >= 0
	for yyj1272 := 0; ; yyj1272++ {
		if yyhl1272 {
			if yyj1272 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1272Slc = r.DecodeBytes(yys1272Slc, true, true)
		yys1272 := string(yys1272Slc)
		switch yys1272 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1274 := &x.State
				yyv1274.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1275 := &x.LastTerminationState
				yyv1275.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1272)
		} // end switch yys1272
	} // end for yyj1272
	if !yyhl1272 {
		r.ReadEnd()
	}
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1281 int
	var yyb1281 bool
	var yyhl1281 bool = l >= 0
	yyj1281++
	if yyhl1281 {
		yyb1281 = yyj1281 > l
	} else {
		yyb1281 = r.CheckBreak()
	}
	if yyb1281 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1281++
	if yyhl1281 {
		yyb1281 = yyj1281 > l
	} else {
		yyb1281 = r.CheckBreak()
	}
	if yyb1281 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1283 := &x.State
		yyv1283.CodecDecodeSelf(d)
	}
	yyj1281++
	if yyhl1281 {
		yyb1281 = yyj1281 > l
	} else {
		yyb1281 = r.CheckBreak()
	}
	if yyb1281 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1284 := &x.LastTerminationState
		yyv1284.CodecDecodeSelf(d)
	}
	yyj1281++
	if yyhl1281 {
		yyb1281 = yyj1281 > l
	} else {
		yyb1281 = r.CheckBreak()
	}
	if yyb1281 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1281++
	if yyhl1281 {
		yyb1281 = yyj1281 > l
	} else {
		yyb1281 = r.CheckBreak()
	}
	if yyb1281 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1281++
	if yyhl1281 {
		yyb1281 = yyj1281 > l
	} else {
		yyb1281 = r.CheckBreak()
	}
	if yyb1281 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1281++
	if yyhl1281 {
		yyb1281 = yyj1281 > l
	} else {
		yyb1281 = r.CheckBreak()
	}
	if yyb1281 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1281++
	if yyhl1281 {
		yyb1281 = yyj1281 > l
	} else {
		yyb1281 = r.CheckBreak()
	}
	if yyb1281 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1281++
		if yyhl1281 {
			yyb1281 = yyj1281 > l
		} else {
			yyb1281 = r.CheckBreak()
		}
		if yyb1281 {
			break
		}
		z.DecStructFieldNotFound(yyj1281-1, "")
	}
	r.ReadEnd()
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1290 := z.EncBinary()
	_ = yym1290
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1291 := z.DecBinary()
	_ = yym1291
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1292 := z.EncBinary()
	_ = yym1292
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1293 := z.DecBinary()
	_ = yym1293
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1294 := z.EncBinary()
		_ = yym1294
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1295 := !z.EncBinary()
			yy2arr1295 := z.EncBasicHandle().StructToArray
			var yyq1295 [6]bool
			_, _, _ = yysep1295, yyq1295, yy2arr1295
			const yyr1295 bool = false
			yyq1295[2] = true
			yyq1295[3] = true
			yyq1295[4] = x.Reason != ""
			yyq1295[5] = x.Message != ""
			if yyr1295 || yy2arr1295 {
				r.EncodeArrayStart(6)
			} else {
				var yynn1295 int = 2
				for _, b := range yyq1295 {
					if b {
						yynn1295++
					}
				}
				r.EncodeMapStart(yynn1295)
			}
			if yyr1295 || yy2arr1295 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1295 || yy2arr1295 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1295 || yy2arr1295 {
				if yyq1295[2] {
					yy1299 := &x.LastProbeTime
					yym1300 := z.EncBinary()
					_ = yym1300
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1299) {
					} else if yym1300 {
						z.EncBinaryMarshal(yy1299)
					} else if !yym1300 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1299)
					} else {
						z.EncFallback(yy1299)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1295[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					yy1301 := &x.LastProbeTime
					yym1302 := z.EncBinary()
					_ = yym1302
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1301) {
					} else if yym1302 {
						z.EncBinaryMarshal(yy1301)
					} else if !yym1302 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1301)
					} else {
						z.EncFallback(yy1301)
					}
				}
			}
			if yyr1295 || yy2arr1295 {
				if yyq1295[3] {
					yy1304 := &x.LastTransitionTime
					yym1305 := z.EncBinary()
					_ = yym1305
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1304) {
					} else if yym1305 {
						z.EncBinaryMarshal(yy1304)
					} else if !yym1305 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1304)
					} else {
						z.EncFallback(yy1304)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1295[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy1306 := &x.LastTransitionTime
					yym1307 := z.EncBinary()
					_ = yym1307
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1306) {
					} else if yym1307 {
						z.EncBinaryMarshal(yy1306)
					} else if !yym1307 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1306)
					} else {
						z.EncFallback(yy1306)
					}
				}
			}
			if yyr1295 || yy2arr1295 {
				if yyq1295[4] {
					yym1309 := z.EncBinary()
					_ = yym1309
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1295[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1310 := z.EncBinary()
					_ = yym1310
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1295 || yy2arr1295 {
				if yyq1295[5] {
					yym1312 := z.EncBinary()
					_ = yym1312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1295[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1313 := z.EncBinary()
					_ = yym1313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1295 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1314 := z.DecBinary()
	_ = yym1314
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1315 := r.ReadMapStart()
			if yyl1315 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1315, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1315 := r.ReadArrayStart()
			if yyl1315 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1315, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1316Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1316Slc
	var yyhl1316 bool = l >= 0
	for yyj1316 := 0; ; yyj1316++ {
		if yyhl1316 {
			if yyj1316 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1316Slc = r.DecodeBytes(yys1316Slc, true, true)
		yys1316 := string(yys1316Slc)
		switch yys1316 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1319 := &x.LastProbeTime
				yym1320 := z.DecBinary()
				_ = yym1320
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1319) {
				} else if yym1320 {
					z.DecBinaryUnmarshal(yyv1319)
				} else if !yym1320 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1319)
				} else {
					z.DecFallback(yyv1319, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1321 := &x.LastTransitionTime
				yym1322 := z.DecBinary()
				_ = yym1322
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1321) {
				} else if yym1322 {
					z.DecBinaryUnmarshal(yyv1321)
				} else if !yym1322 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1321)
				} else {
					z.DecFallback(yyv1321, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1316)
		} // end switch yys1316
	} // end for yyj1316
	if !yyhl1316 {
		r.ReadEnd()
	}
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1325 int
	var yyb1325 bool
	var yyhl1325 bool = l >= 0
	yyj1325++
	if yyhl1325 {
		yyb1325 = yyj1325 > l
	} else {
		yyb1325 = r.CheckBreak()
	}
	if yyb1325 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1325++
	if yyhl1325 {
		yyb1325 = yyj1325 > l
	} else {
		yyb1325 = r.CheckBreak()
	}
	if yyb1325 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1325++
	if yyhl1325 {
		yyb1325 = yyj1325 > l
	} else {
		yyb1325 = r.CheckBreak()
	}
	if yyb1325 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1328 := &x.LastProbeTime
		yym1329 := z.DecBinary()
		_ = yym1329
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1328) {
		} else if yym1329 {
			z.DecBinaryUnmarshal(yyv1328)
		} else if !yym1329 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1328)
		} else {
			z.DecFallback(yyv1328, false)
		}
	}
	yyj1325++
	if yyhl1325 {
		yyb1325 = yyj1325 > l
	} else {
		yyb1325 = r.CheckBreak()
	}
	if yyb1325 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1330 := &x.LastTransitionTime
		yym1331 := z.DecBinary()
		_ = yym1331
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1330) {
		} else if yym1331 {
			z.DecBinaryUnmarshal(yyv1330)
		} else if !yym1331 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1330)
		} else {
			z.DecFallback(yyv1330, false)
		}
	}
	yyj1325++
	if yyhl1325 {
		yyb1325 = yyj1325 > l
	} else {
		yyb1325 = r.CheckBreak()
	}
	if yyb1325 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1325++
	if yyhl1325 {
		yyb1325 = yyj1325 > l
	} else {
		yyb1325 = r.CheckBreak()
	}
	if yyb1325 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1325++
		if yyhl1325 {
			yyb1325 = yyj1325 > l
		} else {
			yyb1325 = r.CheckBreak()
		}
		if yyb1325 {
			break
		}
		z.DecStructFieldNotFound(yyj1325-1, "")
	}
	r.ReadEnd()
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1334 := z.EncBinary()
	_ = yym1334
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1335 := z.DecBinary()
	_ = yym1335
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1336 := z.EncBinary()
	_ = yym1336
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1337 := z.DecBinary()
	_ = yym1337
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1338 := z.EncBinary()
		_ = yym1338
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1339 := !z.EncBinary()
			yy2arr1339 := z.EncBasicHandle().StructToArray
			var yyq1339 [15]bool
			_, _, _ = yysep1339, yyq1339, yy2arr1339
			const yyr1339 bool = false
			yyq1339[0] = len(x.Volumes) != 0
			yyq1339[2] = x.RestartPolicy != ""
			yyq1339[3] = x.TerminationGracePeriodSeconds != nil
			yyq1339[4] = x.ActiveDeadlineSeconds != nil
			yyq1339[5] = x.DNSPolicy != ""
			yyq1339[6] = len(x.NodeSelector) != 0
			yyq1339[7] = x.ServiceAccountName != ""
			yyq1339[8] = x.DeprecatedServiceAccount != ""
			yyq1339[9] = x.NodeName != ""
			yyq1339[10] = x.HostNetwork != false
			yyq1339[11] = x.HostPID != false
			yyq1339[12] = x.HostIPC != false
			yyq1339[13] = x.SecurityContext != nil
			yyq1339[14] = len(x.ImagePullSecrets) != 0
			if yyr1339 || yy2arr1339 {
				r.EncodeArrayStart(15)
			} else {
				var yynn1339 int = 1
				for _, b := range yyq1339 {
					if b {
						yynn1339++
					}
				}
				r.EncodeMapStart(yynn1339)
			}
			if yyr1339 || yy2arr1339 {
				if yyq1339[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1341 := z.EncBinary()
						_ = yym1341
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1339[0] {
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1342 := z.EncBinary()
						_ = yym1342
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr1339 || yy2arr1339 {
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1344 := z.EncBinary()
					_ = yym1344
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1345 := z.EncBinary()
					_ = yym1345
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1339 || yy2arr1339 {
				if yyq1339[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1339[2] {
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1339 || yy2arr1339 {
				if yyq1339[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1348 := *x.TerminationGracePeriodSeconds
						yym1349 := z.EncBinary()
						_ = yym1349
						if false {
						} else {
							r.EncodeInt(int64(yy1348))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1339[3] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1350 := *x.TerminationGracePeriodSeconds
						yym1351 := z.EncBinary()
						_ = yym1351
						if false {
						} else {
							r.EncodeInt(int64(yy1350))
						}
					}
				}
			}
			if yyr1339 || yy2arr1339 {
				if yyq1339[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1353 := *x.ActiveDeadlineSeconds
						yym1354 := z.EncBinary()
						_ = yym1354
						if false {
						} else {
							r.EncodeInt(int64(yy1353))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1339[4] {
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1355 := *x.ActiveDeadlineSeconds
						yym1356 := z.EncBinary()
						_ = yym1356
						if false {
						} else {
							r.EncodeInt(int64(yy1355))
						}
					}
				}
			}
			if yyr1339 || yy2arr1339 {
				if yyq1339[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1339[5] {
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1339 || yy2arr1339 {
				if yyq1339[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1359 := z.EncBinary()
						_ = yym1359
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1339[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1360 := z.EncBinary()
						_ = yym1360
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1339 || yy2arr1339 {
				if yyq1339[7] {
					yym1362 := z.EncBinary()
					_ = yym1362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1339[7] {
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					yym1363 := z.EncBinary()
					_ = yym1363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr1339 || yy2arr1339 {
				if yyq1339[8] {
					yym1365 := z.EncBinary()
					_ = yym1365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1339[8] {
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					yym1366 := z.EncBinary()
					_ = yym1366
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr1339 || yy2arr1339 {
				if yyq1339[9] {
					yym1368 := z.EncBinary()
					_ = yym1368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1339[9] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					yym1369 := z.EncBinary()
					_ = yym1369
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1339 || yy2arr1339 {
				if yyq1339[10] {
					yym1371 := z.EncBinary()
					_ = yym1371
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1339[10] {
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					yym1372 := z.EncBinary()
					_ = yym1372
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1339 || yy2arr1339 {
				if yyq1339[11] {
					yym1374 := z.EncBinary()
					_ = yym1374
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1339[11] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					yym1375 := z.EncBinary()
					_ = yym1375
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1339 || yy2arr1339 {
				if yyq1339[12] {
					yym1377 := z.EncBinary()
					_ = yym1377
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1339[12] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					yym1378 := z.EncBinary()
					_ = yym1378
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1339 || yy2arr1339 {
				if yyq1339[13] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1339[13] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1339 || yy2arr1339 {
				if yyq1339[14] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1381 := z.EncBinary()
						_ = yym1381
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1339[14] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1382 := z.EncBinary()
						_ = yym1382
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep1339 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1383 := z.DecBinary()
	_ = yym1383
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1384 := r.ReadMapStart()
			if yyl1384 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1384, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1384 := r.ReadArrayStart()
			if yyl1384 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1384, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1385Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1385Slc
	var yyhl1385 bool = l >= 0
	for yyj1385 := 0; ; yyj1385++ {
		if yyhl1385 {
			if yyj1385 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1385Slc = r.DecodeBytes(yys1385Slc, true, true)
		yys1385 := string(yys1385Slc)
		switch yys1385 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1386 := &x.Volumes
				yym1387 := z.DecBinary()
				_ = yym1387
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1386), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1388 := &x.Containers
				yym1389 := z.DecBinary()
				_ = yym1389
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1388), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1392 := z.DecBinary()
				_ = yym1392
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1394 := z.DecBinary()
				_ = yym1394
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1396 := &x.NodeSelector
				yym1397 := z.DecBinary()
				_ = yym1397
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1396, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1405 := &x.ImagePullSecrets
				yym1406 := z.DecBinary()
				_ = yym1406
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1405), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1385)
		} // end switch yys1385
	} // end for yyj1385
	if !yyhl1385 {
		r.ReadEnd()
	}
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1407 int
	var yyb1407 bool
	var yyhl1407 bool = l >= 0
	yyj1407++
	if yyhl1407 {
		yyb1407 = yyj1407 > l
	} else {
		yyb1407 = r.CheckBreak()
	}
	if yyb1407 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1408 := &x.Volumes
		yym1409 := z.DecBinary()
		_ = yym1409
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1408), d)
		}
	}
	yyj1407++
	if yyhl1407 {
		yyb1407 = yyj1407 > l
	} else {
		yyb1407 = r.CheckBreak()
	}
	if yyb1407 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1410 := &x.Containers
		yym1411 := z.DecBinary()
		_ = yym1411
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1410), d)
		}
	}
	yyj1407++
	if yyhl1407 {
		yyb1407 = yyj1407 > l
	} else {
		yyb1407 = r.CheckBreak()
	}
	if yyb1407 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1407++
	if yyhl1407 {
		yyb1407 = yyj1407 > l
	} else {
		yyb1407 = r.CheckBreak()
	}
	if yyb1407 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1414 := z.DecBinary()
		_ = yym1414
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1407++
	if yyhl1407 {
		yyb1407 = yyj1407 > l
	} else {
		yyb1407 = r.CheckBreak()
	}
	if yyb1407 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1416 := z.DecBinary()
		_ = yym1416
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1407++
	if yyhl1407 {
		yyb1407 = yyj1407 > l
	} else {
		yyb1407 = r.CheckBreak()
	}
	if yyb1407 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1407++
	if yyhl1407 {
		yyb1407 = yyj1407 > l
	} else {
		yyb1407 = r.CheckBreak()
	}
	if yyb1407 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1418 := &x.NodeSelector
		yym1419 := z.DecBinary()
		_ = yym1419
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1418, false, d)
		}
	}
	yyj1407++
	if yyhl1407 {
		yyb1407 = yyj1407 > l
	} else {
		yyb1407 = r.CheckBreak()
	}
	if yyb1407 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1407++
	if yyhl1407 {
		yyb1407 = yyj1407 > l
	} else {
		yyb1407 = r.CheckBreak()
	}
	if yyb1407 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj1407++
	if yyhl1407 {
		yyb1407 = yyj1407 > l
	} else {
		yyb1407 = r.CheckBreak()
	}
	if yyb1407 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1407++
	if yyhl1407 {
		yyb1407 = yyj1407 > l
	} else {
		yyb1407 = r.CheckBreak()
	}
	if yyb1407 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1407++
	if yyhl1407 {
		yyb1407 = yyj1407 > l
	} else {
		yyb1407 = r.CheckBreak()
	}
	if yyb1407 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1407++
	if yyhl1407 {
		yyb1407 = yyj1407 > l
	} else {
		yyb1407 = r.CheckBreak()
	}
	if yyb1407 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1407++
	if yyhl1407 {
		yyb1407 = yyj1407 > l
	} else {
		yyb1407 = r.CheckBreak()
	}
	if yyb1407 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1407++
	if yyhl1407 {
		yyb1407 = yyj1407 > l
	} else {
		yyb1407 = r.CheckBreak()
	}
	if yyb1407 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1427 := &x.ImagePullSecrets
		yym1428 := z.DecBinary()
		_ = yym1428
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1427), d)
		}
	}
	for {
		yyj1407++
		if yyhl1407 {
			yyb1407 = yyj1407 > l
		} else {
			yyb1407 = r.CheckBreak()
		}
		if yyb1407 {
			break
		}
		z.DecStructFieldNotFound(yyj1407-1, "")
	}
	r.ReadEnd()
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1429 := z.EncBinary()
		_ = yym1429
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1430 := !z.EncBinary()
			yy2arr1430 := z.EncBasicHandle().StructToArray
			var yyq1430 [0]bool
			_, _, _ = yysep1430, yyq1430, yy2arr1430
			const yyr1430 bool = false
			if yyr1430 || yy2arr1430 {
				r.EncodeArrayStart(0)
			} else {
				var yynn1430 int = 0
				for _, b := range yyq1430 {
					if b {
						yynn1430++
					}
				}
				r.EncodeMapStart(yynn1430)
			}
			if yysep1430 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1431 := z.DecBinary()
	_ = yym1431
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1432 := r.ReadMapStart()
			if yyl1432 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1432, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1432 := r.ReadArrayStart()
			if yyl1432 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1432, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1433Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1433Slc
	var yyhl1433 bool = l >= 0
	for yyj1433 := 0; ; yyj1433++ {
		if yyhl1433 {
			if yyj1433 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1433Slc = r.DecodeBytes(yys1433Slc, true, true)
		yys1433 := string(yys1433Slc)
		switch yys1433 {
		default:
			z.DecStructFieldNotFound(-1, yys1433)
		} // end switch yys1433
	} // end for yyj1433
	if !yyhl1433 {
		r.ReadEnd()
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1434 int
	var yyb1434 bool
	var yyhl1434 bool = l >= 0
	for {
		yyj1434++
		if yyhl1434 {
			yyb1434 = yyj1434 > l
		} else {
			yyb1434 = r.CheckBreak()
		}
		if yyb1434 {
			break
		}
		z.DecStructFieldNotFound(yyj1434-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1435 := z.EncBinary()
		_ = yym1435
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1436 := !z.EncBinary()
			yy2arr1436 := z.EncBasicHandle().StructToArray
			var yyq1436 [8]bool
			_, _, _ = yysep1436, yyq1436, yy2arr1436
			const yyr1436 bool = false
			yyq1436[0] = x.Phase != ""
			yyq1436[1] = len(x.Conditions) != 0
			yyq1436[2] = x.Message != ""
			yyq1436[3] = x.Reason != ""
			yyq1436[4] = x.HostIP != ""
			yyq1436[5] = x.PodIP != ""
			yyq1436[6] = x.StartTime != nil
			yyq1436[7] = len(x.ContainerStatuses) != 0
			if yyr1436 || yy2arr1436 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1436 int = 0
				for _, b := range yyq1436 {
					if b {
						yynn1436++
					}
				}
				r.EncodeMapStart(yynn1436)
			}
			if yyr1436 || yy2arr1436 {
				if yyq1436[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1436[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1436 || yy2arr1436 {
				if yyq1436[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1439 := z.EncBinary()
						_ = yym1439
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1436[1] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1440 := z.EncBinary()
						_ = yym1440
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1436 || yy2arr1436 {
				if yyq1436[2] {
					yym1442 := z.EncBinary()
					_ = yym1442
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1436[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1443 := z.EncBinary()
					_ = yym1443
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1436 || yy2arr1436 {
				if yyq1436[3] {
					yym1445 := z.EncBinary()
					_ = yym1445
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1436[3] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1446 := z.EncBinary()
					_ = yym1446
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1436 || yy2arr1436 {
				if yyq1436[4] {
					yym1448 := z.EncBinary()
					_ = yym1448
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1436[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym1449 := z.EncBinary()
					_ = yym1449
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1436 || yy2arr1436 {
				if yyq1436[5] {
					yym1451 := z.EncBinary()
					_ = yym1451
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1436[5] {
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					yym1452 := z.EncBinary()
					_ = yym1452
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1436 || yy2arr1436 {
				if yyq1436[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1454 := z.EncBinary()
						_ = yym1454
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1454 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1454 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1436[6] {
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1455 := z.EncBinary()
						_ = yym1455
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1455 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1455 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1436 || yy2arr1436 {
				if yyq1436[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1457 := z.EncBinary()
						_ = yym1457
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1436[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1458 := z.EncBinary()
						_ = yym1458
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yysep1436 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1459 := z.DecBinary()
	_ = yym1459
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1460 := r.ReadMapStart()
			if yyl1460 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1460, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1460 := r.ReadArrayStart()
			if yyl1460 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1460, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1461Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1461Slc
	var yyhl1461 bool = l >= 0
	for yyj1461 := 0; ; yyj1461++ {
		if yyhl1461 {
			if yyj1461 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1461Slc = r.DecodeBytes(yys1461Slc, true, true)
		yys1461 := string(yys1461Slc)
		switch yys1461 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1463 := &x.Conditions
				yym1464 := z.DecBinary()
				_ = yym1464
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1463), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym1470 := z.DecBinary()
				_ = yym1470
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1470 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1470 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1471 := &x.ContainerStatuses
				yym1472 := z.DecBinary()
				_ = yym1472
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1471), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1461)
		} // end switch yys1461
	} // end for yyj1461
	if !yyhl1461 {
		r.ReadEnd()
	}
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1473 int
	var yyb1473 bool
	var yyhl1473 bool = l >= 0
	yyj1473++
	if yyhl1473 {
		yyb1473 = yyj1473 > l
	} else {
		yyb1473 = r.CheckBreak()
	}
	if yyb1473 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1473++
	if yyhl1473 {
		yyb1473 = yyj1473 > l
	} else {
		yyb1473 = r.CheckBreak()
	}
	if yyb1473 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1475 := &x.Conditions
		yym1476 := z.DecBinary()
		_ = yym1476
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1475), d)
		}
	}
	yyj1473++
	if yyhl1473 {
		yyb1473 = yyj1473 > l
	} else {
		yyb1473 = r.CheckBreak()
	}
	if yyb1473 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1473++
	if yyhl1473 {
		yyb1473 = yyj1473 > l
	} else {
		yyb1473 = r.CheckBreak()
	}
	if yyb1473 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1473++
	if yyhl1473 {
		yyb1473 = yyj1473 > l
	} else {
		yyb1473 = r.CheckBreak()
	}
	if yyb1473 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1473++
	if yyhl1473 {
		yyb1473 = yyj1473 > l
	} else {
		yyb1473 = r.CheckBreak()
	}
	if yyb1473 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1473++
	if yyhl1473 {
		yyb1473 = yyj1473 > l
	} else {
		yyb1473 = r.CheckBreak()
	}
	if yyb1473 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym1482 := z.DecBinary()
		_ = yym1482
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1482 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1482 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1473++
	if yyhl1473 {
		yyb1473 = yyj1473 > l
	} else {
		yyb1473 = r.CheckBreak()
	}
	if yyb1473 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1483 := &x.ContainerStatuses
		yym1484 := z.DecBinary()
		_ = yym1484
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1483), d)
		}
	}
	for {
		yyj1473++
		if yyhl1473 {
			yyb1473 = yyj1473 > l
		} else {
			yyb1473 = r.CheckBreak()
		}
		if yyb1473 {
			break
		}
		z.DecStructFieldNotFound(yyj1473-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1485 := z.EncBinary()
		_ = yym1485
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1486 := !z.EncBinary()
			yy2arr1486 := z.EncBasicHandle().StructToArray
			var yyq1486 [4]bool
			_, _, _ = yysep1486, yyq1486, yy2arr1486
			const yyr1486 bool = false
			yyq1486[0] = x.Kind != ""
			yyq1486[1] = x.APIVersion != ""
			yyq1486[2] = true
			yyq1486[3] = true
			if yyr1486 || yy2arr1486 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1486 int = 0
				for _, b := range yyq1486 {
					if b {
						yynn1486++
					}
				}
				r.EncodeMapStart(yynn1486)
			}
			if yyr1486 || yy2arr1486 {
				if yyq1486[0] {
					yym1488 := z.EncBinary()
					_ = yym1488
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1486[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1489 := z.EncBinary()
					_ = yym1489
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1486 || yy2arr1486 {
				if yyq1486[1] {
					yym1491 := z.EncBinary()
					_ = yym1491
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1486[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1492 := z.EncBinary()
					_ = yym1492
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1486 || yy2arr1486 {
				if yyq1486[2] {
					yy1494 := &x.ObjectMeta
					yy1494.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1486[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1495 := &x.ObjectMeta
					yy1495.CodecEncodeSelf(e)
				}
			}
			if yyr1486 || yy2arr1486 {
				if yyq1486[3] {
					yy1497 := &x.Status
					yy1497.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1486[3] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1498 := &x.Status
					yy1498.CodecEncodeSelf(e)
				}
			}
			if yysep1486 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1499 := z.DecBinary()
	_ = yym1499
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1500 := r.ReadMapStart()
			if yyl1500 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1500, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1500 := r.ReadArrayStart()
			if yyl1500 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1500, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1501Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1501Slc
	var yyhl1501 bool = l >= 0
	for yyj1501 := 0; ; yyj1501++ {
		if yyhl1501 {
			if yyj1501 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1501Slc = r.DecodeBytes(yys1501Slc, true, true)
		yys1501 := string(yys1501Slc)
		switch yys1501 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1504 := &x.ObjectMeta
				yyv1504.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1505 := &x.Status
				yyv1505.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1501)
		} // end switch yys1501
	} // end for yyj1501
	if !yyhl1501 {
		r.ReadEnd()
	}
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1506 int
	var yyb1506 bool
	var yyhl1506 bool = l >= 0
	yyj1506++
	if yyhl1506 {
		yyb1506 = yyj1506 > l
	} else {
		yyb1506 = r.CheckBreak()
	}
	if yyb1506 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1506++
	if yyhl1506 {
		yyb1506 = yyj1506 > l
	} else {
		yyb1506 = r.CheckBreak()
	}
	if yyb1506 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1506++
	if yyhl1506 {
		yyb1506 = yyj1506 > l
	} else {
		yyb1506 = r.CheckBreak()
	}
	if yyb1506 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1509 := &x.ObjectMeta
		yyv1509.CodecDecodeSelf(d)
	}
	yyj1506++
	if yyhl1506 {
		yyb1506 = yyj1506 > l
	} else {
		yyb1506 = r.CheckBreak()
	}
	if yyb1506 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1510 := &x.Status
		yyv1510.CodecDecodeSelf(d)
	}
	for {
		yyj1506++
		if yyhl1506 {
			yyb1506 = yyj1506 > l
		} else {
			yyb1506 = r.CheckBreak()
		}
		if yyb1506 {
			break
		}
		z.DecStructFieldNotFound(yyj1506-1, "")
	}
	r.ReadEnd()
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1511 := z.EncBinary()
		_ = yym1511
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1512 := !z.EncBinary()
			yy2arr1512 := z.EncBasicHandle().StructToArray
			var yyq1512 [5]bool
			_, _, _ = yysep1512, yyq1512, yy2arr1512
			const yyr1512 bool = false
			yyq1512[0] = x.Kind != ""
			yyq1512[1] = x.APIVersion != ""
			yyq1512[2] = true
			yyq1512[3] = true
			yyq1512[4] = true
			if yyr1512 || yy2arr1512 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1512 int = 0
				for _, b := range yyq1512 {
					if b {
						yynn1512++
					}
				}
				r.EncodeMapStart(yynn1512)
			}
			if yyr1512 || yy2arr1512 {
				if yyq1512[0] {
					yym1514 := z.EncBinary()
					_ = yym1514
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1512[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1515 := z.EncBinary()
					_ = yym1515
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1512 || yy2arr1512 {
				if yyq1512[1] {
					yym1517 := z.EncBinary()
					_ = yym1517
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1512[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1518 := z.EncBinary()
					_ = yym1518
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1512 || yy2arr1512 {
				if yyq1512[2] {
					yy1520 := &x.ObjectMeta
					yy1520.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1512[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1521 := &x.ObjectMeta
					yy1521.CodecEncodeSelf(e)
				}
			}
			if yyr1512 || yy2arr1512 {
				if yyq1512[3] {
					yy1523 := &x.Spec
					yy1523.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1512[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1524 := &x.Spec
					yy1524.CodecEncodeSelf(e)
				}
			}
			if yyr1512 || yy2arr1512 {
				if yyq1512[4] {
					yy1526 := &x.Status
					yy1526.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1512[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1527 := &x.Status
					yy1527.CodecEncodeSelf(e)
				}
			}
			if yysep1512 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1528 := z.DecBinary()
	_ = yym1528
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1529 := r.ReadMapStart()
			if yyl1529 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1529, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1529 := r.ReadArrayStart()
			if yyl1529 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1529, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1530Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1530Slc
	var yyhl1530 bool = l >= 0
	for yyj1530 := 0; ; yyj1530++ {
		if yyhl1530 {
			if yyj1530 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1530Slc = r.DecodeBytes(yys1530Slc, true, true)
		yys1530 := string(yys1530Slc)
		switch yys1530 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1533 := &x.ObjectMeta
				yyv1533.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1534 := &x.Spec
				yyv1534.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1535 := &x.Status
				yyv1535.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1530)
		} // end switch yys1530
	} // end for yyj1530
	if !yyhl1530 {
		r.ReadEnd()
	}
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1536 int
	var yyb1536 bool
	var yyhl1536 bool = l >= 0
	yyj1536++
	if yyhl1536 {
		yyb1536 = yyj1536 > l
	} else {
		yyb1536 = r.CheckBreak()
	}
	if yyb1536 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1536++
	if yyhl1536 {
		yyb1536 = yyj1536 > l
	} else {
		yyb1536 = r.CheckBreak()
	}
	if yyb1536 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1536++
	if yyhl1536 {
		yyb1536 = yyj1536 > l
	} else {
		yyb1536 = r.CheckBreak()
	}
	if yyb1536 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1539 := &x.ObjectMeta
		yyv1539.CodecDecodeSelf(d)
	}
	yyj1536++
	if yyhl1536 {
		yyb1536 = yyj1536 > l
	} else {
		yyb1536 = r.CheckBreak()
	}
	if yyb1536 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1540 := &x.Spec
		yyv1540.CodecDecodeSelf(d)
	}
	yyj1536++
	if yyhl1536 {
		yyb1536 = yyj1536 > l
	} else {
		yyb1536 = r.CheckBreak()
	}
	if yyb1536 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1541 := &x.Status
		yyv1541.CodecDecodeSelf(d)
	}
	for {
		yyj1536++
		if yyhl1536 {
			yyb1536 = yyj1536 > l
		} else {
			yyb1536 = r.CheckBreak()
		}
		if yyb1536 {
			break
		}
		z.DecStructFieldNotFound(yyj1536-1, "")
	}
	r.ReadEnd()
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1542 := z.EncBinary()
		_ = yym1542
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1543 := !z.EncBinary()
			yy2arr1543 := z.EncBasicHandle().StructToArray
			var yyq1543 [4]bool
			_, _, _ = yysep1543, yyq1543, yy2arr1543
			const yyr1543 bool = false
			yyq1543[0] = x.Kind != ""
			yyq1543[1] = x.APIVersion != ""
			yyq1543[2] = true
			if yyr1543 || yy2arr1543 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1543 int = 1
				for _, b := range yyq1543 {
					if b {
						yynn1543++
					}
				}
				r.EncodeMapStart(yynn1543)
			}
			if yyr1543 || yy2arr1543 {
				if yyq1543[0] {
					yym1545 := z.EncBinary()
					_ = yym1545
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1543[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1546 := z.EncBinary()
					_ = yym1546
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1543 || yy2arr1543 {
				if yyq1543[1] {
					yym1548 := z.EncBinary()
					_ = yym1548
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1543[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1549 := z.EncBinary()
					_ = yym1549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1543 || yy2arr1543 {
				if yyq1543[2] {
					yy1551 := &x.ListMeta
					yym1552 := z.EncBinary()
					_ = yym1552
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1551) {
					} else {
						z.EncFallback(yy1551)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1543[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1553 := &x.ListMeta
					yym1554 := z.EncBinary()
					_ = yym1554
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1553) {
					} else {
						z.EncFallback(yy1553)
					}
				}
			}
			if yyr1543 || yy2arr1543 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1556 := z.EncBinary()
					_ = yym1556
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1557 := z.EncBinary()
					_ = yym1557
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yysep1543 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1558 := z.DecBinary()
	_ = yym1558
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1559 := r.ReadMapStart()
			if yyl1559 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1559, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1559 := r.ReadArrayStart()
			if yyl1559 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1559, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1560Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1560Slc
	var yyhl1560 bool = l >= 0
	for yyj1560 := 0; ; yyj1560++ {
		if yyhl1560 {
			if yyj1560 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1560Slc = r.DecodeBytes(yys1560Slc, true, true)
		yys1560 := string(yys1560Slc)
		switch yys1560 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1563 := &x.ListMeta
				yym1564 := z.DecBinary()
				_ = yym1564
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1563) {
				} else {
					z.DecFallback(yyv1563, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1565 := &x.Items
				yym1566 := z.DecBinary()
				_ = yym1566
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1565), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1560)
		} // end switch yys1560
	} // end for yyj1560
	if !yyhl1560 {
		r.ReadEnd()
	}
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1567 int
	var yyb1567 bool
	var yyhl1567 bool = l >= 0
	yyj1567++
	if yyhl1567 {
		yyb1567 = yyj1567 > l
	} else {
		yyb1567 = r.CheckBreak()
	}
	if yyb1567 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1567++
	if yyhl1567 {
		yyb1567 = yyj1567 > l
	} else {
		yyb1567 = r.CheckBreak()
	}
	if yyb1567 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1567++
	if yyhl1567 {
		yyb1567 = yyj1567 > l
	} else {
		yyb1567 = r.CheckBreak()
	}
	if yyb1567 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1570 := &x.ListMeta
		yym1571 := z.DecBinary()
		_ = yym1571
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1570) {
		} else {
			z.DecFallback(yyv1570, false)
		}
	}
	yyj1567++
	if yyhl1567 {
		yyb1567 = yyj1567 > l
	} else {
		yyb1567 = r.CheckBreak()
	}
	if yyb1567 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1572 := &x.Items
		yym1573 := z.DecBinary()
		_ = yym1573
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1572), d)
		}
	}
	for {
		yyj1567++
		if yyhl1567 {
			yyb1567 = yyj1567 > l
		} else {
			yyb1567 = r.CheckBreak()
		}
		if yyb1567 {
			break
		}
		z.DecStructFieldNotFound(yyj1567-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1574 := z.EncBinary()
		_ = yym1574
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1575 := !z.EncBinary()
			yy2arr1575 := z.EncBasicHandle().StructToArray
			var yyq1575 [2]bool
			_, _, _ = yysep1575, yyq1575, yy2arr1575
			const yyr1575 bool = false
			yyq1575[0] = true
			yyq1575[1] = true
			if yyr1575 || yy2arr1575 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1575 int = 0
				for _, b := range yyq1575 {
					if b {
						yynn1575++
					}
				}
				r.EncodeMapStart(yynn1575)
			}
			if yyr1575 || yy2arr1575 {
				if yyq1575[0] {
					yy1577 := &x.ObjectMeta
					yy1577.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1575[0] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1578 := &x.ObjectMeta
					yy1578.CodecEncodeSelf(e)
				}
			}
			if yyr1575 || yy2arr1575 {
				if yyq1575[1] {
					yy1580 := &x.Spec
					yy1580.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1575[1] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1581 := &x.Spec
					yy1581.CodecEncodeSelf(e)
				}
			}
			if yysep1575 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1582 := z.DecBinary()
	_ = yym1582
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1583 := r.ReadMapStart()
			if yyl1583 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1583, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1583 := r.ReadArrayStart()
			if yyl1583 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1583, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1584Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1584Slc
	var yyhl1584 bool = l >= 0
	for yyj1584 := 0; ; yyj1584++ {
		if yyhl1584 {
			if yyj1584 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1584Slc = r.DecodeBytes(yys1584Slc, true, true)
		yys1584 := string(yys1584Slc)
		switch yys1584 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1585 := &x.ObjectMeta
				yyv1585.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1586 := &x.Spec
				yyv1586.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1584)
		} // end switch yys1584
	} // end for yyj1584
	if !yyhl1584 {
		r.ReadEnd()
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1587 int
	var yyb1587 bool
	var yyhl1587 bool = l >= 0
	yyj1587++
	if yyhl1587 {
		yyb1587 = yyj1587 > l
	} else {
		yyb1587 = r.CheckBreak()
	}
	if yyb1587 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1588 := &x.ObjectMeta
		yyv1588.CodecDecodeSelf(d)
	}
	yyj1587++
	if yyhl1587 {
		yyb1587 = yyj1587 > l
	} else {
		yyb1587 = r.CheckBreak()
	}
	if yyb1587 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1589 := &x.Spec
		yyv1589.CodecDecodeSelf(d)
	}
	for {
		yyj1587++
		if yyhl1587 {
			yyb1587 = yyj1587 > l
		} else {
			yyb1587 = r.CheckBreak()
		}
		if yyb1587 {
			break
		}
		z.DecStructFieldNotFound(yyj1587-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1590 := z.EncBinary()
		_ = yym1590
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1591 := !z.EncBinary()
			yy2arr1591 := z.EncBasicHandle().StructToArray
			var yyq1591 [4]bool
			_, _, _ = yysep1591, yyq1591, yy2arr1591
			const yyr1591 bool = false
			yyq1591[0] = x.Kind != ""
			yyq1591[1] = x.APIVersion != ""
			yyq1591[2] = true
			yyq1591[3] = true
			if yyr1591 || yy2arr1591 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1591 int = 0
				for _, b := range yyq1591 {
					if b {
						yynn1591++
					}
				}
				r.EncodeMapStart(yynn1591)
			}
			if yyr1591 || yy2arr1591 {
				if yyq1591[0] {
					yym1593 := z.EncBinary()
					_ = yym1593
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1591[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1594 := z.EncBinary()
					_ = yym1594
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1591 || yy2arr1591 {
				if yyq1591[1] {
					yym1596 := z.EncBinary()
					_ = yym1596
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1591[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1597 := z.EncBinary()
					_ = yym1597
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1591 || yy2arr1591 {
				if yyq1591[2] {
					yy1599 := &x.ObjectMeta
					yy1599.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1591[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1600 := &x.ObjectMeta
					yy1600.CodecEncodeSelf(e)
				}
			}
			if yyr1591 || yy2arr1591 {
				if yyq1591[3] {
					yy1602 := &x.Template
					yy1602.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1591[3] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					yy1603 := &x.Template
					yy1603.CodecEncodeSelf(e)
				}
			}
			if yysep1591 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1604 := z.DecBinary()
	_ = yym1604
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1605 := r.ReadMapStart()
			if yyl1605 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1605, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1605 := r.ReadArrayStart()
			if yyl1605 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1605, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1606Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1606Slc
	var yyhl1606 bool = l >= 0
	for yyj1606 := 0; ; yyj1606++ {
		if yyhl1606 {
			if yyj1606 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1606Slc = r.DecodeBytes(yys1606Slc, true, true)
		yys1606 := string(yys1606Slc)
		switch yys1606 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1609 := &x.ObjectMeta
				yyv1609.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv1610 := &x.Template
				yyv1610.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1606)
		} // end switch yys1606
	} // end for yyj1606
	if !yyhl1606 {
		r.ReadEnd()
	}
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1611 int
	var yyb1611 bool
	var yyhl1611 bool = l >= 0
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1614 := &x.ObjectMeta
		yyv1614.CodecDecodeSelf(d)
	}
	yyj1611++
	if yyhl1611 {
		yyb1611 = yyj1611 > l
	} else {
		yyb1611 = r.CheckBreak()
	}
	if yyb1611 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv1615 := &x.Template
		yyv1615.CodecDecodeSelf(d)
	}
	for {
		yyj1611++
		if yyhl1611 {
			yyb1611 = yyj1611 > l
		} else {
			yyb1611 = r.CheckBreak()
		}
		if yyb1611 {
			break
		}
		z.DecStructFieldNotFound(yyj1611-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1616 := z.EncBinary()
		_ = yym1616
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1617 := !z.EncBinary()
			yy2arr1617 := z.EncBasicHandle().StructToArray
			var yyq1617 [4]bool
			_, _, _ = yysep1617, yyq1617, yy2arr1617
			const yyr1617 bool = false
			yyq1617[0] = x.Kind != ""
			yyq1617[1] = x.APIVersion != ""
			yyq1617[2] = true
			if yyr1617 || yy2arr1617 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1617 int = 1
				for _, b := range yyq1617 {
					if b {
						yynn1617++
					}
				}
				r.EncodeMapStart(yynn1617)
			}
			if yyr1617 || yy2arr1617 {
				if yyq1617[0] {
					yym1619 := z.EncBinary()
					_ = yym1619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1617[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1620 := z.EncBinary()
					_ = yym1620
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1617 || yy2arr1617 {
				if yyq1617[1] {
					yym1622 := z.EncBinary()
					_ = yym1622
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1617[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1623 := z.EncBinary()
					_ = yym1623
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1617 || yy2arr1617 {
				if yyq1617[2] {
					yy1625 := &x.ListMeta
					yym1626 := z.EncBinary()
					_ = yym1626
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1625) {
					} else {
						z.EncFallback(yy1625)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1617[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1627 := &x.ListMeta
					yym1628 := z.EncBinary()
					_ = yym1628
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1627) {
					} else {
						z.EncFallback(yy1627)
					}
				}
			}
			if yyr1617 || yy2arr1617 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1630 := z.EncBinary()
					_ = yym1630
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1631 := z.EncBinary()
					_ = yym1631
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yysep1617 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1632 := z.DecBinary()
	_ = yym1632
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1633 := r.ReadMapStart()
			if yyl1633 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1633, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1633 := r.ReadArrayStart()
			if yyl1633 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1633, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1634Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1634Slc
	var yyhl1634 bool = l >= 0
	for yyj1634 := 0; ; yyj1634++ {
		if yyhl1634 {
			if yyj1634 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1634Slc = r.DecodeBytes(yys1634Slc, true, true)
		yys1634 := string(yys1634Slc)
		switch yys1634 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1637 := &x.ListMeta
				yym1638 := z.DecBinary()
				_ = yym1638
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1637) {
				} else {
					z.DecFallback(yyv1637, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1639 := &x.Items
				yym1640 := z.DecBinary()
				_ = yym1640
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv1639), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1634)
		} // end switch yys1634
	} // end for yyj1634
	if !yyhl1634 {
		r.ReadEnd()
	}
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1641 int
	var yyb1641 bool
	var yyhl1641 bool = l >= 0
	yyj1641++
	if yyhl1641 {
		yyb1641 = yyj1641 > l
	} else {
		yyb1641 = r.CheckBreak()
	}
	if yyb1641 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1641++
	if yyhl1641 {
		yyb1641 = yyj1641 > l
	} else {
		yyb1641 = r.CheckBreak()
	}
	if yyb1641 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1641++
	if yyhl1641 {
		yyb1641 = yyj1641 > l
	} else {
		yyb1641 = r.CheckBreak()
	}
	if yyb1641 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1644 := &x.ListMeta
		yym1645 := z.DecBinary()
		_ = yym1645
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1644) {
		} else {
			z.DecFallback(yyv1644, false)
		}
	}
	yyj1641++
	if yyhl1641 {
		yyb1641 = yyj1641 > l
	} else {
		yyb1641 = r.CheckBreak()
	}
	if yyb1641 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1646 := &x.Items
		yym1647 := z.DecBinary()
		_ = yym1647
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv1646), d)
		}
	}
	for {
		yyj1641++
		if yyhl1641 {
			yyb1641 = yyj1641 > l
		} else {
			yyb1641 = r.CheckBreak()
		}
		if yyb1641 {
			break
		}
		z.DecStructFieldNotFound(yyj1641-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1648 := z.EncBinary()
		_ = yym1648
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1649 := !z.EncBinary()
			yy2arr1649 := z.EncBasicHandle().StructToArray
			var yyq1649 [3]bool
			_, _, _ = yysep1649, yyq1649, yy2arr1649
			const yyr1649 bool = false
			yyq1649[0] = x.Replicas != nil
			yyq1649[1] = len(x.Selector) != 0
			yyq1649[2] = x.Template != nil
			if yyr1649 || yy2arr1649 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1649 int = 0
				for _, b := range yyq1649 {
					if b {
						yynn1649++
					}
				}
				r.EncodeMapStart(yynn1649)
			}
			if yyr1649 || yy2arr1649 {
				if yyq1649[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1651 := *x.Replicas
						yym1652 := z.EncBinary()
						_ = yym1652
						if false {
						} else {
							r.EncodeInt(int64(yy1651))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1649[0] {
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1653 := *x.Replicas
						yym1654 := z.EncBinary()
						_ = yym1654
						if false {
						} else {
							r.EncodeInt(int64(yy1653))
						}
					}
				}
			}
			if yyr1649 || yy2arr1649 {
				if yyq1649[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1656 := z.EncBinary()
						_ = yym1656
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1649[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1657 := z.EncBinary()
						_ = yym1657
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr1649 || yy2arr1649 {
				if yyq1649[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1649[2] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1649 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1659 := z.DecBinary()
	_ = yym1659
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1660 := r.ReadMapStart()
			if yyl1660 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1660, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1660 := r.ReadArrayStart()
			if yyl1660 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1660, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1661Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1661Slc
	var yyhl1661 bool = l >= 0
	for yyj1661 := 0; ; yyj1661++ {
		if yyhl1661 {
			if yyj1661 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1661Slc = r.DecodeBytes(yys1661Slc, true, true)
		yys1661 := string(yys1661Slc)
		switch yys1661 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int)
				}
				yym1663 := z.DecBinary()
				_ = yym1663
				if false {
				} else {
					*((*int)(x.Replicas)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1664 := &x.Selector
				yym1665 := z.DecBinary()
				_ = yym1665
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1664, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1661)
		} // end switch yys1661
	} // end for yyj1661
	if !yyhl1661 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1667 int
	var yyb1667 bool
	var yyhl1667 bool = l >= 0
	yyj1667++
	if yyhl1667 {
		yyb1667 = yyj1667 > l
	} else {
		yyb1667 = r.CheckBreak()
	}
	if yyb1667 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int)
		}
		yym1669 := z.DecBinary()
		_ = yym1669
		if false {
		} else {
			*((*int)(x.Replicas)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj1667++
	if yyhl1667 {
		yyb1667 = yyj1667 > l
	} else {
		yyb1667 = r.CheckBreak()
	}
	if yyb1667 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1670 := &x.Selector
		yym1671 := z.DecBinary()
		_ = yym1671
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1670, false, d)
		}
	}
	yyj1667++
	if yyhl1667 {
		yyb1667 = yyj1667 > l
	} else {
		yyb1667 = r.CheckBreak()
	}
	if yyb1667 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1667++
		if yyhl1667 {
			yyb1667 = yyj1667 > l
		} else {
			yyb1667 = r.CheckBreak()
		}
		if yyb1667 {
			break
		}
		z.DecStructFieldNotFound(yyj1667-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1673 := z.EncBinary()
		_ = yym1673
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1674 := !z.EncBinary()
			yy2arr1674 := z.EncBasicHandle().StructToArray
			var yyq1674 [2]bool
			_, _, _ = yysep1674, yyq1674, yy2arr1674
			const yyr1674 bool = false
			yyq1674[1] = x.ObservedGeneration != 0
			if yyr1674 || yy2arr1674 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1674 int = 1
				for _, b := range yyq1674 {
					if b {
						yynn1674++
					}
				}
				r.EncodeMapStart(yynn1674)
			}
			if yyr1674 || yy2arr1674 {
				yym1676 := z.EncBinary()
				_ = yym1676
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				yym1677 := z.EncBinary()
				_ = yym1677
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1674 || yy2arr1674 {
				if yyq1674[1] {
					yym1679 := z.EncBinary()
					_ = yym1679
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1674[1] {
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					yym1680 := z.EncBinary()
					_ = yym1680
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yysep1674 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1681 := z.DecBinary()
	_ = yym1681
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1682 := r.ReadMapStart()
			if yyl1682 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1682, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1682 := r.ReadArrayStart()
			if yyl1682 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1682, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1683Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1683Slc
	var yyhl1683 bool = l >= 0
	for yyj1683 := 0; ; yyj1683++ {
		if yyhl1683 {
			if yyj1683 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1683Slc = r.DecodeBytes(yys1683Slc, true, true)
		yys1683 := string(yys1683Slc)
		switch yys1683 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1683)
		} // end switch yys1683
	} // end for yyj1683
	if !yyhl1683 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1686 int
	var yyb1686 bool
	var yyhl1686 bool = l >= 0
	yyj1686++
	if yyhl1686 {
		yyb1686 = yyj1686 > l
	} else {
		yyb1686 = r.CheckBreak()
	}
	if yyb1686 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1686++
	if yyhl1686 {
		yyb1686 = yyj1686 > l
	} else {
		yyb1686 = r.CheckBreak()
	}
	if yyb1686 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1686++
		if yyhl1686 {
			yyb1686 = yyj1686 > l
		} else {
			yyb1686 = r.CheckBreak()
		}
		if yyb1686 {
			break
		}
		z.DecStructFieldNotFound(yyj1686-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1689 := z.EncBinary()
		_ = yym1689
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1690 := !z.EncBinary()
			yy2arr1690 := z.EncBasicHandle().StructToArray
			var yyq1690 [5]bool
			_, _, _ = yysep1690, yyq1690, yy2arr1690
			const yyr1690 bool = false
			yyq1690[0] = x.Kind != ""
			yyq1690[1] = x.APIVersion != ""
			yyq1690[2] = true
			yyq1690[3] = true
			yyq1690[4] = true
			if yyr1690 || yy2arr1690 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1690 int = 0
				for _, b := range yyq1690 {
					if b {
						yynn1690++
					}
				}
				r.EncodeMapStart(yynn1690)
			}
			if yyr1690 || yy2arr1690 {
				if yyq1690[0] {
					yym1692 := z.EncBinary()
					_ = yym1692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1690[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1693 := z.EncBinary()
					_ = yym1693
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1690 || yy2arr1690 {
				if yyq1690[1] {
					yym1695 := z.EncBinary()
					_ = yym1695
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1690[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1696 := z.EncBinary()
					_ = yym1696
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1690 || yy2arr1690 {
				if yyq1690[2] {
					yy1698 := &x.ObjectMeta
					yy1698.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1690[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1699 := &x.ObjectMeta
					yy1699.CodecEncodeSelf(e)
				}
			}
			if yyr1690 || yy2arr1690 {
				if yyq1690[3] {
					yy1701 := &x.Spec
					yy1701.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1690[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1702 := &x.Spec
					yy1702.CodecEncodeSelf(e)
				}
			}
			if yyr1690 || yy2arr1690 {
				if yyq1690[4] {
					yy1704 := &x.Status
					yy1704.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1690[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1705 := &x.Status
					yy1705.CodecEncodeSelf(e)
				}
			}
			if yysep1690 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1706 := z.DecBinary()
	_ = yym1706
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1707 := r.ReadMapStart()
			if yyl1707 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1707, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1707 := r.ReadArrayStart()
			if yyl1707 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1707, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1708Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1708Slc
	var yyhl1708 bool = l >= 0
	for yyj1708 := 0; ; yyj1708++ {
		if yyhl1708 {
			if yyj1708 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1708Slc = r.DecodeBytes(yys1708Slc, true, true)
		yys1708 := string(yys1708Slc)
		switch yys1708 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1711 := &x.ObjectMeta
				yyv1711.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv1712 := &x.Spec
				yyv1712.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv1713 := &x.Status
				yyv1713.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1708)
		} // end switch yys1708
	} // end for yyj1708
	if !yyhl1708 {
		r.ReadEnd()
	}
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1714 int
	var yyb1714 bool
	var yyhl1714 bool = l >= 0
	yyj1714++
	if yyhl1714 {
		yyb1714 = yyj1714 > l
	} else {
		yyb1714 = r.CheckBreak()
	}
	if yyb1714 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1714++
	if yyhl1714 {
		yyb1714 = yyj1714 > l
	} else {
		yyb1714 = r.CheckBreak()
	}
	if yyb1714 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1714++
	if yyhl1714 {
		yyb1714 = yyj1714 > l
	} else {
		yyb1714 = r.CheckBreak()
	}
	if yyb1714 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1717 := &x.ObjectMeta
		yyv1717.CodecDecodeSelf(d)
	}
	yyj1714++
	if yyhl1714 {
		yyb1714 = yyj1714 > l
	} else {
		yyb1714 = r.CheckBreak()
	}
	if yyb1714 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv1718 := &x.Spec
		yyv1718.CodecDecodeSelf(d)
	}
	yyj1714++
	if yyhl1714 {
		yyb1714 = yyj1714 > l
	} else {
		yyb1714 = r.CheckBreak()
	}
	if yyb1714 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv1719 := &x.Status
		yyv1719.CodecDecodeSelf(d)
	}
	for {
		yyj1714++
		if yyhl1714 {
			yyb1714 = yyj1714 > l
		} else {
			yyb1714 = r.CheckBreak()
		}
		if yyb1714 {
			break
		}
		z.DecStructFieldNotFound(yyj1714-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1720 := z.EncBinary()
		_ = yym1720
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1721 := !z.EncBinary()
			yy2arr1721 := z.EncBasicHandle().StructToArray
			var yyq1721 [4]bool
			_, _, _ = yysep1721, yyq1721, yy2arr1721
			const yyr1721 bool = false
			yyq1721[0] = x.Kind != ""
			yyq1721[1] = x.APIVersion != ""
			yyq1721[2] = true
			if yyr1721 || yy2arr1721 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1721 int = 1
				for _, b := range yyq1721 {
					if b {
						yynn1721++
					}
				}
				r.EncodeMapStart(yynn1721)
			}
			if yyr1721 || yy2arr1721 {
				if yyq1721[0] {
					yym1723 := z.EncBinary()
					_ = yym1723
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1721[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1724 := z.EncBinary()
					_ = yym1724
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1721 || yy2arr1721 {
				if yyq1721[1] {
					yym1726 := z.EncBinary()
					_ = yym1726
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1721[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1727 := z.EncBinary()
					_ = yym1727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1721 || yy2arr1721 {
				if yyq1721[2] {
					yy1729 := &x.ListMeta
					yym1730 := z.EncBinary()
					_ = yym1730
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1729) {
					} else {
						z.EncFallback(yy1729)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1721[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1731 := &x.ListMeta
					yym1732 := z.EncBinary()
					_ = yym1732
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1731) {
					} else {
						z.EncFallback(yy1731)
					}
				}
			}
			if yyr1721 || yy2arr1721 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1734 := z.EncBinary()
					_ = yym1734
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1735 := z.EncBinary()
					_ = yym1735
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yysep1721 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1736 := z.DecBinary()
	_ = yym1736
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1737 := r.ReadMapStart()
			if yyl1737 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1737, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1737 := r.ReadArrayStart()
			if yyl1737 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1737, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1738Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1738Slc
	var yyhl1738 bool = l >= 0
	for yyj1738 := 0; ; yyj1738++ {
		if yyhl1738 {
			if yyj1738 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1738Slc = r.DecodeBytes(yys1738Slc, true, true)
		yys1738 := string(yys1738Slc)
		switch yys1738 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1741 := &x.ListMeta
				yym1742 := z.DecBinary()
				_ = yym1742
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1741) {
				} else {
					z.DecFallback(yyv1741, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1743 := &x.Items
				yym1744 := z.DecBinary()
				_ = yym1744
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv1743), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1738)
		} // end switch yys1738
	} // end for yyj1738
	if !yyhl1738 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1745 int
	var yyb1745 bool
	var yyhl1745 bool = l >= 0
	yyj1745++
	if yyhl1745 {
		yyb1745 = yyj1745 > l
	} else {
		yyb1745 = r.CheckBreak()
	}
	if yyb1745 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1745++
	if yyhl1745 {
		yyb1745 = yyj1745 > l
	} else {
		yyb1745 = r.CheckBreak()
	}
	if yyb1745 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1745++
	if yyhl1745 {
		yyb1745 = yyj1745 > l
	} else {
		yyb1745 = r.CheckBreak()
	}
	if yyb1745 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1748 := &x.ListMeta
		yym1749 := z.DecBinary()
		_ = yym1749
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1748) {
		} else {
			z.DecFallback(yyv1748, false)
		}
	}
	yyj1745++
	if yyhl1745 {
		yyb1745 = yyj1745 > l
	} else {
		yyb1745 = r.CheckBreak()
	}
	if yyb1745 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1750 := &x.Items
		yym1751 := z.DecBinary()
		_ = yym1751
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv1750), d)
		}
	}
	for {
		yyj1745++
		if yyhl1745 {
			yyb1745 = yyj1745 > l
		} else {
			yyb1745 = r.CheckBreak()
		}
		if yyb1745 {
			break
		}
		z.DecStructFieldNotFound(yyj1745-1, "")
	}
	r.ReadEnd()
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1752 := z.EncBinary()
	_ = yym1752
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1753 := z.DecBinary()
	_ = yym1753
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1754 := z.EncBinary()
	_ = yym1754
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1755 := z.DecBinary()
	_ = yym1755
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1756 := z.EncBinary()
		_ = yym1756
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1757 := !z.EncBinary()
			yy2arr1757 := z.EncBasicHandle().StructToArray
			var yyq1757 [1]bool
			_, _, _ = yysep1757, yyq1757, yy2arr1757
			const yyr1757 bool = false
			yyq1757[0] = true
			if yyr1757 || yy2arr1757 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1757 int = 0
				for _, b := range yyq1757 {
					if b {
						yynn1757++
					}
				}
				r.EncodeMapStart(yynn1757)
			}
			if yyr1757 || yy2arr1757 {
				if yyq1757[0] {
					yy1759 := &x.LoadBalancer
					yy1759.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1757[0] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					yy1760 := &x.LoadBalancer
					yy1760.CodecEncodeSelf(e)
				}
			}
			if yysep1757 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1761 := z.DecBinary()
	_ = yym1761
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1762 := r.ReadMapStart()
			if yyl1762 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1762, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1762 := r.ReadArrayStart()
			if yyl1762 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1762, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1763Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1763Slc
	var yyhl1763 bool = l >= 0
	for yyj1763 := 0; ; yyj1763++ {
		if yyhl1763 {
			if yyj1763 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1763Slc = r.DecodeBytes(yys1763Slc, true, true)
		yys1763 := string(yys1763Slc)
		switch yys1763 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv1764 := &x.LoadBalancer
				yyv1764.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1763)
		} // end switch yys1763
	} // end for yyj1763
	if !yyhl1763 {
		r.ReadEnd()
	}
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1765 int
	var yyb1765 bool
	var yyhl1765 bool = l >= 0
	yyj1765++
	if yyhl1765 {
		yyb1765 = yyj1765 > l
	} else {
		yyb1765 = r.CheckBreak()
	}
	if yyb1765 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv1766 := &x.LoadBalancer
		yyv1766.CodecDecodeSelf(d)
	}
	for {
		yyj1765++
		if yyhl1765 {
			yyb1765 = yyj1765 > l
		} else {
			yyb1765 = r.CheckBreak()
		}
		if yyb1765 {
			break
		}
		z.DecStructFieldNotFound(yyj1765-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1767 := z.EncBinary()
		_ = yym1767
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1768 := !z.EncBinary()
			yy2arr1768 := z.EncBasicHandle().StructToArray
			var yyq1768 [1]bool
			_, _, _ = yysep1768, yyq1768, yy2arr1768
			const yyr1768 bool = false
			yyq1768[0] = len(x.Ingress) != 0
			if yyr1768 || yy2arr1768 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1768 int = 0
				for _, b := range yyq1768 {
					if b {
						yynn1768++
					}
				}
				r.EncodeMapStart(yynn1768)
			}
			if yyr1768 || yy2arr1768 {
				if yyq1768[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1770 := z.EncBinary()
						_ = yym1770
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1768[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1771 := z.EncBinary()
						_ = yym1771
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yysep1768 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1772 := z.DecBinary()
	_ = yym1772
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1773 := r.ReadMapStart()
			if yyl1773 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1773, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1773 := r.ReadArrayStart()
			if yyl1773 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1773, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1774Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1774Slc
	var yyhl1774 bool = l >= 0
	for yyj1774 := 0; ; yyj1774++ {
		if yyhl1774 {
			if yyj1774 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1774Slc = r.DecodeBytes(yys1774Slc, true, true)
		yys1774 := string(yys1774Slc)
		switch yys1774 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1775 := &x.Ingress
				yym1776 := z.DecBinary()
				_ = yym1776
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1775), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1774)
		} // end switch yys1774
	} // end for yyj1774
	if !yyhl1774 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1777 int
	var yyb1777 bool
	var yyhl1777 bool = l >= 0
	yyj1777++
	if yyhl1777 {
		yyb1777 = yyj1777 > l
	} else {
		yyb1777 = r.CheckBreak()
	}
	if yyb1777 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1778 := &x.Ingress
		yym1779 := z.DecBinary()
		_ = yym1779
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1778), d)
		}
	}
	for {
		yyj1777++
		if yyhl1777 {
			yyb1777 = yyj1777 > l
		} else {
			yyb1777 = r.CheckBreak()
		}
		if yyb1777 {
			break
		}
		z.DecStructFieldNotFound(yyj1777-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1780 := z.EncBinary()
		_ = yym1780
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1781 := !z.EncBinary()
			yy2arr1781 := z.EncBasicHandle().StructToArray
			var yyq1781 [2]bool
			_, _, _ = yysep1781, yyq1781, yy2arr1781
			const yyr1781 bool = false
			yyq1781[0] = x.IP != ""
			yyq1781[1] = x.Hostname != ""
			if yyr1781 || yy2arr1781 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1781 int = 0
				for _, b := range yyq1781 {
					if b {
						yynn1781++
					}
				}
				r.EncodeMapStart(yynn1781)
			}
			if yyr1781 || yy2arr1781 {
				if yyq1781[0] {
					yym1783 := z.EncBinary()
					_ = yym1783
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1781[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					yym1784 := z.EncBinary()
					_ = yym1784
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr1781 || yy2arr1781 {
				if yyq1781[1] {
					yym1786 := z.EncBinary()
					_ = yym1786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1781[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					yym1787 := z.EncBinary()
					_ = yym1787
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yysep1781 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1788 := z.DecBinary()
	_ = yym1788
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1789 := r.ReadMapStart()
			if yyl1789 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1789, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1789 := r.ReadArrayStart()
			if yyl1789 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1789, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1790Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1790Slc
	var yyhl1790 bool = l >= 0
	for yyj1790 := 0; ; yyj1790++ {
		if yyhl1790 {
			if yyj1790 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1790Slc = r.DecodeBytes(yys1790Slc, true, true)
		yys1790 := string(yys1790Slc)
		switch yys1790 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1790)
		} // end switch yys1790
	} // end for yyj1790
	if !yyhl1790 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1793 int
	var yyb1793 bool
	var yyhl1793 bool = l >= 0
	yyj1793++
	if yyhl1793 {
		yyb1793 = yyj1793 > l
	} else {
		yyb1793 = r.CheckBreak()
	}
	if yyb1793 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj1793++
	if yyhl1793 {
		yyb1793 = yyj1793 > l
	} else {
		yyb1793 = r.CheckBreak()
	}
	if yyb1793 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj1793++
		if yyhl1793 {
			yyb1793 = yyj1793 > l
		} else {
			yyb1793 = r.CheckBreak()
		}
		if yyb1793 {
			break
		}
		z.DecStructFieldNotFound(yyj1793-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1796 := z.EncBinary()
		_ = yym1796
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1797 := !z.EncBinary()
			yy2arr1797 := z.EncBasicHandle().StructToArray
			var yyq1797 [8]bool
			_, _, _ = yysep1797, yyq1797, yy2arr1797
			const yyr1797 bool = false
			yyq1797[1] = len(x.Selector) != 0
			yyq1797[2] = x.ClusterIP != ""
			yyq1797[3] = x.Type != ""
			yyq1797[4] = len(x.ExternalIPs) != 0
			yyq1797[5] = len(x.DeprecatedPublicIPs) != 0
			yyq1797[6] = x.SessionAffinity != ""
			yyq1797[7] = x.LoadBalancerIP != ""
			if yyr1797 || yy2arr1797 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1797 int = 1
				for _, b := range yyq1797 {
					if b {
						yynn1797++
					}
				}
				r.EncodeMapStart(yynn1797)
			}
			if yyr1797 || yy2arr1797 {
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1799 := z.EncBinary()
					_ = yym1799
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1800 := z.EncBinary()
					_ = yym1800
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr1797 || yy2arr1797 {
				if yyq1797[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1802 := z.EncBinary()
						_ = yym1802
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1797[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1803 := z.EncBinary()
						_ = yym1803
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr1797 || yy2arr1797 {
				if yyq1797[2] {
					yym1805 := z.EncBinary()
					_ = yym1805
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1797[2] {
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					yym1806 := z.EncBinary()
					_ = yym1806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr1797 || yy2arr1797 {
				if yyq1797[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1797[3] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr1797 || yy2arr1797 {
				if yyq1797[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1809 := z.EncBinary()
						_ = yym1809
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1797[4] {
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1810 := z.EncBinary()
						_ = yym1810
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr1797 || yy2arr1797 {
				if yyq1797[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym1812 := z.EncBinary()
						_ = yym1812
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1797[5] {
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym1813 := z.EncBinary()
						_ = yym1813
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr1797 || yy2arr1797 {
				if yyq1797[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1797[6] {
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr1797 || yy2arr1797 {
				if yyq1797[7] {
					yym1816 := z.EncBinary()
					_ = yym1816
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1797[7] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					yym1817 := z.EncBinary()
					_ = yym1817
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yysep1797 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1818 := z.DecBinary()
	_ = yym1818
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1819 := r.ReadMapStart()
			if yyl1819 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1819, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1819 := r.ReadArrayStart()
			if yyl1819 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1819, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1820Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1820Slc
	var yyhl1820 bool = l >= 0
	for yyj1820 := 0; ; yyj1820++ {
		if yyhl1820 {
			if yyj1820 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1820Slc = r.DecodeBytes(yys1820Slc, true, true)
		yys1820 := string(yys1820Slc)
		switch yys1820 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1821 := &x.Ports
				yym1822 := z.DecBinary()
				_ = yym1822
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv1821), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1823 := &x.Selector
				yym1824 := z.DecBinary()
				_ = yym1824
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1823, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv1827 := &x.ExternalIPs
				yym1828 := z.DecBinary()
				_ = yym1828
				if false {
				} else {
					z.F.DecSliceStringX(yyv1827, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv1829 := &x.DeprecatedPublicIPs
				yym1830 := z.DecBinary()
				_ = yym1830
				if false {
				} else {
					z.F.DecSliceStringX(yyv1829, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1820)
		} // end switch yys1820
	} // end for yyj1820
	if !yyhl1820 {
		r.ReadEnd()
	}
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1833 int
	var yyb1833 bool
	var yyhl1833 bool = l >= 0
	yyj1833++
	if yyhl1833 {
		yyb1833 = yyj1833 > l
	} else {
		yyb1833 = r.CheckBreak()
	}
	if yyb1833 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1834 := &x.Ports
		yym1835 := z.DecBinary()
		_ = yym1835
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv1834), d)
		}
	}
	yyj1833++
	if yyhl1833 {
		yyb1833 = yyj1833 > l
	} else {
		yyb1833 = r.CheckBreak()
	}
	if yyb1833 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1836 := &x.Selector
		yym1837 := z.DecBinary()
		_ = yym1837
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1836, false, d)
		}
	}
	yyj1833++
	if yyhl1833 {
		yyb1833 = yyj1833 > l
	} else {
		yyb1833 = r.CheckBreak()
	}
	if yyb1833 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj1833++
	if yyhl1833 {
		yyb1833 = yyj1833 > l
	} else {
		yyb1833 = r.CheckBreak()
	}
	if yyb1833 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj1833++
	if yyhl1833 {
		yyb1833 = yyj1833 > l
	} else {
		yyb1833 = r.CheckBreak()
	}
	if yyb1833 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv1840 := &x.ExternalIPs
		yym1841 := z.DecBinary()
		_ = yym1841
		if false {
		} else {
			z.F.DecSliceStringX(yyv1840, false, d)
		}
	}
	yyj1833++
	if yyhl1833 {
		yyb1833 = yyj1833 > l
	} else {
		yyb1833 = r.CheckBreak()
	}
	if yyb1833 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv1842 := &x.DeprecatedPublicIPs
		yym1843 := z.DecBinary()
		_ = yym1843
		if false {
		} else {
			z.F.DecSliceStringX(yyv1842, false, d)
		}
	}
	yyj1833++
	if yyhl1833 {
		yyb1833 = yyj1833 > l
	} else {
		yyb1833 = r.CheckBreak()
	}
	if yyb1833 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj1833++
	if yyhl1833 {
		yyb1833 = yyj1833 > l
	} else {
		yyb1833 = r.CheckBreak()
	}
	if yyb1833 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	for {
		yyj1833++
		if yyhl1833 {
			yyb1833 = yyj1833 > l
		} else {
			yyb1833 = r.CheckBreak()
		}
		if yyb1833 {
			break
		}
		z.DecStructFieldNotFound(yyj1833-1, "")
	}
	r.ReadEnd()
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1846 := z.EncBinary()
		_ = yym1846
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1847 := !z.EncBinary()
			yy2arr1847 := z.EncBasicHandle().StructToArray
			var yyq1847 [5]bool
			_, _, _ = yysep1847, yyq1847, yy2arr1847
			const yyr1847 bool = false
			yyq1847[0] = x.Name != ""
			yyq1847[1] = x.Protocol != ""
			yyq1847[3] = true
			yyq1847[4] = x.NodePort != 0
			if yyr1847 || yy2arr1847 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1847 int = 1
				for _, b := range yyq1847 {
					if b {
						yynn1847++
					}
				}
				r.EncodeMapStart(yynn1847)
			}
			if yyr1847 || yy2arr1847 {
				if yyq1847[0] {
					yym1849 := z.EncBinary()
					_ = yym1849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1847[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym1850 := z.EncBinary()
					_ = yym1850
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1847 || yy2arr1847 {
				if yyq1847[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1847[1] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1847 || yy2arr1847 {
				yym1853 := z.EncBinary()
				_ = yym1853
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yym1854 := z.EncBinary()
				_ = yym1854
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr1847 || yy2arr1847 {
				if yyq1847[3] {
					yy1856 := &x.TargetPort
					yym1857 := z.EncBinary()
					_ = yym1857
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1856) {
					} else if !yym1857 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1856)
					} else {
						z.EncFallback(yy1856)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1847[3] {
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					yy1858 := &x.TargetPort
					yym1859 := z.EncBinary()
					_ = yym1859
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1858) {
					} else if !yym1859 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1858)
					} else {
						z.EncFallback(yy1858)
					}
				}
			}
			if yyr1847 || yy2arr1847 {
				if yyq1847[4] {
					yym1861 := z.EncBinary()
					_ = yym1861
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1847[4] {
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					yym1862 := z.EncBinary()
					_ = yym1862
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yysep1847 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1863 := z.DecBinary()
	_ = yym1863
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1864 := r.ReadMapStart()
			if yyl1864 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1864, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1864 := r.ReadArrayStart()
			if yyl1864 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1864, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1865Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1865Slc
	var yyhl1865 bool = l >= 0
	for yyj1865 := 0; ; yyj1865++ {
		if yyhl1865 {
			if yyj1865 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1865Slc = r.DecodeBytes(yys1865Slc, true, true)
		yys1865 := string(yys1865Slc)
		switch yys1865 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg5_util.IntOrString{}
			} else {
				yyv1869 := &x.TargetPort
				yym1870 := z.DecBinary()
				_ = yym1870
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1869) {
				} else if !yym1870 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1869)
				} else {
					z.DecFallback(yyv1869, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1865)
		} // end switch yys1865
	} // end for yyj1865
	if !yyhl1865 {
		r.ReadEnd()
	}
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1872 int
	var yyb1872 bool
	var yyhl1872 bool = l >= 0
	yyj1872++
	if yyhl1872 {
		yyb1872 = yyj1872 > l
	} else {
		yyb1872 = r.CheckBreak()
	}
	if yyb1872 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1872++
	if yyhl1872 {
		yyb1872 = yyj1872 > l
	} else {
		yyb1872 = r.CheckBreak()
	}
	if yyb1872 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1872++
	if yyhl1872 {
		yyb1872 = yyj1872 > l
	} else {
		yyb1872 = r.CheckBreak()
	}
	if yyb1872 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1872++
	if yyhl1872 {
		yyb1872 = yyj1872 > l
	} else {
		yyb1872 = r.CheckBreak()
	}
	if yyb1872 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg5_util.IntOrString{}
	} else {
		yyv1876 := &x.TargetPort
		yym1877 := z.DecBinary()
		_ = yym1877
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1876) {
		} else if !yym1877 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1876)
		} else {
			z.DecFallback(yyv1876, false)
		}
	}
	yyj1872++
	if yyhl1872 {
		yyb1872 = yyj1872 > l
	} else {
		yyb1872 = r.CheckBreak()
	}
	if yyb1872 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1872++
		if yyhl1872 {
			yyb1872 = yyj1872 > l
		} else {
			yyb1872 = r.CheckBreak()
		}
		if yyb1872 {
			break
		}
		z.DecStructFieldNotFound(yyj1872-1, "")
	}
	r.ReadEnd()
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1879 := z.EncBinary()
		_ = yym1879
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1880 := !z.EncBinary()
			yy2arr1880 := z.EncBasicHandle().StructToArray
			var yyq1880 [5]bool
			_, _, _ = yysep1880, yyq1880, yy2arr1880
			const yyr1880 bool = false
			yyq1880[0] = x.Kind != ""
			yyq1880[1] = x.APIVersion != ""
			yyq1880[2] = true
			yyq1880[3] = true
			yyq1880[4] = true
			if yyr1880 || yy2arr1880 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1880 int = 0
				for _, b := range yyq1880 {
					if b {
						yynn1880++
					}
				}
				r.EncodeMapStart(yynn1880)
			}
			if yyr1880 || yy2arr1880 {
				if yyq1880[0] {
					yym1882 := z.EncBinary()
					_ = yym1882
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1880[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1883 := z.EncBinary()
					_ = yym1883
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1880 || yy2arr1880 {
				if yyq1880[1] {
					yym1885 := z.EncBinary()
					_ = yym1885
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1880[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1886 := z.EncBinary()
					_ = yym1886
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1880 || yy2arr1880 {
				if yyq1880[2] {
					yy1888 := &x.ObjectMeta
					yy1888.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1880[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1889 := &x.ObjectMeta
					yy1889.CodecEncodeSelf(e)
				}
			}
			if yyr1880 || yy2arr1880 {
				if yyq1880[3] {
					yy1891 := &x.Spec
					yy1891.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1880[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1892 := &x.Spec
					yy1892.CodecEncodeSelf(e)
				}
			}
			if yyr1880 || yy2arr1880 {
				if yyq1880[4] {
					yy1894 := &x.Status
					yy1894.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1880[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1895 := &x.Status
					yy1895.CodecEncodeSelf(e)
				}
			}
			if yysep1880 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1896 := z.DecBinary()
	_ = yym1896
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1897 := r.ReadMapStart()
			if yyl1897 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1897, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1897 := r.ReadArrayStart()
			if yyl1897 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1897, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1898Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1898Slc
	var yyhl1898 bool = l >= 0
	for yyj1898 := 0; ; yyj1898++ {
		if yyhl1898 {
			if yyj1898 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1898Slc = r.DecodeBytes(yys1898Slc, true, true)
		yys1898 := string(yys1898Slc)
		switch yys1898 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1901 := &x.ObjectMeta
				yyv1901.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv1902 := &x.Spec
				yyv1902.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv1903 := &x.Status
				yyv1903.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1898)
		} // end switch yys1898
	} // end for yyj1898
	if !yyhl1898 {
		r.ReadEnd()
	}
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1904 int
	var yyb1904 bool
	var yyhl1904 bool = l >= 0
	yyj1904++
	if yyhl1904 {
		yyb1904 = yyj1904 > l
	} else {
		yyb1904 = r.CheckBreak()
	}
	if yyb1904 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1904++
	if yyhl1904 {
		yyb1904 = yyj1904 > l
	} else {
		yyb1904 = r.CheckBreak()
	}
	if yyb1904 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1904++
	if yyhl1904 {
		yyb1904 = yyj1904 > l
	} else {
		yyb1904 = r.CheckBreak()
	}
	if yyb1904 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1907 := &x.ObjectMeta
		yyv1907.CodecDecodeSelf(d)
	}
	yyj1904++
	if yyhl1904 {
		yyb1904 = yyj1904 > l
	} else {
		yyb1904 = r.CheckBreak()
	}
	if yyb1904 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv1908 := &x.Spec
		yyv1908.CodecDecodeSelf(d)
	}
	yyj1904++
	if yyhl1904 {
		yyb1904 = yyj1904 > l
	} else {
		yyb1904 = r.CheckBreak()
	}
	if yyb1904 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv1909 := &x.Status
		yyv1909.CodecDecodeSelf(d)
	}
	for {
		yyj1904++
		if yyhl1904 {
			yyb1904 = yyj1904 > l
		} else {
			yyb1904 = r.CheckBreak()
		}
		if yyb1904 {
			break
		}
		z.DecStructFieldNotFound(yyj1904-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1910 := z.EncBinary()
		_ = yym1910
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1911 := !z.EncBinary()
			yy2arr1911 := z.EncBasicHandle().StructToArray
			var yyq1911 [4]bool
			_, _, _ = yysep1911, yyq1911, yy2arr1911
			const yyr1911 bool = false
			yyq1911[0] = x.Kind != ""
			yyq1911[1] = x.APIVersion != ""
			yyq1911[2] = true
			if yyr1911 || yy2arr1911 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1911 int = 1
				for _, b := range yyq1911 {
					if b {
						yynn1911++
					}
				}
				r.EncodeMapStart(yynn1911)
			}
			if yyr1911 || yy2arr1911 {
				if yyq1911[0] {
					yym1913 := z.EncBinary()
					_ = yym1913
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1911[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1914 := z.EncBinary()
					_ = yym1914
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1911 || yy2arr1911 {
				if yyq1911[1] {
					yym1916 := z.EncBinary()
					_ = yym1916
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1911[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1917 := z.EncBinary()
					_ = yym1917
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1911 || yy2arr1911 {
				if yyq1911[2] {
					yy1919 := &x.ListMeta
					yym1920 := z.EncBinary()
					_ = yym1920
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1919) {
					} else {
						z.EncFallback(yy1919)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1911[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1921 := &x.ListMeta
					yym1922 := z.EncBinary()
					_ = yym1922
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1921) {
					} else {
						z.EncFallback(yy1921)
					}
				}
			}
			if yyr1911 || yy2arr1911 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1924 := z.EncBinary()
					_ = yym1924
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1925 := z.EncBinary()
					_ = yym1925
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yysep1911 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1926 := z.DecBinary()
	_ = yym1926
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1927 := r.ReadMapStart()
			if yyl1927 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1927, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1927 := r.ReadArrayStart()
			if yyl1927 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1927, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1928Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1928Slc
	var yyhl1928 bool = l >= 0
	for yyj1928 := 0; ; yyj1928++ {
		if yyhl1928 {
			if yyj1928 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1928Slc = r.DecodeBytes(yys1928Slc, true, true)
		yys1928 := string(yys1928Slc)
		switch yys1928 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1931 := &x.ListMeta
				yym1932 := z.DecBinary()
				_ = yym1932
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1931) {
				} else {
					z.DecFallback(yyv1931, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1933 := &x.Items
				yym1934 := z.DecBinary()
				_ = yym1934
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv1933), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1928)
		} // end switch yys1928
	} // end for yyj1928
	if !yyhl1928 {
		r.ReadEnd()
	}
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1935 int
	var yyb1935 bool
	var yyhl1935 bool = l >= 0
	yyj1935++
	if yyhl1935 {
		yyb1935 = yyj1935 > l
	} else {
		yyb1935 = r.CheckBreak()
	}
	if yyb1935 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1935++
	if yyhl1935 {
		yyb1935 = yyj1935 > l
	} else {
		yyb1935 = r.CheckBreak()
	}
	if yyb1935 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1935++
	if yyhl1935 {
		yyb1935 = yyj1935 > l
	} else {
		yyb1935 = r.CheckBreak()
	}
	if yyb1935 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1938 := &x.ListMeta
		yym1939 := z.DecBinary()
		_ = yym1939
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1938) {
		} else {
			z.DecFallback(yyv1938, false)
		}
	}
	yyj1935++
	if yyhl1935 {
		yyb1935 = yyj1935 > l
	} else {
		yyb1935 = r.CheckBreak()
	}
	if yyb1935 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1940 := &x.Items
		yym1941 := z.DecBinary()
		_ = yym1941
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv1940), d)
		}
	}
	for {
		yyj1935++
		if yyhl1935 {
			yyb1935 = yyj1935 > l
		} else {
			yyb1935 = r.CheckBreak()
		}
		if yyb1935 {
			break
		}
		z.DecStructFieldNotFound(yyj1935-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1942 := z.EncBinary()
		_ = yym1942
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1943 := !z.EncBinary()
			yy2arr1943 := z.EncBasicHandle().StructToArray
			var yyq1943 [5]bool
			_, _, _ = yysep1943, yyq1943, yy2arr1943
			const yyr1943 bool = false
			yyq1943[0] = x.Kind != ""
			yyq1943[1] = x.APIVersion != ""
			yyq1943[2] = true
			yyq1943[3] = len(x.Secrets) != 0
			yyq1943[4] = len(x.ImagePullSecrets) != 0
			if yyr1943 || yy2arr1943 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1943 int = 0
				for _, b := range yyq1943 {
					if b {
						yynn1943++
					}
				}
				r.EncodeMapStart(yynn1943)
			}
			if yyr1943 || yy2arr1943 {
				if yyq1943[0] {
					yym1945 := z.EncBinary()
					_ = yym1945
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1943[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1946 := z.EncBinary()
					_ = yym1946
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1943 || yy2arr1943 {
				if yyq1943[1] {
					yym1948 := z.EncBinary()
					_ = yym1948
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1943[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1949 := z.EncBinary()
					_ = yym1949
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1943 || yy2arr1943 {
				if yyq1943[2] {
					yy1951 := &x.ObjectMeta
					yy1951.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1943[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1952 := &x.ObjectMeta
					yy1952.CodecEncodeSelf(e)
				}
			}
			if yyr1943 || yy2arr1943 {
				if yyq1943[3] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym1954 := z.EncBinary()
						_ = yym1954
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1943[3] {
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym1955 := z.EncBinary()
						_ = yym1955
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr1943 || yy2arr1943 {
				if yyq1943[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1957 := z.EncBinary()
						_ = yym1957
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1943[4] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1958 := z.EncBinary()
						_ = yym1958
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep1943 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1959 := z.DecBinary()
	_ = yym1959
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1960 := r.ReadMapStart()
			if yyl1960 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1960, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1960 := r.ReadArrayStart()
			if yyl1960 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1960, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1961Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1961Slc
	var yyhl1961 bool = l >= 0
	for yyj1961 := 0; ; yyj1961++ {
		if yyhl1961 {
			if yyj1961 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1961Slc = r.DecodeBytes(yys1961Slc, true, true)
		yys1961 := string(yys1961Slc)
		switch yys1961 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1964 := &x.ObjectMeta
				yyv1964.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv1965 := &x.Secrets
				yym1966 := z.DecBinary()
				_ = yym1966
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv1965), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1967 := &x.ImagePullSecrets
				yym1968 := z.DecBinary()
				_ = yym1968
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1967), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1961)
		} // end switch yys1961
	} // end for yyj1961
	if !yyhl1961 {
		r.ReadEnd()
	}
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1969 int
	var yyb1969 bool
	var yyhl1969 bool = l >= 0
	yyj1969++
	if yyhl1969 {
		yyb1969 = yyj1969 > l
	} else {
		yyb1969 = r.CheckBreak()
	}
	if yyb1969 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1969++
	if yyhl1969 {
		yyb1969 = yyj1969 > l
	} else {
		yyb1969 = r.CheckBreak()
	}
	if yyb1969 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1969++
	if yyhl1969 {
		yyb1969 = yyj1969 > l
	} else {
		yyb1969 = r.CheckBreak()
	}
	if yyb1969 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1972 := &x.ObjectMeta
		yyv1972.CodecDecodeSelf(d)
	}
	yyj1969++
	if yyhl1969 {
		yyb1969 = yyj1969 > l
	} else {
		yyb1969 = r.CheckBreak()
	}
	if yyb1969 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv1973 := &x.Secrets
		yym1974 := z.DecBinary()
		_ = yym1974
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv1973), d)
		}
	}
	yyj1969++
	if yyhl1969 {
		yyb1969 = yyj1969 > l
	} else {
		yyb1969 = r.CheckBreak()
	}
	if yyb1969 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1975 := &x.ImagePullSecrets
		yym1976 := z.DecBinary()
		_ = yym1976
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1975), d)
		}
	}
	for {
		yyj1969++
		if yyhl1969 {
			yyb1969 = yyj1969 > l
		} else {
			yyb1969 = r.CheckBreak()
		}
		if yyb1969 {
			break
		}
		z.DecStructFieldNotFound(yyj1969-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1977 := z.EncBinary()
		_ = yym1977
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1978 := !z.EncBinary()
			yy2arr1978 := z.EncBasicHandle().StructToArray
			var yyq1978 [4]bool
			_, _, _ = yysep1978, yyq1978, yy2arr1978
			const yyr1978 bool = false
			yyq1978[0] = x.Kind != ""
			yyq1978[1] = x.APIVersion != ""
			yyq1978[2] = true
			if yyr1978 || yy2arr1978 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1978 int = 1
				for _, b := range yyq1978 {
					if b {
						yynn1978++
					}
				}
				r.EncodeMapStart(yynn1978)
			}
			if yyr1978 || yy2arr1978 {
				if yyq1978[0] {
					yym1980 := z.EncBinary()
					_ = yym1980
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1978[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1981 := z.EncBinary()
					_ = yym1981
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1978 || yy2arr1978 {
				if yyq1978[1] {
					yym1983 := z.EncBinary()
					_ = yym1983
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1978[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1984 := z.EncBinary()
					_ = yym1984
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1978 || yy2arr1978 {
				if yyq1978[2] {
					yy1986 := &x.ListMeta
					yym1987 := z.EncBinary()
					_ = yym1987
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1986) {
					} else {
						z.EncFallback(yy1986)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1978[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1988 := &x.ListMeta
					yym1989 := z.EncBinary()
					_ = yym1989
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1988) {
					} else {
						z.EncFallback(yy1988)
					}
				}
			}
			if yyr1978 || yy2arr1978 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1991 := z.EncBinary()
					_ = yym1991
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1992 := z.EncBinary()
					_ = yym1992
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yysep1978 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1993 := z.DecBinary()
	_ = yym1993
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1994 := r.ReadMapStart()
			if yyl1994 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1994, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1994 := r.ReadArrayStart()
			if yyl1994 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1994, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1995Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1995Slc
	var yyhl1995 bool = l >= 0
	for yyj1995 := 0; ; yyj1995++ {
		if yyhl1995 {
			if yyj1995 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1995Slc = r.DecodeBytes(yys1995Slc, true, true)
		yys1995 := string(yys1995Slc)
		switch yys1995 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1998 := &x.ListMeta
				yym1999 := z.DecBinary()
				_ = yym1999
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1998) {
				} else {
					z.DecFallback(yyv1998, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2000 := &x.Items
				yym2001 := z.DecBinary()
				_ = yym2001
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2000), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1995)
		} // end switch yys1995
	} // end for yyj1995
	if !yyhl1995 {
		r.ReadEnd()
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2002 int
	var yyb2002 bool
	var yyhl2002 bool = l >= 0
	yyj2002++
	if yyhl2002 {
		yyb2002 = yyj2002 > l
	} else {
		yyb2002 = r.CheckBreak()
	}
	if yyb2002 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2002++
	if yyhl2002 {
		yyb2002 = yyj2002 > l
	} else {
		yyb2002 = r.CheckBreak()
	}
	if yyb2002 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2002++
	if yyhl2002 {
		yyb2002 = yyj2002 > l
	} else {
		yyb2002 = r.CheckBreak()
	}
	if yyb2002 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2005 := &x.ListMeta
		yym2006 := z.DecBinary()
		_ = yym2006
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2005) {
		} else {
			z.DecFallback(yyv2005, false)
		}
	}
	yyj2002++
	if yyhl2002 {
		yyb2002 = yyj2002 > l
	} else {
		yyb2002 = r.CheckBreak()
	}
	if yyb2002 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2007 := &x.Items
		yym2008 := z.DecBinary()
		_ = yym2008
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2007), d)
		}
	}
	for {
		yyj2002++
		if yyhl2002 {
			yyb2002 = yyj2002 > l
		} else {
			yyb2002 = r.CheckBreak()
		}
		if yyb2002 {
			break
		}
		z.DecStructFieldNotFound(yyj2002-1, "")
	}
	r.ReadEnd()
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2009 := z.EncBinary()
		_ = yym2009
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2010 := !z.EncBinary()
			yy2arr2010 := z.EncBasicHandle().StructToArray
			var yyq2010 [4]bool
			_, _, _ = yysep2010, yyq2010, yy2arr2010
			const yyr2010 bool = false
			yyq2010[0] = x.Kind != ""
			yyq2010[1] = x.APIVersion != ""
			yyq2010[2] = true
			if yyr2010 || yy2arr2010 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2010 int = 1
				for _, b := range yyq2010 {
					if b {
						yynn2010++
					}
				}
				r.EncodeMapStart(yynn2010)
			}
			if yyr2010 || yy2arr2010 {
				if yyq2010[0] {
					yym2012 := z.EncBinary()
					_ = yym2012
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2010[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2013 := z.EncBinary()
					_ = yym2013
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2010 || yy2arr2010 {
				if yyq2010[1] {
					yym2015 := z.EncBinary()
					_ = yym2015
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2010[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2016 := z.EncBinary()
					_ = yym2016
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2010 || yy2arr2010 {
				if yyq2010[2] {
					yy2018 := &x.ObjectMeta
					yy2018.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2010[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2019 := &x.ObjectMeta
					yy2019.CodecEncodeSelf(e)
				}
			}
			if yyr2010 || yy2arr2010 {
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2021 := z.EncBinary()
					_ = yym2021
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2022 := z.EncBinary()
					_ = yym2022
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yysep2010 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2023 := z.DecBinary()
	_ = yym2023
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2024 := r.ReadMapStart()
			if yyl2024 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2024, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2024 := r.ReadArrayStart()
			if yyl2024 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2024, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2025Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2025Slc
	var yyhl2025 bool = l >= 0
	for yyj2025 := 0; ; yyj2025++ {
		if yyhl2025 {
			if yyj2025 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2025Slc = r.DecodeBytes(yys2025Slc, true, true)
		yys2025 := string(yys2025Slc)
		switch yys2025 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2028 := &x.ObjectMeta
				yyv2028.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2029 := &x.Subsets
				yym2030 := z.DecBinary()
				_ = yym2030
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2029), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2025)
		} // end switch yys2025
	} // end for yyj2025
	if !yyhl2025 {
		r.ReadEnd()
	}
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2031 int
	var yyb2031 bool
	var yyhl2031 bool = l >= 0
	yyj2031++
	if yyhl2031 {
		yyb2031 = yyj2031 > l
	} else {
		yyb2031 = r.CheckBreak()
	}
	if yyb2031 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2031++
	if yyhl2031 {
		yyb2031 = yyj2031 > l
	} else {
		yyb2031 = r.CheckBreak()
	}
	if yyb2031 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2031++
	if yyhl2031 {
		yyb2031 = yyj2031 > l
	} else {
		yyb2031 = r.CheckBreak()
	}
	if yyb2031 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2034 := &x.ObjectMeta
		yyv2034.CodecDecodeSelf(d)
	}
	yyj2031++
	if yyhl2031 {
		yyb2031 = yyj2031 > l
	} else {
		yyb2031 = r.CheckBreak()
	}
	if yyb2031 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2035 := &x.Subsets
		yym2036 := z.DecBinary()
		_ = yym2036
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2035), d)
		}
	}
	for {
		yyj2031++
		if yyhl2031 {
			yyb2031 = yyj2031 > l
		} else {
			yyb2031 = r.CheckBreak()
		}
		if yyb2031 {
			break
		}
		z.DecStructFieldNotFound(yyj2031-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2037 := z.EncBinary()
		_ = yym2037
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2038 := !z.EncBinary()
			yy2arr2038 := z.EncBasicHandle().StructToArray
			var yyq2038 [3]bool
			_, _, _ = yysep2038, yyq2038, yy2arr2038
			const yyr2038 bool = false
			yyq2038[0] = len(x.Addresses) != 0
			yyq2038[1] = len(x.NotReadyAddresses) != 0
			yyq2038[2] = len(x.Ports) != 0
			if yyr2038 || yy2arr2038 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2038 int = 0
				for _, b := range yyq2038 {
					if b {
						yynn2038++
					}
				}
				r.EncodeMapStart(yynn2038)
			}
			if yyr2038 || yy2arr2038 {
				if yyq2038[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2040 := z.EncBinary()
						_ = yym2040
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2038[0] {
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2041 := z.EncBinary()
						_ = yym2041
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2038 || yy2arr2038 {
				if yyq2038[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2043 := z.EncBinary()
						_ = yym2043
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2038[1] {
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2044 := z.EncBinary()
						_ = yym2044
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2038 || yy2arr2038 {
				if yyq2038[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2046 := z.EncBinary()
						_ = yym2046
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2038[2] {
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2047 := z.EncBinary()
						_ = yym2047
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yysep2038 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2048 := z.DecBinary()
	_ = yym2048
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2049 := r.ReadMapStart()
			if yyl2049 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2049, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2049 := r.ReadArrayStart()
			if yyl2049 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2049, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2050Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2050Slc
	var yyhl2050 bool = l >= 0
	for yyj2050 := 0; ; yyj2050++ {
		if yyhl2050 {
			if yyj2050 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2050Slc = r.DecodeBytes(yys2050Slc, true, true)
		yys2050 := string(yys2050Slc)
		switch yys2050 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2051 := &x.Addresses
				yym2052 := z.DecBinary()
				_ = yym2052
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2051), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2053 := &x.NotReadyAddresses
				yym2054 := z.DecBinary()
				_ = yym2054
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2053), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2055 := &x.Ports
				yym2056 := z.DecBinary()
				_ = yym2056
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2055), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2050)
		} // end switch yys2050
	} // end for yyj2050
	if !yyhl2050 {
		r.ReadEnd()
	}
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2057 int
	var yyb2057 bool
	var yyhl2057 bool = l >= 0
	yyj2057++
	if yyhl2057 {
		yyb2057 = yyj2057 > l
	} else {
		yyb2057 = r.CheckBreak()
	}
	if yyb2057 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2058 := &x.Addresses
		yym2059 := z.DecBinary()
		_ = yym2059
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2058), d)
		}
	}
	yyj2057++
	if yyhl2057 {
		yyb2057 = yyj2057 > l
	} else {
		yyb2057 = r.CheckBreak()
	}
	if yyb2057 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2060 := &x.NotReadyAddresses
		yym2061 := z.DecBinary()
		_ = yym2061
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2060), d)
		}
	}
	yyj2057++
	if yyhl2057 {
		yyb2057 = yyj2057 > l
	} else {
		yyb2057 = r.CheckBreak()
	}
	if yyb2057 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2062 := &x.Ports
		yym2063 := z.DecBinary()
		_ = yym2063
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2062), d)
		}
	}
	for {
		yyj2057++
		if yyhl2057 {
			yyb2057 = yyj2057 > l
		} else {
			yyb2057 = r.CheckBreak()
		}
		if yyb2057 {
			break
		}
		z.DecStructFieldNotFound(yyj2057-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2064 := z.EncBinary()
		_ = yym2064
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2065 := !z.EncBinary()
			yy2arr2065 := z.EncBasicHandle().StructToArray
			var yyq2065 [2]bool
			_, _, _ = yysep2065, yyq2065, yy2arr2065
			const yyr2065 bool = false
			yyq2065[1] = x.TargetRef != nil
			if yyr2065 || yy2arr2065 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2065 int = 1
				for _, b := range yyq2065 {
					if b {
						yynn2065++
					}
				}
				r.EncodeMapStart(yynn2065)
			}
			if yyr2065 || yy2arr2065 {
				yym2067 := z.EncBinary()
				_ = yym2067
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				yym2068 := z.EncBinary()
				_ = yym2068
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2065 || yy2arr2065 {
				if yyq2065[1] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2065[1] {
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yysep2065 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2070 := z.DecBinary()
	_ = yym2070
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2071 := r.ReadMapStart()
			if yyl2071 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2071, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2071 := r.ReadArrayStart()
			if yyl2071 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2071, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2072Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2072Slc
	var yyhl2072 bool = l >= 0
	for yyj2072 := 0; ; yyj2072++ {
		if yyhl2072 {
			if yyj2072 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2072Slc = r.DecodeBytes(yys2072Slc, true, true)
		yys2072 := string(yys2072Slc)
		switch yys2072 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2072)
		} // end switch yys2072
	} // end for yyj2072
	if !yyhl2072 {
		r.ReadEnd()
	}
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2075 int
	var yyb2075 bool
	var yyhl2075 bool = l >= 0
	yyj2075++
	if yyhl2075 {
		yyb2075 = yyj2075 > l
	} else {
		yyb2075 = r.CheckBreak()
	}
	if yyb2075 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2075++
	if yyhl2075 {
		yyb2075 = yyj2075 > l
	} else {
		yyb2075 = r.CheckBreak()
	}
	if yyb2075 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2075++
		if yyhl2075 {
			yyb2075 = yyj2075 > l
		} else {
			yyb2075 = r.CheckBreak()
		}
		if yyb2075 {
			break
		}
		z.DecStructFieldNotFound(yyj2075-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2078 := z.EncBinary()
		_ = yym2078
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2079 := !z.EncBinary()
			yy2arr2079 := z.EncBasicHandle().StructToArray
			var yyq2079 [3]bool
			_, _, _ = yysep2079, yyq2079, yy2arr2079
			const yyr2079 bool = false
			yyq2079[0] = x.Name != ""
			yyq2079[2] = x.Protocol != ""
			if yyr2079 || yy2arr2079 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2079 int = 1
				for _, b := range yyq2079 {
					if b {
						yynn2079++
					}
				}
				r.EncodeMapStart(yynn2079)
			}
			if yyr2079 || yy2arr2079 {
				if yyq2079[0] {
					yym2081 := z.EncBinary()
					_ = yym2081
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2079[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2082 := z.EncBinary()
					_ = yym2082
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2079 || yy2arr2079 {
				yym2084 := z.EncBinary()
				_ = yym2084
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yym2085 := z.EncBinary()
				_ = yym2085
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2079 || yy2arr2079 {
				if yyq2079[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2079[2] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yysep2079 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2087 := z.DecBinary()
	_ = yym2087
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2088 := r.ReadMapStart()
			if yyl2088 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2088, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2088 := r.ReadArrayStart()
			if yyl2088 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2088, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2089Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2089Slc
	var yyhl2089 bool = l >= 0
	for yyj2089 := 0; ; yyj2089++ {
		if yyhl2089 {
			if yyj2089 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2089Slc = r.DecodeBytes(yys2089Slc, true, true)
		yys2089 := string(yys2089Slc)
		switch yys2089 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2089)
		} // end switch yys2089
	} // end for yyj2089
	if !yyhl2089 {
		r.ReadEnd()
	}
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2093 int
	var yyb2093 bool
	var yyhl2093 bool = l >= 0
	yyj2093++
	if yyhl2093 {
		yyb2093 = yyj2093 > l
	} else {
		yyb2093 = r.CheckBreak()
	}
	if yyb2093 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2093++
	if yyhl2093 {
		yyb2093 = yyj2093 > l
	} else {
		yyb2093 = r.CheckBreak()
	}
	if yyb2093 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2093++
	if yyhl2093 {
		yyb2093 = yyj2093 > l
	} else {
		yyb2093 = r.CheckBreak()
	}
	if yyb2093 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2093++
		if yyhl2093 {
			yyb2093 = yyj2093 > l
		} else {
			yyb2093 = r.CheckBreak()
		}
		if yyb2093 {
			break
		}
		z.DecStructFieldNotFound(yyj2093-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2097 := z.EncBinary()
		_ = yym2097
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2098 := !z.EncBinary()
			yy2arr2098 := z.EncBasicHandle().StructToArray
			var yyq2098 [4]bool
			_, _, _ = yysep2098, yyq2098, yy2arr2098
			const yyr2098 bool = false
			yyq2098[0] = x.Kind != ""
			yyq2098[1] = x.APIVersion != ""
			yyq2098[2] = true
			if yyr2098 || yy2arr2098 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2098 int = 1
				for _, b := range yyq2098 {
					if b {
						yynn2098++
					}
				}
				r.EncodeMapStart(yynn2098)
			}
			if yyr2098 || yy2arr2098 {
				if yyq2098[0] {
					yym2100 := z.EncBinary()
					_ = yym2100
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2098[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2101 := z.EncBinary()
					_ = yym2101
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2098 || yy2arr2098 {
				if yyq2098[1] {
					yym2103 := z.EncBinary()
					_ = yym2103
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2098[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2104 := z.EncBinary()
					_ = yym2104
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2098 || yy2arr2098 {
				if yyq2098[2] {
					yy2106 := &x.ListMeta
					yym2107 := z.EncBinary()
					_ = yym2107
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2106) {
					} else {
						z.EncFallback(yy2106)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2098[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2108 := &x.ListMeta
					yym2109 := z.EncBinary()
					_ = yym2109
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2108) {
					} else {
						z.EncFallback(yy2108)
					}
				}
			}
			if yyr2098 || yy2arr2098 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2111 := z.EncBinary()
					_ = yym2111
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2112 := z.EncBinary()
					_ = yym2112
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yysep2098 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2113 := z.DecBinary()
	_ = yym2113
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2114 := r.ReadMapStart()
			if yyl2114 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2114, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2114 := r.ReadArrayStart()
			if yyl2114 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2114, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2115Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2115Slc
	var yyhl2115 bool = l >= 0
	for yyj2115 := 0; ; yyj2115++ {
		if yyhl2115 {
			if yyj2115 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2115Slc = r.DecodeBytes(yys2115Slc, true, true)
		yys2115 := string(yys2115Slc)
		switch yys2115 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2118 := &x.ListMeta
				yym2119 := z.DecBinary()
				_ = yym2119
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2118) {
				} else {
					z.DecFallback(yyv2118, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2120 := &x.Items
				yym2121 := z.DecBinary()
				_ = yym2121
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2120), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2115)
		} // end switch yys2115
	} // end for yyj2115
	if !yyhl2115 {
		r.ReadEnd()
	}
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2122 int
	var yyb2122 bool
	var yyhl2122 bool = l >= 0
	yyj2122++
	if yyhl2122 {
		yyb2122 = yyj2122 > l
	} else {
		yyb2122 = r.CheckBreak()
	}
	if yyb2122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2122++
	if yyhl2122 {
		yyb2122 = yyj2122 > l
	} else {
		yyb2122 = r.CheckBreak()
	}
	if yyb2122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2122++
	if yyhl2122 {
		yyb2122 = yyj2122 > l
	} else {
		yyb2122 = r.CheckBreak()
	}
	if yyb2122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2125 := &x.ListMeta
		yym2126 := z.DecBinary()
		_ = yym2126
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2125) {
		} else {
			z.DecFallback(yyv2125, false)
		}
	}
	yyj2122++
	if yyhl2122 {
		yyb2122 = yyj2122 > l
	} else {
		yyb2122 = r.CheckBreak()
	}
	if yyb2122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2127 := &x.Items
		yym2128 := z.DecBinary()
		_ = yym2128
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2127), d)
		}
	}
	for {
		yyj2122++
		if yyhl2122 {
			yyb2122 = yyj2122 > l
		} else {
			yyb2122 = r.CheckBreak()
		}
		if yyb2122 {
			break
		}
		z.DecStructFieldNotFound(yyj2122-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2129 := z.EncBinary()
		_ = yym2129
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2130 := !z.EncBinary()
			yy2arr2130 := z.EncBasicHandle().StructToArray
			var yyq2130 [4]bool
			_, _, _ = yysep2130, yyq2130, yy2arr2130
			const yyr2130 bool = false
			yyq2130[0] = x.PodCIDR != ""
			yyq2130[1] = x.ExternalID != ""
			yyq2130[2] = x.ProviderID != ""
			yyq2130[3] = x.Unschedulable != false
			if yyr2130 || yy2arr2130 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2130 int = 0
				for _, b := range yyq2130 {
					if b {
						yynn2130++
					}
				}
				r.EncodeMapStart(yynn2130)
			}
			if yyr2130 || yy2arr2130 {
				if yyq2130[0] {
					yym2132 := z.EncBinary()
					_ = yym2132
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2130[0] {
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					yym2133 := z.EncBinary()
					_ = yym2133
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2130 || yy2arr2130 {
				if yyq2130[1] {
					yym2135 := z.EncBinary()
					_ = yym2135
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2130[1] {
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					yym2136 := z.EncBinary()
					_ = yym2136
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2130 || yy2arr2130 {
				if yyq2130[2] {
					yym2138 := z.EncBinary()
					_ = yym2138
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2130[2] {
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					yym2139 := z.EncBinary()
					_ = yym2139
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2130 || yy2arr2130 {
				if yyq2130[3] {
					yym2141 := z.EncBinary()
					_ = yym2141
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2130[3] {
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					yym2142 := z.EncBinary()
					_ = yym2142
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yysep2130 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2143 := z.DecBinary()
	_ = yym2143
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2144 := r.ReadMapStart()
			if yyl2144 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2144, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2144 := r.ReadArrayStart()
			if yyl2144 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2144, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2145Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2145Slc
	var yyhl2145 bool = l >= 0
	for yyj2145 := 0; ; yyj2145++ {
		if yyhl2145 {
			if yyj2145 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2145Slc = r.DecodeBytes(yys2145Slc, true, true)
		yys2145 := string(yys2145Slc)
		switch yys2145 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2145)
		} // end switch yys2145
	} // end for yyj2145
	if !yyhl2145 {
		r.ReadEnd()
	}
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2150 int
	var yyb2150 bool
	var yyhl2150 bool = l >= 0
	yyj2150++
	if yyhl2150 {
		yyb2150 = yyj2150 > l
	} else {
		yyb2150 = r.CheckBreak()
	}
	if yyb2150 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2150++
	if yyhl2150 {
		yyb2150 = yyj2150 > l
	} else {
		yyb2150 = r.CheckBreak()
	}
	if yyb2150 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2150++
	if yyhl2150 {
		yyb2150 = yyj2150 > l
	} else {
		yyb2150 = r.CheckBreak()
	}
	if yyb2150 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2150++
	if yyhl2150 {
		yyb2150 = yyj2150 > l
	} else {
		yyb2150 = r.CheckBreak()
	}
	if yyb2150 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2150++
		if yyhl2150 {
			yyb2150 = yyj2150 > l
		} else {
			yyb2150 = r.CheckBreak()
		}
		if yyb2150 {
			break
		}
		z.DecStructFieldNotFound(yyj2150-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2155 := z.EncBinary()
		_ = yym2155
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2156 := !z.EncBinary()
			yy2arr2156 := z.EncBasicHandle().StructToArray
			var yyq2156 [1]bool
			_, _, _ = yysep2156, yyq2156, yy2arr2156
			const yyr2156 bool = false
			if yyr2156 || yy2arr2156 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2156 int = 1
				for _, b := range yyq2156 {
					if b {
						yynn2156++
					}
				}
				r.EncodeMapStart(yynn2156)
			}
			if yyr2156 || yy2arr2156 {
				yym2158 := z.EncBinary()
				_ = yym2158
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				yym2159 := z.EncBinary()
				_ = yym2159
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yysep2156 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2160 := z.DecBinary()
	_ = yym2160
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2161 := r.ReadMapStart()
			if yyl2161 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2161, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2161 := r.ReadArrayStart()
			if yyl2161 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2161, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2162Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2162Slc
	var yyhl2162 bool = l >= 0
	for yyj2162 := 0; ; yyj2162++ {
		if yyhl2162 {
			if yyj2162 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2162Slc = r.DecodeBytes(yys2162Slc, true, true)
		yys2162 := string(yys2162Slc)
		switch yys2162 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2162)
		} // end switch yys2162
	} // end for yyj2162
	if !yyhl2162 {
		r.ReadEnd()
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2164 int
	var yyb2164 bool
	var yyhl2164 bool = l >= 0
	yyj2164++
	if yyhl2164 {
		yyb2164 = yyj2164 > l
	} else {
		yyb2164 = r.CheckBreak()
	}
	if yyb2164 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2164++
		if yyhl2164 {
			yyb2164 = yyj2164 > l
		} else {
			yyb2164 = r.CheckBreak()
		}
		if yyb2164 {
			break
		}
		z.DecStructFieldNotFound(yyj2164-1, "")
	}
	r.ReadEnd()
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2166 := z.EncBinary()
		_ = yym2166
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2167 := !z.EncBinary()
			yy2arr2167 := z.EncBasicHandle().StructToArray
			var yyq2167 [1]bool
			_, _, _ = yysep2167, yyq2167, yy2arr2167
			const yyr2167 bool = false
			yyq2167[0] = true
			if yyr2167 || yy2arr2167 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2167 int = 0
				for _, b := range yyq2167 {
					if b {
						yynn2167++
					}
				}
				r.EncodeMapStart(yynn2167)
			}
			if yyr2167 || yy2arr2167 {
				if yyq2167[0] {
					yy2169 := &x.KubeletEndpoint
					yy2169.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2167[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					yy2170 := &x.KubeletEndpoint
					yy2170.CodecEncodeSelf(e)
				}
			}
			if yysep2167 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2171 := z.DecBinary()
	_ = yym2171
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2172 := r.ReadMapStart()
			if yyl2172 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2172, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2172 := r.ReadArrayStart()
			if yyl2172 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2172, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2173Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2173Slc
	var yyhl2173 bool = l >= 0
	for yyj2173 := 0; ; yyj2173++ {
		if yyhl2173 {
			if yyj2173 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2173Slc = r.DecodeBytes(yys2173Slc, true, true)
		yys2173 := string(yys2173Slc)
		switch yys2173 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2174 := &x.KubeletEndpoint
				yyv2174.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2173)
		} // end switch yys2173
	} // end for yyj2173
	if !yyhl2173 {
		r.ReadEnd()
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2175 int
	var yyb2175 bool
	var yyhl2175 bool = l >= 0
	yyj2175++
	if yyhl2175 {
		yyb2175 = yyj2175 > l
	} else {
		yyb2175 = r.CheckBreak()
	}
	if yyb2175 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2176 := &x.KubeletEndpoint
		yyv2176.CodecDecodeSelf(d)
	}
	for {
		yyj2175++
		if yyhl2175 {
			yyb2175 = yyj2175 > l
		} else {
			yyb2175 = r.CheckBreak()
		}
		if yyb2175 {
			break
		}
		z.DecStructFieldNotFound(yyj2175-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2177 := z.EncBinary()
		_ = yym2177
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2178 := !z.EncBinary()
			yy2arr2178 := z.EncBasicHandle().StructToArray
			var yyq2178 [8]bool
			_, _, _ = yysep2178, yyq2178, yy2arr2178
			const yyr2178 bool = false
			if yyr2178 || yy2arr2178 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2178 int = 8
				for _, b := range yyq2178 {
					if b {
						yynn2178++
					}
				}
				r.EncodeMapStart(yynn2178)
			}
			if yyr2178 || yy2arr2178 {
				yym2180 := z.EncBinary()
				_ = yym2180
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				yym2181 := z.EncBinary()
				_ = yym2181
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2178 || yy2arr2178 {
				yym2183 := z.EncBinary()
				_ = yym2183
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				yym2184 := z.EncBinary()
				_ = yym2184
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2178 || yy2arr2178 {
				yym2186 := z.EncBinary()
				_ = yym2186
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				yym2187 := z.EncBinary()
				_ = yym2187
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2178 || yy2arr2178 {
				yym2189 := z.EncBinary()
				_ = yym2189
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				yym2190 := z.EncBinary()
				_ = yym2190
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2178 || yy2arr2178 {
				yym2192 := z.EncBinary()
				_ = yym2192
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				yym2193 := z.EncBinary()
				_ = yym2193
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			}
			if yyr2178 || yy2arr2178 {
				yym2195 := z.EncBinary()
				_ = yym2195
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				yym2196 := z.EncBinary()
				_ = yym2196
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2178 || yy2arr2178 {
				yym2198 := z.EncBinary()
				_ = yym2198
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				yym2199 := z.EncBinary()
				_ = yym2199
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2178 || yy2arr2178 {
				yym2201 := z.EncBinary()
				_ = yym2201
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				yym2202 := z.EncBinary()
				_ = yym2202
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yysep2178 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2203 := z.DecBinary()
	_ = yym2203
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2204 := r.ReadMapStart()
			if yyl2204 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2204, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2204 := r.ReadArrayStart()
			if yyl2204 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2204, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2205Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2205Slc
	var yyhl2205 bool = l >= 0
	for yyj2205 := 0; ; yyj2205++ {
		if yyhl2205 {
			if yyj2205 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2205Slc = r.DecodeBytes(yys2205Slc, true, true)
		yys2205 := string(yys2205Slc)
		switch yys2205 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OsImage = ""
			} else {
				x.OsImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2205)
		} // end switch yys2205
	} // end for yyj2205
	if !yyhl2205 {
		r.ReadEnd()
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2214 int
	var yyb2214 bool
	var yyhl2214 bool = l >= 0
	yyj2214++
	if yyhl2214 {
		yyb2214 = yyj2214 > l
	} else {
		yyb2214 = r.CheckBreak()
	}
	if yyb2214 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2214++
	if yyhl2214 {
		yyb2214 = yyj2214 > l
	} else {
		yyb2214 = r.CheckBreak()
	}
	if yyb2214 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2214++
	if yyhl2214 {
		yyb2214 = yyj2214 > l
	} else {
		yyb2214 = r.CheckBreak()
	}
	if yyb2214 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2214++
	if yyhl2214 {
		yyb2214 = yyj2214 > l
	} else {
		yyb2214 = r.CheckBreak()
	}
	if yyb2214 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2214++
	if yyhl2214 {
		yyb2214 = yyj2214 > l
	} else {
		yyb2214 = r.CheckBreak()
	}
	if yyb2214 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.OsImage = ""
	} else {
		x.OsImage = string(r.DecodeString())
	}
	yyj2214++
	if yyhl2214 {
		yyb2214 = yyj2214 > l
	} else {
		yyb2214 = r.CheckBreak()
	}
	if yyb2214 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2214++
	if yyhl2214 {
		yyb2214 = yyj2214 > l
	} else {
		yyb2214 = r.CheckBreak()
	}
	if yyb2214 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2214++
	if yyhl2214 {
		yyb2214 = yyj2214 > l
	} else {
		yyb2214 = r.CheckBreak()
	}
	if yyb2214 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2214++
		if yyhl2214 {
			yyb2214 = yyj2214 > l
		} else {
			yyb2214 = r.CheckBreak()
		}
		if yyb2214 {
			break
		}
		z.DecStructFieldNotFound(yyj2214-1, "")
	}
	r.ReadEnd()
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2223 := z.EncBinary()
		_ = yym2223
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2224 := !z.EncBinary()
			yy2arr2224 := z.EncBasicHandle().StructToArray
			var yyq2224 [6]bool
			_, _, _ = yysep2224, yyq2224, yy2arr2224
			const yyr2224 bool = false
			yyq2224[0] = len(x.Capacity) != 0
			yyq2224[1] = x.Phase != ""
			yyq2224[2] = len(x.Conditions) != 0
			yyq2224[3] = len(x.Addresses) != 0
			yyq2224[4] = true
			yyq2224[5] = true
			if yyr2224 || yy2arr2224 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2224 int = 0
				for _, b := range yyq2224 {
					if b {
						yynn2224++
					}
				}
				r.EncodeMapStart(yynn2224)
			}
			if yyr2224 || yy2arr2224 {
				if yyq2224[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2224[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2224 || yy2arr2224 {
				if yyq2224[1] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2224[1] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2224 || yy2arr2224 {
				if yyq2224[2] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2228 := z.EncBinary()
						_ = yym2228
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2224[2] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2229 := z.EncBinary()
						_ = yym2229
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2224 || yy2arr2224 {
				if yyq2224[3] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2231 := z.EncBinary()
						_ = yym2231
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2224[3] {
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2232 := z.EncBinary()
						_ = yym2232
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2224 || yy2arr2224 {
				if yyq2224[4] {
					yy2234 := &x.DaemonEndpoints
					yy2234.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2224[4] {
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					yy2235 := &x.DaemonEndpoints
					yy2235.CodecEncodeSelf(e)
				}
			}
			if yyr2224 || yy2arr2224 {
				if yyq2224[5] {
					yy2237 := &x.NodeInfo
					yy2237.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2224[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					yy2238 := &x.NodeInfo
					yy2238.CodecEncodeSelf(e)
				}
			}
			if yysep2224 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2239 := z.DecBinary()
	_ = yym2239
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2240 := r.ReadMapStart()
			if yyl2240 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2240, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2240 := r.ReadArrayStart()
			if yyl2240 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2240, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2241Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2241Slc
	var yyhl2241 bool = l >= 0
	for yyj2241 := 0; ; yyj2241++ {
		if yyhl2241 {
			if yyj2241 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2241Slc = r.DecodeBytes(yys2241Slc, true, true)
		yys2241 := string(yys2241Slc)
		switch yys2241 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2242 := &x.Capacity
				yyv2242.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2244 := &x.Conditions
				yym2245 := z.DecBinary()
				_ = yym2245
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2244), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2246 := &x.Addresses
				yym2247 := z.DecBinary()
				_ = yym2247
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2246), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2248 := &x.DaemonEndpoints
				yyv2248.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2249 := &x.NodeInfo
				yyv2249.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2241)
		} // end switch yys2241
	} // end for yyj2241
	if !yyhl2241 {
		r.ReadEnd()
	}
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2250 int
	var yyb2250 bool
	var yyhl2250 bool = l >= 0
	yyj2250++
	if yyhl2250 {
		yyb2250 = yyj2250 > l
	} else {
		yyb2250 = r.CheckBreak()
	}
	if yyb2250 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2251 := &x.Capacity
		yyv2251.CodecDecodeSelf(d)
	}
	yyj2250++
	if yyhl2250 {
		yyb2250 = yyj2250 > l
	} else {
		yyb2250 = r.CheckBreak()
	}
	if yyb2250 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2250++
	if yyhl2250 {
		yyb2250 = yyj2250 > l
	} else {
		yyb2250 = r.CheckBreak()
	}
	if yyb2250 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2253 := &x.Conditions
		yym2254 := z.DecBinary()
		_ = yym2254
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2253), d)
		}
	}
	yyj2250++
	if yyhl2250 {
		yyb2250 = yyj2250 > l
	} else {
		yyb2250 = r.CheckBreak()
	}
	if yyb2250 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2255 := &x.Addresses
		yym2256 := z.DecBinary()
		_ = yym2256
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2255), d)
		}
	}
	yyj2250++
	if yyhl2250 {
		yyb2250 = yyj2250 > l
	} else {
		yyb2250 = r.CheckBreak()
	}
	if yyb2250 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2257 := &x.DaemonEndpoints
		yyv2257.CodecDecodeSelf(d)
	}
	yyj2250++
	if yyhl2250 {
		yyb2250 = yyj2250 > l
	} else {
		yyb2250 = r.CheckBreak()
	}
	if yyb2250 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2258 := &x.NodeInfo
		yyv2258.CodecDecodeSelf(d)
	}
	for {
		yyj2250++
		if yyhl2250 {
			yyb2250 = yyj2250 > l
		} else {
			yyb2250 = r.CheckBreak()
		}
		if yyb2250 {
			break
		}
		z.DecStructFieldNotFound(yyj2250-1, "")
	}
	r.ReadEnd()
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2259 := z.EncBinary()
	_ = yym2259
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2260 := z.DecBinary()
	_ = yym2260
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2261 := z.EncBinary()
	_ = yym2261
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2262 := z.DecBinary()
	_ = yym2262
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2263 := z.EncBinary()
		_ = yym2263
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2264 := !z.EncBinary()
			yy2arr2264 := z.EncBasicHandle().StructToArray
			var yyq2264 [6]bool
			_, _, _ = yysep2264, yyq2264, yy2arr2264
			const yyr2264 bool = false
			yyq2264[2] = true
			yyq2264[3] = true
			yyq2264[4] = x.Reason != ""
			yyq2264[5] = x.Message != ""
			if yyr2264 || yy2arr2264 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2264 int = 2
				for _, b := range yyq2264 {
					if b {
						yynn2264++
					}
				}
				r.EncodeMapStart(yynn2264)
			}
			if yyr2264 || yy2arr2264 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2264 || yy2arr2264 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2264 || yy2arr2264 {
				if yyq2264[2] {
					yy2268 := &x.LastHeartbeatTime
					yym2269 := z.EncBinary()
					_ = yym2269
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2268) {
					} else if yym2269 {
						z.EncBinaryMarshal(yy2268)
					} else if !yym2269 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2268)
					} else {
						z.EncFallback(yy2268)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2264[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					yy2270 := &x.LastHeartbeatTime
					yym2271 := z.EncBinary()
					_ = yym2271
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2270) {
					} else if yym2271 {
						z.EncBinaryMarshal(yy2270)
					} else if !yym2271 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2270)
					} else {
						z.EncFallback(yy2270)
					}
				}
			}
			if yyr2264 || yy2arr2264 {
				if yyq2264[3] {
					yy2273 := &x.LastTransitionTime
					yym2274 := z.EncBinary()
					_ = yym2274
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2273) {
					} else if yym2274 {
						z.EncBinaryMarshal(yy2273)
					} else if !yym2274 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2273)
					} else {
						z.EncFallback(yy2273)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2264[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy2275 := &x.LastTransitionTime
					yym2276 := z.EncBinary()
					_ = yym2276
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2275) {
					} else if yym2276 {
						z.EncBinaryMarshal(yy2275)
					} else if !yym2276 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2275)
					} else {
						z.EncFallback(yy2275)
					}
				}
			}
			if yyr2264 || yy2arr2264 {
				if yyq2264[4] {
					yym2278 := z.EncBinary()
					_ = yym2278
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2264[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym2279 := z.EncBinary()
					_ = yym2279
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2264 || yy2arr2264 {
				if yyq2264[5] {
					yym2281 := z.EncBinary()
					_ = yym2281
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2264[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym2282 := z.EncBinary()
					_ = yym2282
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep2264 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2283 := z.DecBinary()
	_ = yym2283
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2284 := r.ReadMapStart()
			if yyl2284 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2284, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2284 := r.ReadArrayStart()
			if yyl2284 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2284, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2285Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2285Slc
	var yyhl2285 bool = l >= 0
	for yyj2285 := 0; ; yyj2285++ {
		if yyhl2285 {
			if yyj2285 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2285Slc = r.DecodeBytes(yys2285Slc, true, true)
		yys2285 := string(yys2285Slc)
		switch yys2285 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv2288 := &x.LastHeartbeatTime
				yym2289 := z.DecBinary()
				_ = yym2289
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2288) {
				} else if yym2289 {
					z.DecBinaryUnmarshal(yyv2288)
				} else if !yym2289 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2288)
				} else {
					z.DecFallback(yyv2288, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2290 := &x.LastTransitionTime
				yym2291 := z.DecBinary()
				_ = yym2291
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2290) {
				} else if yym2291 {
					z.DecBinaryUnmarshal(yyv2290)
				} else if !yym2291 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2290)
				} else {
					z.DecFallback(yyv2290, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2285)
		} // end switch yys2285
	} // end for yyj2285
	if !yyhl2285 {
		r.ReadEnd()
	}
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2294 int
	var yyb2294 bool
	var yyhl2294 bool = l >= 0
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv2297 := &x.LastHeartbeatTime
		yym2298 := z.DecBinary()
		_ = yym2298
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2297) {
		} else if yym2298 {
			z.DecBinaryUnmarshal(yyv2297)
		} else if !yym2298 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2297)
		} else {
			z.DecFallback(yyv2297, false)
		}
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2299 := &x.LastTransitionTime
		yym2300 := z.DecBinary()
		_ = yym2300
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2299) {
		} else if yym2300 {
			z.DecBinaryUnmarshal(yyv2299)
		} else if !yym2300 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2299)
		} else {
			z.DecFallback(yyv2299, false)
		}
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2294++
		if yyhl2294 {
			yyb2294 = yyj2294 > l
		} else {
			yyb2294 = r.CheckBreak()
		}
		if yyb2294 {
			break
		}
		z.DecStructFieldNotFound(yyj2294-1, "")
	}
	r.ReadEnd()
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2303 := z.EncBinary()
	_ = yym2303
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2304 := z.DecBinary()
	_ = yym2304
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2305 := z.EncBinary()
		_ = yym2305
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2306 := !z.EncBinary()
			yy2arr2306 := z.EncBasicHandle().StructToArray
			var yyq2306 [2]bool
			_, _, _ = yysep2306, yyq2306, yy2arr2306
			const yyr2306 bool = false
			if yyr2306 || yy2arr2306 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2306 int = 2
				for _, b := range yyq2306 {
					if b {
						yynn2306++
					}
				}
				r.EncodeMapStart(yynn2306)
			}
			if yyr2306 || yy2arr2306 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2306 || yy2arr2306 {
				yym2309 := z.EncBinary()
				_ = yym2309
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				yym2310 := z.EncBinary()
				_ = yym2310
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yysep2306 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2311 := z.DecBinary()
	_ = yym2311
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2312 := r.ReadMapStart()
			if yyl2312 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2312, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2312 := r.ReadArrayStart()
			if yyl2312 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2312, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2313Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2313Slc
	var yyhl2313 bool = l >= 0
	for yyj2313 := 0; ; yyj2313++ {
		if yyhl2313 {
			if yyj2313 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2313Slc = r.DecodeBytes(yys2313Slc, true, true)
		yys2313 := string(yys2313Slc)
		switch yys2313 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2313)
		} // end switch yys2313
	} // end for yyj2313
	if !yyhl2313 {
		r.ReadEnd()
	}
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2316 int
	var yyb2316 bool
	var yyhl2316 bool = l >= 0
	yyj2316++
	if yyhl2316 {
		yyb2316 = yyj2316 > l
	} else {
		yyb2316 = r.CheckBreak()
	}
	if yyb2316 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2316++
	if yyhl2316 {
		yyb2316 = yyj2316 > l
	} else {
		yyb2316 = r.CheckBreak()
	}
	if yyb2316 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2316++
		if yyhl2316 {
			yyb2316 = yyj2316 > l
		} else {
			yyb2316 = r.CheckBreak()
		}
		if yyb2316 {
			break
		}
		z.DecStructFieldNotFound(yyj2316-1, "")
	}
	r.ReadEnd()
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2319 := z.EncBinary()
	_ = yym2319
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2320 := z.DecBinary()
	_ = yym2320
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2321 := z.EncBinary()
		_ = yym2321
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2322 := z.DecBinary()
	_ = yym2322
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2323 := z.EncBinary()
		_ = yym2323
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2324 := !z.EncBinary()
			yy2arr2324 := z.EncBasicHandle().StructToArray
			var yyq2324 [5]bool
			_, _, _ = yysep2324, yyq2324, yy2arr2324
			const yyr2324 bool = false
			yyq2324[0] = x.Kind != ""
			yyq2324[1] = x.APIVersion != ""
			yyq2324[2] = true
			yyq2324[3] = true
			yyq2324[4] = true
			if yyr2324 || yy2arr2324 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2324 int = 0
				for _, b := range yyq2324 {
					if b {
						yynn2324++
					}
				}
				r.EncodeMapStart(yynn2324)
			}
			if yyr2324 || yy2arr2324 {
				if yyq2324[0] {
					yym2326 := z.EncBinary()
					_ = yym2326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2324[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2327 := z.EncBinary()
					_ = yym2327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2324 || yy2arr2324 {
				if yyq2324[1] {
					yym2329 := z.EncBinary()
					_ = yym2329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2324[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2330 := z.EncBinary()
					_ = yym2330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2324 || yy2arr2324 {
				if yyq2324[2] {
					yy2332 := &x.ObjectMeta
					yy2332.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2324[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2333 := &x.ObjectMeta
					yy2333.CodecEncodeSelf(e)
				}
			}
			if yyr2324 || yy2arr2324 {
				if yyq2324[3] {
					yy2335 := &x.Spec
					yy2335.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2324[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2336 := &x.Spec
					yy2336.CodecEncodeSelf(e)
				}
			}
			if yyr2324 || yy2arr2324 {
				if yyq2324[4] {
					yy2338 := &x.Status
					yy2338.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2324[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2339 := &x.Status
					yy2339.CodecEncodeSelf(e)
				}
			}
			if yysep2324 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2340 := z.DecBinary()
	_ = yym2340
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2341 := r.ReadMapStart()
			if yyl2341 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2341, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2341 := r.ReadArrayStart()
			if yyl2341 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2341, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2342Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2342Slc
	var yyhl2342 bool = l >= 0
	for yyj2342 := 0; ; yyj2342++ {
		if yyhl2342 {
			if yyj2342 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2342Slc = r.DecodeBytes(yys2342Slc, true, true)
		yys2342 := string(yys2342Slc)
		switch yys2342 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2345 := &x.ObjectMeta
				yyv2345.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2346 := &x.Spec
				yyv2346.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2347 := &x.Status
				yyv2347.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2342)
		} // end switch yys2342
	} // end for yyj2342
	if !yyhl2342 {
		r.ReadEnd()
	}
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2348 int
	var yyb2348 bool
	var yyhl2348 bool = l >= 0
	yyj2348++
	if yyhl2348 {
		yyb2348 = yyj2348 > l
	} else {
		yyb2348 = r.CheckBreak()
	}
	if yyb2348 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2348++
	if yyhl2348 {
		yyb2348 = yyj2348 > l
	} else {
		yyb2348 = r.CheckBreak()
	}
	if yyb2348 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2348++
	if yyhl2348 {
		yyb2348 = yyj2348 > l
	} else {
		yyb2348 = r.CheckBreak()
	}
	if yyb2348 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2351 := &x.ObjectMeta
		yyv2351.CodecDecodeSelf(d)
	}
	yyj2348++
	if yyhl2348 {
		yyb2348 = yyj2348 > l
	} else {
		yyb2348 = r.CheckBreak()
	}
	if yyb2348 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2352 := &x.Spec
		yyv2352.CodecDecodeSelf(d)
	}
	yyj2348++
	if yyhl2348 {
		yyb2348 = yyj2348 > l
	} else {
		yyb2348 = r.CheckBreak()
	}
	if yyb2348 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2353 := &x.Status
		yyv2353.CodecDecodeSelf(d)
	}
	for {
		yyj2348++
		if yyhl2348 {
			yyb2348 = yyj2348 > l
		} else {
			yyb2348 = r.CheckBreak()
		}
		if yyb2348 {
			break
		}
		z.DecStructFieldNotFound(yyj2348-1, "")
	}
	r.ReadEnd()
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2354 := z.EncBinary()
		_ = yym2354
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2355 := !z.EncBinary()
			yy2arr2355 := z.EncBasicHandle().StructToArray
			var yyq2355 [4]bool
			_, _, _ = yysep2355, yyq2355, yy2arr2355
			const yyr2355 bool = false
			yyq2355[0] = x.Kind != ""
			yyq2355[1] = x.APIVersion != ""
			yyq2355[2] = true
			if yyr2355 || yy2arr2355 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2355 int = 1
				for _, b := range yyq2355 {
					if b {
						yynn2355++
					}
				}
				r.EncodeMapStart(yynn2355)
			}
			if yyr2355 || yy2arr2355 {
				if yyq2355[0] {
					yym2357 := z.EncBinary()
					_ = yym2357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2355[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2358 := z.EncBinary()
					_ = yym2358
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2355 || yy2arr2355 {
				if yyq2355[1] {
					yym2360 := z.EncBinary()
					_ = yym2360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2355[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2361 := z.EncBinary()
					_ = yym2361
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2355 || yy2arr2355 {
				if yyq2355[2] {
					yy2363 := &x.ListMeta
					yym2364 := z.EncBinary()
					_ = yym2364
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2363) {
					} else {
						z.EncFallback(yy2363)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2355[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2365 := &x.ListMeta
					yym2366 := z.EncBinary()
					_ = yym2366
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2365) {
					} else {
						z.EncFallback(yy2365)
					}
				}
			}
			if yyr2355 || yy2arr2355 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2368 := z.EncBinary()
					_ = yym2368
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2369 := z.EncBinary()
					_ = yym2369
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yysep2355 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2370 := z.DecBinary()
	_ = yym2370
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2371 := r.ReadMapStart()
			if yyl2371 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2371, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2371 := r.ReadArrayStart()
			if yyl2371 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2371, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2372Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2372Slc
	var yyhl2372 bool = l >= 0
	for yyj2372 := 0; ; yyj2372++ {
		if yyhl2372 {
			if yyj2372 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2372Slc = r.DecodeBytes(yys2372Slc, true, true)
		yys2372 := string(yys2372Slc)
		switch yys2372 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2375 := &x.ListMeta
				yym2376 := z.DecBinary()
				_ = yym2376
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2375) {
				} else {
					z.DecFallback(yyv2375, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2377 := &x.Items
				yym2378 := z.DecBinary()
				_ = yym2378
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2377), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2372)
		} // end switch yys2372
	} // end for yyj2372
	if !yyhl2372 {
		r.ReadEnd()
	}
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2379 int
	var yyb2379 bool
	var yyhl2379 bool = l >= 0
	yyj2379++
	if yyhl2379 {
		yyb2379 = yyj2379 > l
	} else {
		yyb2379 = r.CheckBreak()
	}
	if yyb2379 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2379++
	if yyhl2379 {
		yyb2379 = yyj2379 > l
	} else {
		yyb2379 = r.CheckBreak()
	}
	if yyb2379 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2379++
	if yyhl2379 {
		yyb2379 = yyj2379 > l
	} else {
		yyb2379 = r.CheckBreak()
	}
	if yyb2379 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2382 := &x.ListMeta
		yym2383 := z.DecBinary()
		_ = yym2383
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2382) {
		} else {
			z.DecFallback(yyv2382, false)
		}
	}
	yyj2379++
	if yyhl2379 {
		yyb2379 = yyj2379 > l
	} else {
		yyb2379 = r.CheckBreak()
	}
	if yyb2379 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2384 := &x.Items
		yym2385 := z.DecBinary()
		_ = yym2385
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2384), d)
		}
	}
	for {
		yyj2379++
		if yyhl2379 {
			yyb2379 = yyj2379 > l
		} else {
			yyb2379 = r.CheckBreak()
		}
		if yyb2379 {
			break
		}
		z.DecStructFieldNotFound(yyj2379-1, "")
	}
	r.ReadEnd()
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2386 := z.EncBinary()
	_ = yym2386
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2387 := z.DecBinary()
	_ = yym2387
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2388 := z.EncBinary()
		_ = yym2388
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2389 := !z.EncBinary()
			yy2arr2389 := z.EncBasicHandle().StructToArray
			var yyq2389 [1]bool
			_, _, _ = yysep2389, yyq2389, yy2arr2389
			const yyr2389 bool = false
			yyq2389[0] = len(x.Finalizers) != 0
			if yyr2389 || yy2arr2389 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2389 int = 0
				for _, b := range yyq2389 {
					if b {
						yynn2389++
					}
				}
				r.EncodeMapStart(yynn2389)
			}
			if yyr2389 || yy2arr2389 {
				if yyq2389[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2391 := z.EncBinary()
						_ = yym2391
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2389[0] {
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2392 := z.EncBinary()
						_ = yym2392
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yysep2389 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2393 := z.DecBinary()
	_ = yym2393
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2394 := r.ReadMapStart()
			if yyl2394 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2394, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2394 := r.ReadArrayStart()
			if yyl2394 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2394, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2395Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2395Slc
	var yyhl2395 bool = l >= 0
	for yyj2395 := 0; ; yyj2395++ {
		if yyhl2395 {
			if yyj2395 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2395Slc = r.DecodeBytes(yys2395Slc, true, true)
		yys2395 := string(yys2395Slc)
		switch yys2395 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2396 := &x.Finalizers
				yym2397 := z.DecBinary()
				_ = yym2397
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2396), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2395)
		} // end switch yys2395
	} // end for yyj2395
	if !yyhl2395 {
		r.ReadEnd()
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2398 int
	var yyb2398 bool
	var yyhl2398 bool = l >= 0
	yyj2398++
	if yyhl2398 {
		yyb2398 = yyj2398 > l
	} else {
		yyb2398 = r.CheckBreak()
	}
	if yyb2398 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2399 := &x.Finalizers
		yym2400 := z.DecBinary()
		_ = yym2400
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2399), d)
		}
	}
	for {
		yyj2398++
		if yyhl2398 {
			yyb2398 = yyj2398 > l
		} else {
			yyb2398 = r.CheckBreak()
		}
		if yyb2398 {
			break
		}
		z.DecStructFieldNotFound(yyj2398-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2401 := z.EncBinary()
		_ = yym2401
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2402 := !z.EncBinary()
			yy2arr2402 := z.EncBasicHandle().StructToArray
			var yyq2402 [1]bool
			_, _, _ = yysep2402, yyq2402, yy2arr2402
			const yyr2402 bool = false
			yyq2402[0] = x.Phase != ""
			if yyr2402 || yy2arr2402 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2402 int = 0
				for _, b := range yyq2402 {
					if b {
						yynn2402++
					}
				}
				r.EncodeMapStart(yynn2402)
			}
			if yyr2402 || yy2arr2402 {
				if yyq2402[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2402[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yysep2402 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2404 := z.DecBinary()
	_ = yym2404
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2405 := r.ReadMapStart()
			if yyl2405 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2405, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2405 := r.ReadArrayStart()
			if yyl2405 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2405, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2406Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2406Slc
	var yyhl2406 bool = l >= 0
	for yyj2406 := 0; ; yyj2406++ {
		if yyhl2406 {
			if yyj2406 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2406Slc = r.DecodeBytes(yys2406Slc, true, true)
		yys2406 := string(yys2406Slc)
		switch yys2406 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2406)
		} // end switch yys2406
	} // end for yyj2406
	if !yyhl2406 {
		r.ReadEnd()
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2408 int
	var yyb2408 bool
	var yyhl2408 bool = l >= 0
	yyj2408++
	if yyhl2408 {
		yyb2408 = yyj2408 > l
	} else {
		yyb2408 = r.CheckBreak()
	}
	if yyb2408 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2408++
		if yyhl2408 {
			yyb2408 = yyj2408 > l
		} else {
			yyb2408 = r.CheckBreak()
		}
		if yyb2408 {
			break
		}
		z.DecStructFieldNotFound(yyj2408-1, "")
	}
	r.ReadEnd()
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2410 := z.EncBinary()
	_ = yym2410
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2411 := z.DecBinary()
	_ = yym2411
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2412 := z.EncBinary()
		_ = yym2412
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2413 := !z.EncBinary()
			yy2arr2413 := z.EncBasicHandle().StructToArray
			var yyq2413 [5]bool
			_, _, _ = yysep2413, yyq2413, yy2arr2413
			const yyr2413 bool = false
			yyq2413[0] = x.Kind != ""
			yyq2413[1] = x.APIVersion != ""
			yyq2413[2] = true
			yyq2413[3] = true
			yyq2413[4] = true
			if yyr2413 || yy2arr2413 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2413 int = 0
				for _, b := range yyq2413 {
					if b {
						yynn2413++
					}
				}
				r.EncodeMapStart(yynn2413)
			}
			if yyr2413 || yy2arr2413 {
				if yyq2413[0] {
					yym2415 := z.EncBinary()
					_ = yym2415
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2413[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2416 := z.EncBinary()
					_ = yym2416
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2413 || yy2arr2413 {
				if yyq2413[1] {
					yym2418 := z.EncBinary()
					_ = yym2418
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2413[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2419 := z.EncBinary()
					_ = yym2419
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2413 || yy2arr2413 {
				if yyq2413[2] {
					yy2421 := &x.ObjectMeta
					yy2421.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2413[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2422 := &x.ObjectMeta
					yy2422.CodecEncodeSelf(e)
				}
			}
			if yyr2413 || yy2arr2413 {
				if yyq2413[3] {
					yy2424 := &x.Spec
					yy2424.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2413[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2425 := &x.Spec
					yy2425.CodecEncodeSelf(e)
				}
			}
			if yyr2413 || yy2arr2413 {
				if yyq2413[4] {
					yy2427 := &x.Status
					yy2427.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2413[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2428 := &x.Status
					yy2428.CodecEncodeSelf(e)
				}
			}
			if yysep2413 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2429 := z.DecBinary()
	_ = yym2429
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2430 := r.ReadMapStart()
			if yyl2430 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2430, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2430 := r.ReadArrayStart()
			if yyl2430 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2430, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2431Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2431Slc
	var yyhl2431 bool = l >= 0
	for yyj2431 := 0; ; yyj2431++ {
		if yyhl2431 {
			if yyj2431 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2431Slc = r.DecodeBytes(yys2431Slc, true, true)
		yys2431 := string(yys2431Slc)
		switch yys2431 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2434 := &x.ObjectMeta
				yyv2434.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2435 := &x.Spec
				yyv2435.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2436 := &x.Status
				yyv2436.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2431)
		} // end switch yys2431
	} // end for yyj2431
	if !yyhl2431 {
		r.ReadEnd()
	}
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2437 int
	var yyb2437 bool
	var yyhl2437 bool = l >= 0
	yyj2437++
	if yyhl2437 {
		yyb2437 = yyj2437 > l
	} else {
		yyb2437 = r.CheckBreak()
	}
	if yyb2437 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2437++
	if yyhl2437 {
		yyb2437 = yyj2437 > l
	} else {
		yyb2437 = r.CheckBreak()
	}
	if yyb2437 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2437++
	if yyhl2437 {
		yyb2437 = yyj2437 > l
	} else {
		yyb2437 = r.CheckBreak()
	}
	if yyb2437 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2440 := &x.ObjectMeta
		yyv2440.CodecDecodeSelf(d)
	}
	yyj2437++
	if yyhl2437 {
		yyb2437 = yyj2437 > l
	} else {
		yyb2437 = r.CheckBreak()
	}
	if yyb2437 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2441 := &x.Spec
		yyv2441.CodecDecodeSelf(d)
	}
	yyj2437++
	if yyhl2437 {
		yyb2437 = yyj2437 > l
	} else {
		yyb2437 = r.CheckBreak()
	}
	if yyb2437 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2442 := &x.Status
		yyv2442.CodecDecodeSelf(d)
	}
	for {
		yyj2437++
		if yyhl2437 {
			yyb2437 = yyj2437 > l
		} else {
			yyb2437 = r.CheckBreak()
		}
		if yyb2437 {
			break
		}
		z.DecStructFieldNotFound(yyj2437-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2443 := z.EncBinary()
		_ = yym2443
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2444 := !z.EncBinary()
			yy2arr2444 := z.EncBasicHandle().StructToArray
			var yyq2444 [4]bool
			_, _, _ = yysep2444, yyq2444, yy2arr2444
			const yyr2444 bool = false
			yyq2444[0] = x.Kind != ""
			yyq2444[1] = x.APIVersion != ""
			yyq2444[2] = true
			if yyr2444 || yy2arr2444 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2444 int = 1
				for _, b := range yyq2444 {
					if b {
						yynn2444++
					}
				}
				r.EncodeMapStart(yynn2444)
			}
			if yyr2444 || yy2arr2444 {
				if yyq2444[0] {
					yym2446 := z.EncBinary()
					_ = yym2446
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2444[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2447 := z.EncBinary()
					_ = yym2447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2444 || yy2arr2444 {
				if yyq2444[1] {
					yym2449 := z.EncBinary()
					_ = yym2449
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2444[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2450 := z.EncBinary()
					_ = yym2450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2444 || yy2arr2444 {
				if yyq2444[2] {
					yy2452 := &x.ListMeta
					yym2453 := z.EncBinary()
					_ = yym2453
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2452) {
					} else {
						z.EncFallback(yy2452)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2444[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2454 := &x.ListMeta
					yym2455 := z.EncBinary()
					_ = yym2455
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2454) {
					} else {
						z.EncFallback(yy2454)
					}
				}
			}
			if yyr2444 || yy2arr2444 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2457 := z.EncBinary()
					_ = yym2457
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2458 := z.EncBinary()
					_ = yym2458
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yysep2444 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2459 := z.DecBinary()
	_ = yym2459
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2460 := r.ReadMapStart()
			if yyl2460 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2460, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2460 := r.ReadArrayStart()
			if yyl2460 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2460, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2461Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2461Slc
	var yyhl2461 bool = l >= 0
	for yyj2461 := 0; ; yyj2461++ {
		if yyhl2461 {
			if yyj2461 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2461Slc = r.DecodeBytes(yys2461Slc, true, true)
		yys2461 := string(yys2461Slc)
		switch yys2461 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2464 := &x.ListMeta
				yym2465 := z.DecBinary()
				_ = yym2465
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2464) {
				} else {
					z.DecFallback(yyv2464, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2466 := &x.Items
				yym2467 := z.DecBinary()
				_ = yym2467
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2466), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2461)
		} // end switch yys2461
	} // end for yyj2461
	if !yyhl2461 {
		r.ReadEnd()
	}
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2468 int
	var yyb2468 bool
	var yyhl2468 bool = l >= 0
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2471 := &x.ListMeta
		yym2472 := z.DecBinary()
		_ = yym2472
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2471) {
		} else {
			z.DecFallback(yyv2471, false)
		}
	}
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2473 := &x.Items
		yym2474 := z.DecBinary()
		_ = yym2474
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2473), d)
		}
	}
	for {
		yyj2468++
		if yyhl2468 {
			yyb2468 = yyj2468 > l
		} else {
			yyb2468 = r.CheckBreak()
		}
		if yyb2468 {
			break
		}
		z.DecStructFieldNotFound(yyj2468-1, "")
	}
	r.ReadEnd()
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2475 := z.EncBinary()
		_ = yym2475
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2476 := !z.EncBinary()
			yy2arr2476 := z.EncBasicHandle().StructToArray
			var yyq2476 [4]bool
			_, _, _ = yysep2476, yyq2476, yy2arr2476
			const yyr2476 bool = false
			yyq2476[0] = x.Kind != ""
			yyq2476[1] = x.APIVersion != ""
			yyq2476[2] = true
			if yyr2476 || yy2arr2476 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2476 int = 1
				for _, b := range yyq2476 {
					if b {
						yynn2476++
					}
				}
				r.EncodeMapStart(yynn2476)
			}
			if yyr2476 || yy2arr2476 {
				if yyq2476[0] {
					yym2478 := z.EncBinary()
					_ = yym2478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2476[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2479 := z.EncBinary()
					_ = yym2479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2476 || yy2arr2476 {
				if yyq2476[1] {
					yym2481 := z.EncBinary()
					_ = yym2481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2476[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2482 := z.EncBinary()
					_ = yym2482
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2476 || yy2arr2476 {
				if yyq2476[2] {
					yy2484 := &x.ObjectMeta
					yy2484.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2476[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2485 := &x.ObjectMeta
					yy2485.CodecEncodeSelf(e)
				}
			}
			if yyr2476 || yy2arr2476 {
				yy2487 := &x.Target
				yy2487.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				yy2488 := &x.Target
				yy2488.CodecEncodeSelf(e)
			}
			if yysep2476 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2489 := z.DecBinary()
	_ = yym2489
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2490 := r.ReadMapStart()
			if yyl2490 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2490, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2490 := r.ReadArrayStart()
			if yyl2490 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2490, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2491Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2491Slc
	var yyhl2491 bool = l >= 0
	for yyj2491 := 0; ; yyj2491++ {
		if yyhl2491 {
			if yyj2491 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2491Slc = r.DecodeBytes(yys2491Slc, true, true)
		yys2491 := string(yys2491Slc)
		switch yys2491 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2494 := &x.ObjectMeta
				yyv2494.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2495 := &x.Target
				yyv2495.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2491)
		} // end switch yys2491
	} // end for yyj2491
	if !yyhl2491 {
		r.ReadEnd()
	}
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2496 int
	var yyb2496 bool
	var yyhl2496 bool = l >= 0
	yyj2496++
	if yyhl2496 {
		yyb2496 = yyj2496 > l
	} else {
		yyb2496 = r.CheckBreak()
	}
	if yyb2496 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2496++
	if yyhl2496 {
		yyb2496 = yyj2496 > l
	} else {
		yyb2496 = r.CheckBreak()
	}
	if yyb2496 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2496++
	if yyhl2496 {
		yyb2496 = yyj2496 > l
	} else {
		yyb2496 = r.CheckBreak()
	}
	if yyb2496 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2499 := &x.ObjectMeta
		yyv2499.CodecDecodeSelf(d)
	}
	yyj2496++
	if yyhl2496 {
		yyb2496 = yyj2496 > l
	} else {
		yyb2496 = r.CheckBreak()
	}
	if yyb2496 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2500 := &x.Target
		yyv2500.CodecDecodeSelf(d)
	}
	for {
		yyj2496++
		if yyhl2496 {
			yyb2496 = yyj2496 > l
		} else {
			yyb2496 = r.CheckBreak()
		}
		if yyb2496 {
			break
		}
		z.DecStructFieldNotFound(yyj2496-1, "")
	}
	r.ReadEnd()
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2501 := z.EncBinary()
		_ = yym2501
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2502 := !z.EncBinary()
			yy2arr2502 := z.EncBasicHandle().StructToArray
			var yyq2502 [3]bool
			_, _, _ = yysep2502, yyq2502, yy2arr2502
			const yyr2502 bool = false
			yyq2502[0] = x.Kind != ""
			yyq2502[1] = x.APIVersion != ""
			if yyr2502 || yy2arr2502 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2502 int = 1
				for _, b := range yyq2502 {
					if b {
						yynn2502++
					}
				}
				r.EncodeMapStart(yynn2502)
			}
			if yyr2502 || yy2arr2502 {
				if yyq2502[0] {
					yym2504 := z.EncBinary()
					_ = yym2504
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2502[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2505 := z.EncBinary()
					_ = yym2505
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2502 || yy2arr2502 {
				if yyq2502[1] {
					yym2507 := z.EncBinary()
					_ = yym2507
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2502[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2508 := z.EncBinary()
					_ = yym2508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2502 || yy2arr2502 {
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2510 := *x.GracePeriodSeconds
					yym2511 := z.EncBinary()
					_ = yym2511
					if false {
					} else {
						r.EncodeInt(int64(yy2510))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2512 := *x.GracePeriodSeconds
					yym2513 := z.EncBinary()
					_ = yym2513
					if false {
					} else {
						r.EncodeInt(int64(yy2512))
					}
				}
			}
			if yysep2502 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2514 := z.DecBinary()
	_ = yym2514
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2515 := r.ReadMapStart()
			if yyl2515 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2515, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2515 := r.ReadArrayStart()
			if yyl2515 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2515, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2516Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2516Slc
	var yyhl2516 bool = l >= 0
	for yyj2516 := 0; ; yyj2516++ {
		if yyhl2516 {
			if yyj2516 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2516Slc = r.DecodeBytes(yys2516Slc, true, true)
		yys2516 := string(yys2516Slc)
		switch yys2516 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2520 := z.DecBinary()
				_ = yym2520
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2516)
		} // end switch yys2516
	} // end for yyj2516
	if !yyhl2516 {
		r.ReadEnd()
	}
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2521 int
	var yyb2521 bool
	var yyhl2521 bool = l >= 0
	yyj2521++
	if yyhl2521 {
		yyb2521 = yyj2521 > l
	} else {
		yyb2521 = r.CheckBreak()
	}
	if yyb2521 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2521++
	if yyhl2521 {
		yyb2521 = yyj2521 > l
	} else {
		yyb2521 = r.CheckBreak()
	}
	if yyb2521 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2521++
	if yyhl2521 {
		yyb2521 = yyj2521 > l
	} else {
		yyb2521 = r.CheckBreak()
	}
	if yyb2521 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2525 := z.DecBinary()
		_ = yym2525
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2521++
		if yyhl2521 {
			yyb2521 = yyj2521 > l
		} else {
			yyb2521 = r.CheckBreak()
		}
		if yyb2521 {
			break
		}
		z.DecStructFieldNotFound(yyj2521-1, "")
	}
	r.ReadEnd()
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2526 := z.EncBinary()
		_ = yym2526
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2527 := !z.EncBinary()
			yy2arr2527 := z.EncBasicHandle().StructToArray
			var yyq2527 [6]bool
			_, _, _ = yysep2527, yyq2527, yy2arr2527
			const yyr2527 bool = false
			yyq2527[0] = x.Kind != ""
			yyq2527[1] = x.APIVersion != ""
			yyq2527[2] = x.LabelSelector != ""
			yyq2527[3] = x.FieldSelector != ""
			yyq2527[4] = x.Watch != false
			yyq2527[5] = x.ResourceVersion != ""
			if yyr2527 || yy2arr2527 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2527 int = 0
				for _, b := range yyq2527 {
					if b {
						yynn2527++
					}
				}
				r.EncodeMapStart(yynn2527)
			}
			if yyr2527 || yy2arr2527 {
				if yyq2527[0] {
					yym2529 := z.EncBinary()
					_ = yym2529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2527[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2530 := z.EncBinary()
					_ = yym2530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2527 || yy2arr2527 {
				if yyq2527[1] {
					yym2532 := z.EncBinary()
					_ = yym2532
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2527[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2533 := z.EncBinary()
					_ = yym2533
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2527 || yy2arr2527 {
				if yyq2527[2] {
					yym2535 := z.EncBinary()
					_ = yym2535
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2527[2] {
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					yym2536 := z.EncBinary()
					_ = yym2536
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr2527 || yy2arr2527 {
				if yyq2527[3] {
					yym2538 := z.EncBinary()
					_ = yym2538
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2527[3] {
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					yym2539 := z.EncBinary()
					_ = yym2539
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr2527 || yy2arr2527 {
				if yyq2527[4] {
					yym2541 := z.EncBinary()
					_ = yym2541
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2527[4] {
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					yym2542 := z.EncBinary()
					_ = yym2542
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr2527 || yy2arr2527 {
				if yyq2527[5] {
					yym2544 := z.EncBinary()
					_ = yym2544
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2527[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym2545 := z.EncBinary()
					_ = yym2545
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yysep2527 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2546 := z.DecBinary()
	_ = yym2546
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2547 := r.ReadMapStart()
			if yyl2547 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2547, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2547 := r.ReadArrayStart()
			if yyl2547 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2547, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2548Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2548Slc
	var yyhl2548 bool = l >= 0
	for yyj2548 := 0; ; yyj2548++ {
		if yyhl2548 {
			if yyj2548 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2548Slc = r.DecodeBytes(yys2548Slc, true, true)
		yys2548 := string(yys2548Slc)
		switch yys2548 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2548)
		} // end switch yys2548
	} // end for yyj2548
	if !yyhl2548 {
		r.ReadEnd()
	}
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2555 int
	var yyb2555 bool
	var yyhl2555 bool = l >= 0
	yyj2555++
	if yyhl2555 {
		yyb2555 = yyj2555 > l
	} else {
		yyb2555 = r.CheckBreak()
	}
	if yyb2555 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2555++
	if yyhl2555 {
		yyb2555 = yyj2555 > l
	} else {
		yyb2555 = r.CheckBreak()
	}
	if yyb2555 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2555++
	if yyhl2555 {
		yyb2555 = yyj2555 > l
	} else {
		yyb2555 = r.CheckBreak()
	}
	if yyb2555 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj2555++
	if yyhl2555 {
		yyb2555 = yyj2555 > l
	} else {
		yyb2555 = r.CheckBreak()
	}
	if yyb2555 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj2555++
	if yyhl2555 {
		yyb2555 = yyj2555 > l
	} else {
		yyb2555 = r.CheckBreak()
	}
	if yyb2555 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj2555++
	if yyhl2555 {
		yyb2555 = yyj2555 > l
	} else {
		yyb2555 = r.CheckBreak()
	}
	if yyb2555 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	for {
		yyj2555++
		if yyhl2555 {
			yyb2555 = yyj2555 > l
		} else {
			yyb2555 = r.CheckBreak()
		}
		if yyb2555 {
			break
		}
		z.DecStructFieldNotFound(yyj2555-1, "")
	}
	r.ReadEnd()
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2562 := z.EncBinary()
		_ = yym2562
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2563 := !z.EncBinary()
			yy2arr2563 := z.EncBasicHandle().StructToArray
			var yyq2563 [10]bool
			_, _, _ = yysep2563, yyq2563, yy2arr2563
			const yyr2563 bool = false
			yyq2563[0] = x.Kind != ""
			yyq2563[1] = x.APIVersion != ""
			yyq2563[2] = x.Container != ""
			yyq2563[3] = x.Follow != false
			yyq2563[4] = x.Previous != false
			yyq2563[5] = x.SinceSeconds != nil
			yyq2563[6] = x.SinceTime != nil
			yyq2563[7] = x.Timestamps != false
			yyq2563[8] = x.TailLines != nil
			yyq2563[9] = x.LimitBytes != nil
			if yyr2563 || yy2arr2563 {
				r.EncodeArrayStart(10)
			} else {
				var yynn2563 int = 0
				for _, b := range yyq2563 {
					if b {
						yynn2563++
					}
				}
				r.EncodeMapStart(yynn2563)
			}
			if yyr2563 || yy2arr2563 {
				if yyq2563[0] {
					yym2565 := z.EncBinary()
					_ = yym2565
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2563[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2566 := z.EncBinary()
					_ = yym2566
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2563 || yy2arr2563 {
				if yyq2563[1] {
					yym2568 := z.EncBinary()
					_ = yym2568
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2563[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2569 := z.EncBinary()
					_ = yym2569
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2563 || yy2arr2563 {
				if yyq2563[2] {
					yym2571 := z.EncBinary()
					_ = yym2571
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2563[2] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2572 := z.EncBinary()
					_ = yym2572
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2563 || yy2arr2563 {
				if yyq2563[3] {
					yym2574 := z.EncBinary()
					_ = yym2574
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2563[3] {
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					yym2575 := z.EncBinary()
					_ = yym2575
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr2563 || yy2arr2563 {
				if yyq2563[4] {
					yym2577 := z.EncBinary()
					_ = yym2577
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2563[4] {
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					yym2578 := z.EncBinary()
					_ = yym2578
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr2563 || yy2arr2563 {
				if yyq2563[5] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy2580 := *x.SinceSeconds
						yym2581 := z.EncBinary()
						_ = yym2581
						if false {
						} else {
							r.EncodeInt(int64(yy2580))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2563[5] {
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy2582 := *x.SinceSeconds
						yym2583 := z.EncBinary()
						_ = yym2583
						if false {
						} else {
							r.EncodeInt(int64(yy2582))
						}
					}
				}
			}
			if yyr2563 || yy2arr2563 {
				if yyq2563[6] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym2585 := z.EncBinary()
						_ = yym2585
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym2585 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym2585 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2563[6] {
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym2586 := z.EncBinary()
						_ = yym2586
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym2586 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym2586 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr2563 || yy2arr2563 {
				if yyq2563[7] {
					yym2588 := z.EncBinary()
					_ = yym2588
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2563[7] {
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					yym2589 := z.EncBinary()
					_ = yym2589
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr2563 || yy2arr2563 {
				if yyq2563[8] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy2591 := *x.TailLines
						yym2592 := z.EncBinary()
						_ = yym2592
						if false {
						} else {
							r.EncodeInt(int64(yy2591))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2563[8] {
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy2593 := *x.TailLines
						yym2594 := z.EncBinary()
						_ = yym2594
						if false {
						} else {
							r.EncodeInt(int64(yy2593))
						}
					}
				}
			}
			if yyr2563 || yy2arr2563 {
				if yyq2563[9] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy2596 := *x.LimitBytes
						yym2597 := z.EncBinary()
						_ = yym2597
						if false {
						} else {
							r.EncodeInt(int64(yy2596))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2563[9] {
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy2598 := *x.LimitBytes
						yym2599 := z.EncBinary()
						_ = yym2599
						if false {
						} else {
							r.EncodeInt(int64(yy2598))
						}
					}
				}
			}
			if yysep2563 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2600 := z.DecBinary()
	_ = yym2600
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2601 := r.ReadMapStart()
			if yyl2601 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2601, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2601 := r.ReadArrayStart()
			if yyl2601 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2601, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2602Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2602Slc
	var yyhl2602 bool = l >= 0
	for yyj2602 := 0; ; yyj2602++ {
		if yyhl2602 {
			if yyj2602 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2602Slc = r.DecodeBytes(yys2602Slc, true, true)
		yys2602 := string(yys2602Slc)
		switch yys2602 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym2609 := z.DecBinary()
				_ = yym2609
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym2611 := z.DecBinary()
				_ = yym2611
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym2611 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym2611 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym2614 := z.DecBinary()
				_ = yym2614
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym2616 := z.DecBinary()
				_ = yym2616
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2602)
		} // end switch yys2602
	} // end for yyj2602
	if !yyhl2602 {
		r.ReadEnd()
	}
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2617 int
	var yyb2617 bool
	var yyhl2617 bool = l >= 0
	yyj2617++
	if yyhl2617 {
		yyb2617 = yyj2617 > l
	} else {
		yyb2617 = r.CheckBreak()
	}
	if yyb2617 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2617++
	if yyhl2617 {
		yyb2617 = yyj2617 > l
	} else {
		yyb2617 = r.CheckBreak()
	}
	if yyb2617 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2617++
	if yyhl2617 {
		yyb2617 = yyj2617 > l
	} else {
		yyb2617 = r.CheckBreak()
	}
	if yyb2617 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2617++
	if yyhl2617 {
		yyb2617 = yyj2617 > l
	} else {
		yyb2617 = r.CheckBreak()
	}
	if yyb2617 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj2617++
	if yyhl2617 {
		yyb2617 = yyj2617 > l
	} else {
		yyb2617 = r.CheckBreak()
	}
	if yyb2617 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj2617++
	if yyhl2617 {
		yyb2617 = yyj2617 > l
	} else {
		yyb2617 = r.CheckBreak()
	}
	if yyb2617 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym2624 := z.DecBinary()
		_ = yym2624
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2617++
	if yyhl2617 {
		yyb2617 = yyj2617 > l
	} else {
		yyb2617 = r.CheckBreak()
	}
	if yyb2617 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym2626 := z.DecBinary()
		_ = yym2626
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym2626 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym2626 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj2617++
	if yyhl2617 {
		yyb2617 = yyj2617 > l
	} else {
		yyb2617 = r.CheckBreak()
	}
	if yyb2617 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj2617++
	if yyhl2617 {
		yyb2617 = yyj2617 > l
	} else {
		yyb2617 = r.CheckBreak()
	}
	if yyb2617 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym2629 := z.DecBinary()
		_ = yym2629
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj2617++
	if yyhl2617 {
		yyb2617 = yyj2617 > l
	} else {
		yyb2617 = r.CheckBreak()
	}
	if yyb2617 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym2631 := z.DecBinary()
		_ = yym2631
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2617++
		if yyhl2617 {
			yyb2617 = yyj2617 > l
		} else {
			yyb2617 = r.CheckBreak()
		}
		if yyb2617 {
			break
		}
		z.DecStructFieldNotFound(yyj2617-1, "")
	}
	r.ReadEnd()
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2632 := z.EncBinary()
		_ = yym2632
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2633 := !z.EncBinary()
			yy2arr2633 := z.EncBasicHandle().StructToArray
			var yyq2633 [7]bool
			_, _, _ = yysep2633, yyq2633, yy2arr2633
			const yyr2633 bool = false
			yyq2633[0] = x.Kind != ""
			yyq2633[1] = x.APIVersion != ""
			yyq2633[2] = x.Stdin != false
			yyq2633[3] = x.Stdout != false
			yyq2633[4] = x.Stderr != false
			yyq2633[5] = x.TTY != false
			yyq2633[6] = x.Container != ""
			if yyr2633 || yy2arr2633 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2633 int = 0
				for _, b := range yyq2633 {
					if b {
						yynn2633++
					}
				}
				r.EncodeMapStart(yynn2633)
			}
			if yyr2633 || yy2arr2633 {
				if yyq2633[0] {
					yym2635 := z.EncBinary()
					_ = yym2635
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2633[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2636 := z.EncBinary()
					_ = yym2636
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2633 || yy2arr2633 {
				if yyq2633[1] {
					yym2638 := z.EncBinary()
					_ = yym2638
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2633[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2639 := z.EncBinary()
					_ = yym2639
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2633 || yy2arr2633 {
				if yyq2633[2] {
					yym2641 := z.EncBinary()
					_ = yym2641
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2633[2] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym2642 := z.EncBinary()
					_ = yym2642
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2633 || yy2arr2633 {
				if yyq2633[3] {
					yym2644 := z.EncBinary()
					_ = yym2644
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2633[3] {
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					yym2645 := z.EncBinary()
					_ = yym2645
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2633 || yy2arr2633 {
				if yyq2633[4] {
					yym2647 := z.EncBinary()
					_ = yym2647
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2633[4] {
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					yym2648 := z.EncBinary()
					_ = yym2648
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2633 || yy2arr2633 {
				if yyq2633[5] {
					yym2650 := z.EncBinary()
					_ = yym2650
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2633[5] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym2651 := z.EncBinary()
					_ = yym2651
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2633 || yy2arr2633 {
				if yyq2633[6] {
					yym2653 := z.EncBinary()
					_ = yym2653
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2633[6] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2654 := z.EncBinary()
					_ = yym2654
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yysep2633 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2655 := z.DecBinary()
	_ = yym2655
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2656 := r.ReadMapStart()
			if yyl2656 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2656, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2656 := r.ReadArrayStart()
			if yyl2656 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2656, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2657Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2657Slc
	var yyhl2657 bool = l >= 0
	for yyj2657 := 0; ; yyj2657++ {
		if yyhl2657 {
			if yyj2657 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2657Slc = r.DecodeBytes(yys2657Slc, true, true)
		yys2657 := string(yys2657Slc)
		switch yys2657 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2657)
		} // end switch yys2657
	} // end for yyj2657
	if !yyhl2657 {
		r.ReadEnd()
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2665 int
	var yyb2665 bool
	var yyhl2665 bool = l >= 0
	yyj2665++
	if yyhl2665 {
		yyb2665 = yyj2665 > l
	} else {
		yyb2665 = r.CheckBreak()
	}
	if yyb2665 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2665++
	if yyhl2665 {
		yyb2665 = yyj2665 > l
	} else {
		yyb2665 = r.CheckBreak()
	}
	if yyb2665 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2665++
	if yyhl2665 {
		yyb2665 = yyj2665 > l
	} else {
		yyb2665 = r.CheckBreak()
	}
	if yyb2665 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2665++
	if yyhl2665 {
		yyb2665 = yyj2665 > l
	} else {
		yyb2665 = r.CheckBreak()
	}
	if yyb2665 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2665++
	if yyhl2665 {
		yyb2665 = yyj2665 > l
	} else {
		yyb2665 = r.CheckBreak()
	}
	if yyb2665 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2665++
	if yyhl2665 {
		yyb2665 = yyj2665 > l
	} else {
		yyb2665 = r.CheckBreak()
	}
	if yyb2665 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2665++
	if yyhl2665 {
		yyb2665 = yyj2665 > l
	} else {
		yyb2665 = r.CheckBreak()
	}
	if yyb2665 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj2665++
		if yyhl2665 {
			yyb2665 = yyj2665 > l
		} else {
			yyb2665 = r.CheckBreak()
		}
		if yyb2665 {
			break
		}
		z.DecStructFieldNotFound(yyj2665-1, "")
	}
	r.ReadEnd()
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2673 := z.EncBinary()
		_ = yym2673
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2674 := !z.EncBinary()
			yy2arr2674 := z.EncBasicHandle().StructToArray
			var yyq2674 [8]bool
			_, _, _ = yysep2674, yyq2674, yy2arr2674
			const yyr2674 bool = false
			yyq2674[0] = x.Kind != ""
			yyq2674[1] = x.APIVersion != ""
			yyq2674[2] = x.Stdin != false
			yyq2674[3] = x.Stdout != false
			yyq2674[4] = x.Stderr != false
			yyq2674[5] = x.TTY != false
			yyq2674[6] = x.Container != ""
			if yyr2674 || yy2arr2674 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2674 int = 1
				for _, b := range yyq2674 {
					if b {
						yynn2674++
					}
				}
				r.EncodeMapStart(yynn2674)
			}
			if yyr2674 || yy2arr2674 {
				if yyq2674[0] {
					yym2676 := z.EncBinary()
					_ = yym2676
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2674[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2677 := z.EncBinary()
					_ = yym2677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2674 || yy2arr2674 {
				if yyq2674[1] {
					yym2679 := z.EncBinary()
					_ = yym2679
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2674[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2680 := z.EncBinary()
					_ = yym2680
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2674 || yy2arr2674 {
				if yyq2674[2] {
					yym2682 := z.EncBinary()
					_ = yym2682
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2674[2] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym2683 := z.EncBinary()
					_ = yym2683
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2674 || yy2arr2674 {
				if yyq2674[3] {
					yym2685 := z.EncBinary()
					_ = yym2685
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2674[3] {
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					yym2686 := z.EncBinary()
					_ = yym2686
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2674 || yy2arr2674 {
				if yyq2674[4] {
					yym2688 := z.EncBinary()
					_ = yym2688
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2674[4] {
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					yym2689 := z.EncBinary()
					_ = yym2689
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2674 || yy2arr2674 {
				if yyq2674[5] {
					yym2691 := z.EncBinary()
					_ = yym2691
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2674[5] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym2692 := z.EncBinary()
					_ = yym2692
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2674 || yy2arr2674 {
				if yyq2674[6] {
					yym2694 := z.EncBinary()
					_ = yym2694
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2674[6] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2695 := z.EncBinary()
					_ = yym2695
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2674 || yy2arr2674 {
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2697 := z.EncBinary()
					_ = yym2697
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2698 := z.EncBinary()
					_ = yym2698
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yysep2674 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2699 := z.DecBinary()
	_ = yym2699
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2700 := r.ReadMapStart()
			if yyl2700 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2700, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2700 := r.ReadArrayStart()
			if yyl2700 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2700, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2701Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2701Slc
	var yyhl2701 bool = l >= 0
	for yyj2701 := 0; ; yyj2701++ {
		if yyhl2701 {
			if yyj2701 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2701Slc = r.DecodeBytes(yys2701Slc, true, true)
		yys2701 := string(yys2701Slc)
		switch yys2701 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv2709 := &x.Command
				yym2710 := z.DecBinary()
				_ = yym2710
				if false {
				} else {
					z.F.DecSliceStringX(yyv2709, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2701)
		} // end switch yys2701
	} // end for yyj2701
	if !yyhl2701 {
		r.ReadEnd()
	}
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2711 int
	var yyb2711 bool
	var yyhl2711 bool = l >= 0
	yyj2711++
	if yyhl2711 {
		yyb2711 = yyj2711 > l
	} else {
		yyb2711 = r.CheckBreak()
	}
	if yyb2711 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2711++
	if yyhl2711 {
		yyb2711 = yyj2711 > l
	} else {
		yyb2711 = r.CheckBreak()
	}
	if yyb2711 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2711++
	if yyhl2711 {
		yyb2711 = yyj2711 > l
	} else {
		yyb2711 = r.CheckBreak()
	}
	if yyb2711 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2711++
	if yyhl2711 {
		yyb2711 = yyj2711 > l
	} else {
		yyb2711 = r.CheckBreak()
	}
	if yyb2711 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2711++
	if yyhl2711 {
		yyb2711 = yyj2711 > l
	} else {
		yyb2711 = r.CheckBreak()
	}
	if yyb2711 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2711++
	if yyhl2711 {
		yyb2711 = yyj2711 > l
	} else {
		yyb2711 = r.CheckBreak()
	}
	if yyb2711 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2711++
	if yyhl2711 {
		yyb2711 = yyj2711 > l
	} else {
		yyb2711 = r.CheckBreak()
	}
	if yyb2711 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2711++
	if yyhl2711 {
		yyb2711 = yyj2711 > l
	} else {
		yyb2711 = r.CheckBreak()
	}
	if yyb2711 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv2719 := &x.Command
		yym2720 := z.DecBinary()
		_ = yym2720
		if false {
		} else {
			z.F.DecSliceStringX(yyv2719, false, d)
		}
	}
	for {
		yyj2711++
		if yyhl2711 {
			yyb2711 = yyj2711 > l
		} else {
			yyb2711 = r.CheckBreak()
		}
		if yyb2711 {
			break
		}
		z.DecStructFieldNotFound(yyj2711-1, "")
	}
	r.ReadEnd()
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2721 := z.EncBinary()
		_ = yym2721
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2722 := !z.EncBinary()
			yy2arr2722 := z.EncBasicHandle().StructToArray
			var yyq2722 [3]bool
			_, _, _ = yysep2722, yyq2722, yy2arr2722
			const yyr2722 bool = false
			yyq2722[0] = x.Kind != ""
			yyq2722[1] = x.APIVersion != ""
			yyq2722[2] = x.Path != ""
			if yyr2722 || yy2arr2722 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2722 int = 0
				for _, b := range yyq2722 {
					if b {
						yynn2722++
					}
				}
				r.EncodeMapStart(yynn2722)
			}
			if yyr2722 || yy2arr2722 {
				if yyq2722[0] {
					yym2724 := z.EncBinary()
					_ = yym2724
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2722[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2725 := z.EncBinary()
					_ = yym2725
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2722 || yy2arr2722 {
				if yyq2722[1] {
					yym2727 := z.EncBinary()
					_ = yym2727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2722[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2728 := z.EncBinary()
					_ = yym2728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2722 || yy2arr2722 {
				if yyq2722[2] {
					yym2730 := z.EncBinary()
					_ = yym2730
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2722[2] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym2731 := z.EncBinary()
					_ = yym2731
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yysep2722 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2732 := z.DecBinary()
	_ = yym2732
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2733 := r.ReadMapStart()
			if yyl2733 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2733, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2733 := r.ReadArrayStart()
			if yyl2733 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2733, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2734Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2734Slc
	var yyhl2734 bool = l >= 0
	for yyj2734 := 0; ; yyj2734++ {
		if yyhl2734 {
			if yyj2734 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2734Slc = r.DecodeBytes(yys2734Slc, true, true)
		yys2734 := string(yys2734Slc)
		switch yys2734 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2734)
		} // end switch yys2734
	} // end for yyj2734
	if !yyhl2734 {
		r.ReadEnd()
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2738 int
	var yyb2738 bool
	var yyhl2738 bool = l >= 0
	yyj2738++
	if yyhl2738 {
		yyb2738 = yyj2738 > l
	} else {
		yyb2738 = r.CheckBreak()
	}
	if yyb2738 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2738++
	if yyhl2738 {
		yyb2738 = yyj2738 > l
	} else {
		yyb2738 = r.CheckBreak()
	}
	if yyb2738 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2738++
	if yyhl2738 {
		yyb2738 = yyj2738 > l
	} else {
		yyb2738 = r.CheckBreak()
	}
	if yyb2738 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj2738++
		if yyhl2738 {
			yyb2738 = yyj2738 > l
		} else {
			yyb2738 = r.CheckBreak()
		}
		if yyb2738 {
			break
		}
		z.DecStructFieldNotFound(yyj2738-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2742 := z.EncBinary()
		_ = yym2742
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2743 := !z.EncBinary()
			yy2arr2743 := z.EncBasicHandle().StructToArray
			var yyq2743 [7]bool
			_, _, _ = yysep2743, yyq2743, yy2arr2743
			const yyr2743 bool = false
			yyq2743[0] = x.Kind != ""
			yyq2743[1] = x.Namespace != ""
			yyq2743[2] = x.Name != ""
			yyq2743[3] = x.UID != ""
			yyq2743[4] = x.APIVersion != ""
			yyq2743[5] = x.ResourceVersion != ""
			yyq2743[6] = x.FieldPath != ""
			if yyr2743 || yy2arr2743 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2743 int = 0
				for _, b := range yyq2743 {
					if b {
						yynn2743++
					}
				}
				r.EncodeMapStart(yynn2743)
			}
			if yyr2743 || yy2arr2743 {
				if yyq2743[0] {
					yym2745 := z.EncBinary()
					_ = yym2745
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2743[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2746 := z.EncBinary()
					_ = yym2746
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2743 || yy2arr2743 {
				if yyq2743[1] {
					yym2748 := z.EncBinary()
					_ = yym2748
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2743[1] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym2749 := z.EncBinary()
					_ = yym2749
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2743 || yy2arr2743 {
				if yyq2743[2] {
					yym2751 := z.EncBinary()
					_ = yym2751
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2743[2] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2752 := z.EncBinary()
					_ = yym2752
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2743 || yy2arr2743 {
				if yyq2743[3] {
					yym2754 := z.EncBinary()
					_ = yym2754
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2743[3] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym2755 := z.EncBinary()
					_ = yym2755
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2743 || yy2arr2743 {
				if yyq2743[4] {
					yym2757 := z.EncBinary()
					_ = yym2757
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2743[4] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2758 := z.EncBinary()
					_ = yym2758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2743 || yy2arr2743 {
				if yyq2743[5] {
					yym2760 := z.EncBinary()
					_ = yym2760
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2743[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym2761 := z.EncBinary()
					_ = yym2761
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2743 || yy2arr2743 {
				if yyq2743[6] {
					yym2763 := z.EncBinary()
					_ = yym2763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2743[6] {
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					yym2764 := z.EncBinary()
					_ = yym2764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yysep2743 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2765 := z.DecBinary()
	_ = yym2765
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2766 := r.ReadMapStart()
			if yyl2766 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2766, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2766 := r.ReadArrayStart()
			if yyl2766 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2766, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2767Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2767Slc
	var yyhl2767 bool = l >= 0
	for yyj2767 := 0; ; yyj2767++ {
		if yyhl2767 {
			if yyj2767 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2767Slc = r.DecodeBytes(yys2767Slc, true, true)
		yys2767 := string(yys2767Slc)
		switch yys2767 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2767)
		} // end switch yys2767
	} // end for yyj2767
	if !yyhl2767 {
		r.ReadEnd()
	}
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2775 int
	var yyb2775 bool
	var yyhl2775 bool = l >= 0
	yyj2775++
	if yyhl2775 {
		yyb2775 = yyj2775 > l
	} else {
		yyb2775 = r.CheckBreak()
	}
	if yyb2775 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2775++
	if yyhl2775 {
		yyb2775 = yyj2775 > l
	} else {
		yyb2775 = r.CheckBreak()
	}
	if yyb2775 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj2775++
	if yyhl2775 {
		yyb2775 = yyj2775 > l
	} else {
		yyb2775 = r.CheckBreak()
	}
	if yyb2775 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2775++
	if yyhl2775 {
		yyb2775 = yyj2775 > l
	} else {
		yyb2775 = r.CheckBreak()
	}
	if yyb2775 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj2775++
	if yyhl2775 {
		yyb2775 = yyj2775 > l
	} else {
		yyb2775 = r.CheckBreak()
	}
	if yyb2775 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2775++
	if yyhl2775 {
		yyb2775 = yyj2775 > l
	} else {
		yyb2775 = r.CheckBreak()
	}
	if yyb2775 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2775++
	if yyhl2775 {
		yyb2775 = yyj2775 > l
	} else {
		yyb2775 = r.CheckBreak()
	}
	if yyb2775 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj2775++
		if yyhl2775 {
			yyb2775 = yyj2775 > l
		} else {
			yyb2775 = r.CheckBreak()
		}
		if yyb2775 {
			break
		}
		z.DecStructFieldNotFound(yyj2775-1, "")
	}
	r.ReadEnd()
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2783 := z.EncBinary()
		_ = yym2783
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2784 := !z.EncBinary()
			yy2arr2784 := z.EncBasicHandle().StructToArray
			var yyq2784 [1]bool
			_, _, _ = yysep2784, yyq2784, yy2arr2784
			const yyr2784 bool = false
			yyq2784[0] = x.Name != ""
			if yyr2784 || yy2arr2784 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2784 int = 0
				for _, b := range yyq2784 {
					if b {
						yynn2784++
					}
				}
				r.EncodeMapStart(yynn2784)
			}
			if yyr2784 || yy2arr2784 {
				if yyq2784[0] {
					yym2786 := z.EncBinary()
					_ = yym2786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2784[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2787 := z.EncBinary()
					_ = yym2787
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yysep2784 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2788 := z.DecBinary()
	_ = yym2788
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2789 := r.ReadMapStart()
			if yyl2789 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2789, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2789 := r.ReadArrayStart()
			if yyl2789 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2789, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2790Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2790Slc
	var yyhl2790 bool = l >= 0
	for yyj2790 := 0; ; yyj2790++ {
		if yyhl2790 {
			if yyj2790 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2790Slc = r.DecodeBytes(yys2790Slc, true, true)
		yys2790 := string(yys2790Slc)
		switch yys2790 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2790)
		} // end switch yys2790
	} // end for yyj2790
	if !yyhl2790 {
		r.ReadEnd()
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2792 int
	var yyb2792 bool
	var yyhl2792 bool = l >= 0
	yyj2792++
	if yyhl2792 {
		yyb2792 = yyj2792 > l
	} else {
		yyb2792 = r.CheckBreak()
	}
	if yyb2792 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj2792++
		if yyhl2792 {
			yyb2792 = yyj2792 > l
		} else {
			yyb2792 = r.CheckBreak()
		}
		if yyb2792 {
			break
		}
		z.DecStructFieldNotFound(yyj2792-1, "")
	}
	r.ReadEnd()
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2794 := z.EncBinary()
		_ = yym2794
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2795 := !z.EncBinary()
			yy2arr2795 := z.EncBasicHandle().StructToArray
			var yyq2795 [3]bool
			_, _, _ = yysep2795, yyq2795, yy2arr2795
			const yyr2795 bool = false
			yyq2795[0] = x.Kind != ""
			yyq2795[1] = x.APIVersion != ""
			yyq2795[2] = true
			if yyr2795 || yy2arr2795 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2795 int = 0
				for _, b := range yyq2795 {
					if b {
						yynn2795++
					}
				}
				r.EncodeMapStart(yynn2795)
			}
			if yyr2795 || yy2arr2795 {
				if yyq2795[0] {
					yym2797 := z.EncBinary()
					_ = yym2797
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2795[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2798 := z.EncBinary()
					_ = yym2798
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2795 || yy2arr2795 {
				if yyq2795[1] {
					yym2800 := z.EncBinary()
					_ = yym2800
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2795[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2801 := z.EncBinary()
					_ = yym2801
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2795 || yy2arr2795 {
				if yyq2795[2] {
					yy2803 := &x.Reference
					yy2803.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2795[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					yy2804 := &x.Reference
					yy2804.CodecEncodeSelf(e)
				}
			}
			if yysep2795 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2805 := z.DecBinary()
	_ = yym2805
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2806 := r.ReadMapStart()
			if yyl2806 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2806, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2806 := r.ReadArrayStart()
			if yyl2806 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2806, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2807Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2807Slc
	var yyhl2807 bool = l >= 0
	for yyj2807 := 0; ; yyj2807++ {
		if yyhl2807 {
			if yyj2807 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2807Slc = r.DecodeBytes(yys2807Slc, true, true)
		yys2807 := string(yys2807Slc)
		switch yys2807 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv2810 := &x.Reference
				yyv2810.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2807)
		} // end switch yys2807
	} // end for yyj2807
	if !yyhl2807 {
		r.ReadEnd()
	}
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2811 int
	var yyb2811 bool
	var yyhl2811 bool = l >= 0
	yyj2811++
	if yyhl2811 {
		yyb2811 = yyj2811 > l
	} else {
		yyb2811 = r.CheckBreak()
	}
	if yyb2811 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2811++
	if yyhl2811 {
		yyb2811 = yyj2811 > l
	} else {
		yyb2811 = r.CheckBreak()
	}
	if yyb2811 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2811++
	if yyhl2811 {
		yyb2811 = yyj2811 > l
	} else {
		yyb2811 = r.CheckBreak()
	}
	if yyb2811 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv2814 := &x.Reference
		yyv2814.CodecDecodeSelf(d)
	}
	for {
		yyj2811++
		if yyhl2811 {
			yyb2811 = yyj2811 > l
		} else {
			yyb2811 = r.CheckBreak()
		}
		if yyb2811 {
			break
		}
		z.DecStructFieldNotFound(yyj2811-1, "")
	}
	r.ReadEnd()
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2815 := z.EncBinary()
		_ = yym2815
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2816 := !z.EncBinary()
			yy2arr2816 := z.EncBasicHandle().StructToArray
			var yyq2816 [2]bool
			_, _, _ = yysep2816, yyq2816, yy2arr2816
			const yyr2816 bool = false
			yyq2816[0] = x.Component != ""
			yyq2816[1] = x.Host != ""
			if yyr2816 || yy2arr2816 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2816 int = 0
				for _, b := range yyq2816 {
					if b {
						yynn2816++
					}
				}
				r.EncodeMapStart(yynn2816)
			}
			if yyr2816 || yy2arr2816 {
				if yyq2816[0] {
					yym2818 := z.EncBinary()
					_ = yym2818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2816[0] {
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					yym2819 := z.EncBinary()
					_ = yym2819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr2816 || yy2arr2816 {
				if yyq2816[1] {
					yym2821 := z.EncBinary()
					_ = yym2821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2816[1] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym2822 := z.EncBinary()
					_ = yym2822
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yysep2816 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2823 := z.DecBinary()
	_ = yym2823
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2824 := r.ReadMapStart()
			if yyl2824 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2824, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2824 := r.ReadArrayStart()
			if yyl2824 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2824, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2825Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2825Slc
	var yyhl2825 bool = l >= 0
	for yyj2825 := 0; ; yyj2825++ {
		if yyhl2825 {
			if yyj2825 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2825Slc = r.DecodeBytes(yys2825Slc, true, true)
		yys2825 := string(yys2825Slc)
		switch yys2825 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2825)
		} // end switch yys2825
	} // end for yyj2825
	if !yyhl2825 {
		r.ReadEnd()
	}
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2828 int
	var yyb2828 bool
	var yyhl2828 bool = l >= 0
	yyj2828++
	if yyhl2828 {
		yyb2828 = yyj2828 > l
	} else {
		yyb2828 = r.CheckBreak()
	}
	if yyb2828 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj2828++
	if yyhl2828 {
		yyb2828 = yyj2828 > l
	} else {
		yyb2828 = r.CheckBreak()
	}
	if yyb2828 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj2828++
		if yyhl2828 {
			yyb2828 = yyj2828 > l
		} else {
			yyb2828 = r.CheckBreak()
		}
		if yyb2828 {
			break
		}
		z.DecStructFieldNotFound(yyj2828-1, "")
	}
	r.ReadEnd()
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2831 := z.EncBinary()
		_ = yym2831
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2832 := !z.EncBinary()
			yy2arr2832 := z.EncBasicHandle().StructToArray
			var yyq2832 [10]bool
			_, _, _ = yysep2832, yyq2832, yy2arr2832
			const yyr2832 bool = false
			yyq2832[0] = x.Kind != ""
			yyq2832[1] = x.APIVersion != ""
			yyq2832[4] = x.Reason != ""
			yyq2832[5] = x.Message != ""
			yyq2832[6] = true
			yyq2832[7] = true
			yyq2832[8] = true
			yyq2832[9] = x.Count != 0
			if yyr2832 || yy2arr2832 {
				r.EncodeArrayStart(10)
			} else {
				var yynn2832 int = 2
				for _, b := range yyq2832 {
					if b {
						yynn2832++
					}
				}
				r.EncodeMapStart(yynn2832)
			}
			if yyr2832 || yy2arr2832 {
				if yyq2832[0] {
					yym2834 := z.EncBinary()
					_ = yym2834
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2832[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2835 := z.EncBinary()
					_ = yym2835
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2832 || yy2arr2832 {
				if yyq2832[1] {
					yym2837 := z.EncBinary()
					_ = yym2837
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2832[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2838 := z.EncBinary()
					_ = yym2838
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2832 || yy2arr2832 {
				yy2840 := &x.ObjectMeta
				yy2840.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				yy2841 := &x.ObjectMeta
				yy2841.CodecEncodeSelf(e)
			}
			if yyr2832 || yy2arr2832 {
				yy2843 := &x.InvolvedObject
				yy2843.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				yy2844 := &x.InvolvedObject
				yy2844.CodecEncodeSelf(e)
			}
			if yyr2832 || yy2arr2832 {
				if yyq2832[4] {
					yym2846 := z.EncBinary()
					_ = yym2846
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2832[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym2847 := z.EncBinary()
					_ = yym2847
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2832 || yy2arr2832 {
				if yyq2832[5] {
					yym2849 := z.EncBinary()
					_ = yym2849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2832[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym2850 := z.EncBinary()
					_ = yym2850
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2832 || yy2arr2832 {
				if yyq2832[6] {
					yy2852 := &x.Source
					yy2852.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2832[6] {
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					yy2853 := &x.Source
					yy2853.CodecEncodeSelf(e)
				}
			}
			if yyr2832 || yy2arr2832 {
				if yyq2832[7] {
					yy2855 := &x.FirstTimestamp
					yym2856 := z.EncBinary()
					_ = yym2856
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2855) {
					} else if yym2856 {
						z.EncBinaryMarshal(yy2855)
					} else if !yym2856 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2855)
					} else {
						z.EncFallback(yy2855)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2832[7] {
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					yy2857 := &x.FirstTimestamp
					yym2858 := z.EncBinary()
					_ = yym2858
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2857) {
					} else if yym2858 {
						z.EncBinaryMarshal(yy2857)
					} else if !yym2858 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2857)
					} else {
						z.EncFallback(yy2857)
					}
				}
			}
			if yyr2832 || yy2arr2832 {
				if yyq2832[8] {
					yy2860 := &x.LastTimestamp
					yym2861 := z.EncBinary()
					_ = yym2861
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2860) {
					} else if yym2861 {
						z.EncBinaryMarshal(yy2860)
					} else if !yym2861 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2860)
					} else {
						z.EncFallback(yy2860)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2832[8] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					yy2862 := &x.LastTimestamp
					yym2863 := z.EncBinary()
					_ = yym2863
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2862) {
					} else if yym2863 {
						z.EncBinaryMarshal(yy2862)
					} else if !yym2863 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2862)
					} else {
						z.EncFallback(yy2862)
					}
				}
			}
			if yyr2832 || yy2arr2832 {
				if yyq2832[9] {
					yym2865 := z.EncBinary()
					_ = yym2865
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2832[9] {
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					yym2866 := z.EncBinary()
					_ = yym2866
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yysep2832 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2867 := z.DecBinary()
	_ = yym2867
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2868 := r.ReadMapStart()
			if yyl2868 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2868, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2868 := r.ReadArrayStart()
			if yyl2868 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2868, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2869Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2869Slc
	var yyhl2869 bool = l >= 0
	for yyj2869 := 0; ; yyj2869++ {
		if yyhl2869 {
			if yyj2869 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2869Slc = r.DecodeBytes(yys2869Slc, true, true)
		yys2869 := string(yys2869Slc)
		switch yys2869 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2872 := &x.ObjectMeta
				yyv2872.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv2873 := &x.InvolvedObject
				yyv2873.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv2876 := &x.Source
				yyv2876.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2877 := &x.FirstTimestamp
				yym2878 := z.DecBinary()
				_ = yym2878
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2877) {
				} else if yym2878 {
					z.DecBinaryUnmarshal(yyv2877)
				} else if !yym2878 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2877)
				} else {
					z.DecFallback(yyv2877, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2879 := &x.LastTimestamp
				yym2880 := z.DecBinary()
				_ = yym2880
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2879) {
				} else if yym2880 {
					z.DecBinaryUnmarshal(yyv2879)
				} else if !yym2880 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2879)
				} else {
					z.DecFallback(yyv2879, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2869)
		} // end switch yys2869
	} // end for yyj2869
	if !yyhl2869 {
		r.ReadEnd()
	}
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2882 int
	var yyb2882 bool
	var yyhl2882 bool = l >= 0
	yyj2882++
	if yyhl2882 {
		yyb2882 = yyj2882 > l
	} else {
		yyb2882 = r.CheckBreak()
	}
	if yyb2882 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2882++
	if yyhl2882 {
		yyb2882 = yyj2882 > l
	} else {
		yyb2882 = r.CheckBreak()
	}
	if yyb2882 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2882++
	if yyhl2882 {
		yyb2882 = yyj2882 > l
	} else {
		yyb2882 = r.CheckBreak()
	}
	if yyb2882 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2885 := &x.ObjectMeta
		yyv2885.CodecDecodeSelf(d)
	}
	yyj2882++
	if yyhl2882 {
		yyb2882 = yyj2882 > l
	} else {
		yyb2882 = r.CheckBreak()
	}
	if yyb2882 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv2886 := &x.InvolvedObject
		yyv2886.CodecDecodeSelf(d)
	}
	yyj2882++
	if yyhl2882 {
		yyb2882 = yyj2882 > l
	} else {
		yyb2882 = r.CheckBreak()
	}
	if yyb2882 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2882++
	if yyhl2882 {
		yyb2882 = yyj2882 > l
	} else {
		yyb2882 = r.CheckBreak()
	}
	if yyb2882 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2882++
	if yyhl2882 {
		yyb2882 = yyj2882 > l
	} else {
		yyb2882 = r.CheckBreak()
	}
	if yyb2882 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv2889 := &x.Source
		yyv2889.CodecDecodeSelf(d)
	}
	yyj2882++
	if yyhl2882 {
		yyb2882 = yyj2882 > l
	} else {
		yyb2882 = r.CheckBreak()
	}
	if yyb2882 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2890 := &x.FirstTimestamp
		yym2891 := z.DecBinary()
		_ = yym2891
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2890) {
		} else if yym2891 {
			z.DecBinaryUnmarshal(yyv2890)
		} else if !yym2891 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2890)
		} else {
			z.DecFallback(yyv2890, false)
		}
	}
	yyj2882++
	if yyhl2882 {
		yyb2882 = yyj2882 > l
	} else {
		yyb2882 = r.CheckBreak()
	}
	if yyb2882 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2892 := &x.LastTimestamp
		yym2893 := z.DecBinary()
		_ = yym2893
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2892) {
		} else if yym2893 {
			z.DecBinaryUnmarshal(yyv2892)
		} else if !yym2893 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2892)
		} else {
			z.DecFallback(yyv2892, false)
		}
	}
	yyj2882++
	if yyhl2882 {
		yyb2882 = yyj2882 > l
	} else {
		yyb2882 = r.CheckBreak()
	}
	if yyb2882 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2882++
		if yyhl2882 {
			yyb2882 = yyj2882 > l
		} else {
			yyb2882 = r.CheckBreak()
		}
		if yyb2882 {
			break
		}
		z.DecStructFieldNotFound(yyj2882-1, "")
	}
	r.ReadEnd()
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2895 := z.EncBinary()
		_ = yym2895
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2896 := !z.EncBinary()
			yy2arr2896 := z.EncBasicHandle().StructToArray
			var yyq2896 [4]bool
			_, _, _ = yysep2896, yyq2896, yy2arr2896
			const yyr2896 bool = false
			yyq2896[0] = x.Kind != ""
			yyq2896[1] = x.APIVersion != ""
			yyq2896[2] = true
			if yyr2896 || yy2arr2896 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2896 int = 1
				for _, b := range yyq2896 {
					if b {
						yynn2896++
					}
				}
				r.EncodeMapStart(yynn2896)
			}
			if yyr2896 || yy2arr2896 {
				if yyq2896[0] {
					yym2898 := z.EncBinary()
					_ = yym2898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2896[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2899 := z.EncBinary()
					_ = yym2899
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2896 || yy2arr2896 {
				if yyq2896[1] {
					yym2901 := z.EncBinary()
					_ = yym2901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2896[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2902 := z.EncBinary()
					_ = yym2902
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2896 || yy2arr2896 {
				if yyq2896[2] {
					yy2904 := &x.ListMeta
					yym2905 := z.EncBinary()
					_ = yym2905
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2904) {
					} else {
						z.EncFallback(yy2904)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2896[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2906 := &x.ListMeta
					yym2907 := z.EncBinary()
					_ = yym2907
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2906) {
					} else {
						z.EncFallback(yy2906)
					}
				}
			}
			if yyr2896 || yy2arr2896 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2909 := z.EncBinary()
					_ = yym2909
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2910 := z.EncBinary()
					_ = yym2910
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yysep2896 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2911 := z.DecBinary()
	_ = yym2911
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2912 := r.ReadMapStart()
			if yyl2912 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2912, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2912 := r.ReadArrayStart()
			if yyl2912 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2912, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2913Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2913Slc
	var yyhl2913 bool = l >= 0
	for yyj2913 := 0; ; yyj2913++ {
		if yyhl2913 {
			if yyj2913 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2913Slc = r.DecodeBytes(yys2913Slc, true, true)
		yys2913 := string(yys2913Slc)
		switch yys2913 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2916 := &x.ListMeta
				yym2917 := z.DecBinary()
				_ = yym2917
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2916) {
				} else {
					z.DecFallback(yyv2916, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2918 := &x.Items
				yym2919 := z.DecBinary()
				_ = yym2919
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv2918), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2913)
		} // end switch yys2913
	} // end for yyj2913
	if !yyhl2913 {
		r.ReadEnd()
	}
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2920 int
	var yyb2920 bool
	var yyhl2920 bool = l >= 0
	yyj2920++
	if yyhl2920 {
		yyb2920 = yyj2920 > l
	} else {
		yyb2920 = r.CheckBreak()
	}
	if yyb2920 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2920++
	if yyhl2920 {
		yyb2920 = yyj2920 > l
	} else {
		yyb2920 = r.CheckBreak()
	}
	if yyb2920 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2920++
	if yyhl2920 {
		yyb2920 = yyj2920 > l
	} else {
		yyb2920 = r.CheckBreak()
	}
	if yyb2920 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2923 := &x.ListMeta
		yym2924 := z.DecBinary()
		_ = yym2924
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2923) {
		} else {
			z.DecFallback(yyv2923, false)
		}
	}
	yyj2920++
	if yyhl2920 {
		yyb2920 = yyj2920 > l
	} else {
		yyb2920 = r.CheckBreak()
	}
	if yyb2920 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2925 := &x.Items
		yym2926 := z.DecBinary()
		_ = yym2926
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv2925), d)
		}
	}
	for {
		yyj2920++
		if yyhl2920 {
			yyb2920 = yyj2920 > l
		} else {
			yyb2920 = r.CheckBreak()
		}
		if yyb2920 {
			break
		}
		z.DecStructFieldNotFound(yyj2920-1, "")
	}
	r.ReadEnd()
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2927 := z.EncBinary()
		_ = yym2927
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2928 := !z.EncBinary()
			yy2arr2928 := z.EncBasicHandle().StructToArray
			var yyq2928 [4]bool
			_, _, _ = yysep2928, yyq2928, yy2arr2928
			const yyr2928 bool = false
			yyq2928[0] = x.Kind != ""
			yyq2928[1] = x.APIVersion != ""
			yyq2928[2] = true
			if yyr2928 || yy2arr2928 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2928 int = 1
				for _, b := range yyq2928 {
					if b {
						yynn2928++
					}
				}
				r.EncodeMapStart(yynn2928)
			}
			if yyr2928 || yy2arr2928 {
				if yyq2928[0] {
					yym2930 := z.EncBinary()
					_ = yym2930
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2928[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2931 := z.EncBinary()
					_ = yym2931
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2928 || yy2arr2928 {
				if yyq2928[1] {
					yym2933 := z.EncBinary()
					_ = yym2933
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2928[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2934 := z.EncBinary()
					_ = yym2934
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2928 || yy2arr2928 {
				if yyq2928[2] {
					yy2936 := &x.ListMeta
					yym2937 := z.EncBinary()
					_ = yym2937
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2936) {
					} else {
						z.EncFallback(yy2936)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2928[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2938 := &x.ListMeta
					yym2939 := z.EncBinary()
					_ = yym2939
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2938) {
					} else {
						z.EncFallback(yy2938)
					}
				}
			}
			if yyr2928 || yy2arr2928 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2941 := z.EncBinary()
					_ = yym2941
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg6_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2942 := z.EncBinary()
					_ = yym2942
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg6_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yysep2928 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2943 := z.DecBinary()
	_ = yym2943
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2944 := r.ReadMapStart()
			if yyl2944 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2944, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2944 := r.ReadArrayStart()
			if yyl2944 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2944, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2945Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2945Slc
	var yyhl2945 bool = l >= 0
	for yyj2945 := 0; ; yyj2945++ {
		if yyhl2945 {
			if yyj2945 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2945Slc = r.DecodeBytes(yys2945Slc, true, true)
		yys2945 := string(yys2945Slc)
		switch yys2945 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2948 := &x.ListMeta
				yym2949 := z.DecBinary()
				_ = yym2949
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2948) {
				} else {
					z.DecFallback(yyv2948, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2950 := &x.Items
				yym2951 := z.DecBinary()
				_ = yym2951
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg6_runtime.RawExtension)(yyv2950), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2945)
		} // end switch yys2945
	} // end for yyj2945
	if !yyhl2945 {
		r.ReadEnd()
	}
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2952 int
	var yyb2952 bool
	var yyhl2952 bool = l >= 0
	yyj2952++
	if yyhl2952 {
		yyb2952 = yyj2952 > l
	} else {
		yyb2952 = r.CheckBreak()
	}
	if yyb2952 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2952++
	if yyhl2952 {
		yyb2952 = yyj2952 > l
	} else {
		yyb2952 = r.CheckBreak()
	}
	if yyb2952 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2952++
	if yyhl2952 {
		yyb2952 = yyj2952 > l
	} else {
		yyb2952 = r.CheckBreak()
	}
	if yyb2952 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2955 := &x.ListMeta
		yym2956 := z.DecBinary()
		_ = yym2956
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2955) {
		} else {
			z.DecFallback(yyv2955, false)
		}
	}
	yyj2952++
	if yyhl2952 {
		yyb2952 = yyj2952 > l
	} else {
		yyb2952 = r.CheckBreak()
	}
	if yyb2952 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2957 := &x.Items
		yym2958 := z.DecBinary()
		_ = yym2958
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg6_runtime.RawExtension)(yyv2957), d)
		}
	}
	for {
		yyj2952++
		if yyhl2952 {
			yyb2952 = yyj2952 > l
		} else {
			yyb2952 = r.CheckBreak()
		}
		if yyb2952 {
			break
		}
		z.DecStructFieldNotFound(yyj2952-1, "")
	}
	r.ReadEnd()
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2959 := z.EncBinary()
	_ = yym2959
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2960 := z.DecBinary()
	_ = yym2960
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2961 := z.EncBinary()
		_ = yym2961
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2962 := !z.EncBinary()
			yy2arr2962 := z.EncBasicHandle().StructToArray
			var yyq2962 [6]bool
			_, _, _ = yysep2962, yyq2962, yy2arr2962
			const yyr2962 bool = false
			yyq2962[0] = x.Type != ""
			yyq2962[1] = len(x.Max) != 0
			yyq2962[2] = len(x.Min) != 0
			yyq2962[3] = len(x.Default) != 0
			yyq2962[4] = len(x.DefaultRequest) != 0
			yyq2962[5] = len(x.MaxLimitRequestRatio) != 0
			if yyr2962 || yy2arr2962 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2962 int = 0
				for _, b := range yyq2962 {
					if b {
						yynn2962++
					}
				}
				r.EncodeMapStart(yynn2962)
			}
			if yyr2962 || yy2arr2962 {
				if yyq2962[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2962[0] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2962 || yy2arr2962 {
				if yyq2962[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2962[1] {
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2962 || yy2arr2962 {
				if yyq2962[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2962[2] {
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2962 || yy2arr2962 {
				if yyq2962[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2962[3] {
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2962 || yy2arr2962 {
				if yyq2962[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2962[4] {
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2962 || yy2arr2962 {
				if yyq2962[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2962[5] {
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yysep2962 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2969 := z.DecBinary()
	_ = yym2969
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2970 := r.ReadMapStart()
			if yyl2970 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2970, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2970 := r.ReadArrayStart()
			if yyl2970 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2970, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2971Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2971Slc
	var yyhl2971 bool = l >= 0
	for yyj2971 := 0; ; yyj2971++ {
		if yyhl2971 {
			if yyj2971 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2971Slc = r.DecodeBytes(yys2971Slc, true, true)
		yys2971 := string(yys2971Slc)
		switch yys2971 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv2973 := &x.Max
				yyv2973.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv2974 := &x.Min
				yyv2974.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv2975 := &x.Default
				yyv2975.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv2976 := &x.DefaultRequest
				yyv2976.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv2977 := &x.MaxLimitRequestRatio
				yyv2977.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2971)
		} // end switch yys2971
	} // end for yyj2971
	if !yyhl2971 {
		r.ReadEnd()
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2978 int
	var yyb2978 bool
	var yyhl2978 bool = l >= 0
	yyj2978++
	if yyhl2978 {
		yyb2978 = yyj2978 > l
	} else {
		yyb2978 = r.CheckBreak()
	}
	if yyb2978 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj2978++
	if yyhl2978 {
		yyb2978 = yyj2978 > l
	} else {
		yyb2978 = r.CheckBreak()
	}
	if yyb2978 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv2980 := &x.Max
		yyv2980.CodecDecodeSelf(d)
	}
	yyj2978++
	if yyhl2978 {
		yyb2978 = yyj2978 > l
	} else {
		yyb2978 = r.CheckBreak()
	}
	if yyb2978 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv2981 := &x.Min
		yyv2981.CodecDecodeSelf(d)
	}
	yyj2978++
	if yyhl2978 {
		yyb2978 = yyj2978 > l
	} else {
		yyb2978 = r.CheckBreak()
	}
	if yyb2978 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv2982 := &x.Default
		yyv2982.CodecDecodeSelf(d)
	}
	yyj2978++
	if yyhl2978 {
		yyb2978 = yyj2978 > l
	} else {
		yyb2978 = r.CheckBreak()
	}
	if yyb2978 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv2983 := &x.DefaultRequest
		yyv2983.CodecDecodeSelf(d)
	}
	yyj2978++
	if yyhl2978 {
		yyb2978 = yyj2978 > l
	} else {
		yyb2978 = r.CheckBreak()
	}
	if yyb2978 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv2984 := &x.MaxLimitRequestRatio
		yyv2984.CodecDecodeSelf(d)
	}
	for {
		yyj2978++
		if yyhl2978 {
			yyb2978 = yyj2978 > l
		} else {
			yyb2978 = r.CheckBreak()
		}
		if yyb2978 {
			break
		}
		z.DecStructFieldNotFound(yyj2978-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2985 := z.EncBinary()
		_ = yym2985
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2986 := !z.EncBinary()
			yy2arr2986 := z.EncBasicHandle().StructToArray
			var yyq2986 [1]bool
			_, _, _ = yysep2986, yyq2986, yy2arr2986
			const yyr2986 bool = false
			if yyr2986 || yy2arr2986 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2986 int = 1
				for _, b := range yyq2986 {
					if b {
						yynn2986++
					}
				}
				r.EncodeMapStart(yynn2986)
			}
			if yyr2986 || yy2arr2986 {
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym2988 := z.EncBinary()
					_ = yym2988
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym2989 := z.EncBinary()
					_ = yym2989
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yysep2986 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2990 := z.DecBinary()
	_ = yym2990
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2991 := r.ReadMapStart()
			if yyl2991 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2991, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2991 := r.ReadArrayStart()
			if yyl2991 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2991, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2992Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2992Slc
	var yyhl2992 bool = l >= 0
	for yyj2992 := 0; ; yyj2992++ {
		if yyhl2992 {
			if yyj2992 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2992Slc = r.DecodeBytes(yys2992Slc, true, true)
		yys2992 := string(yys2992Slc)
		switch yys2992 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv2993 := &x.Limits
				yym2994 := z.DecBinary()
				_ = yym2994
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv2993), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2992)
		} // end switch yys2992
	} // end for yyj2992
	if !yyhl2992 {
		r.ReadEnd()
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2995 int
	var yyb2995 bool
	var yyhl2995 bool = l >= 0
	yyj2995++
	if yyhl2995 {
		yyb2995 = yyj2995 > l
	} else {
		yyb2995 = r.CheckBreak()
	}
	if yyb2995 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv2996 := &x.Limits
		yym2997 := z.DecBinary()
		_ = yym2997
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv2996), d)
		}
	}
	for {
		yyj2995++
		if yyhl2995 {
			yyb2995 = yyj2995 > l
		} else {
			yyb2995 = r.CheckBreak()
		}
		if yyb2995 {
			break
		}
		z.DecStructFieldNotFound(yyj2995-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2998 := z.EncBinary()
		_ = yym2998
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2999 := !z.EncBinary()
			yy2arr2999 := z.EncBasicHandle().StructToArray
			var yyq2999 [4]bool
			_, _, _ = yysep2999, yyq2999, yy2arr2999
			const yyr2999 bool = false
			yyq2999[0] = x.Kind != ""
			yyq2999[1] = x.APIVersion != ""
			yyq2999[2] = true
			yyq2999[3] = true
			if yyr2999 || yy2arr2999 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2999 int = 0
				for _, b := range yyq2999 {
					if b {
						yynn2999++
					}
				}
				r.EncodeMapStart(yynn2999)
			}
			if yyr2999 || yy2arr2999 {
				if yyq2999[0] {
					yym3001 := z.EncBinary()
					_ = yym3001
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2999[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3002 := z.EncBinary()
					_ = yym3002
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2999 || yy2arr2999 {
				if yyq2999[1] {
					yym3004 := z.EncBinary()
					_ = yym3004
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2999[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3005 := z.EncBinary()
					_ = yym3005
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2999 || yy2arr2999 {
				if yyq2999[2] {
					yy3007 := &x.ObjectMeta
					yy3007.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2999[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3008 := &x.ObjectMeta
					yy3008.CodecEncodeSelf(e)
				}
			}
			if yyr2999 || yy2arr2999 {
				if yyq2999[3] {
					yy3010 := &x.Spec
					yy3010.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2999[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3011 := &x.Spec
					yy3011.CodecEncodeSelf(e)
				}
			}
			if yysep2999 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3012 := z.DecBinary()
	_ = yym3012
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3013 := r.ReadMapStart()
			if yyl3013 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3013, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3013 := r.ReadArrayStart()
			if yyl3013 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3013, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3014Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3014Slc
	var yyhl3014 bool = l >= 0
	for yyj3014 := 0; ; yyj3014++ {
		if yyhl3014 {
			if yyj3014 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3014Slc = r.DecodeBytes(yys3014Slc, true, true)
		yys3014 := string(yys3014Slc)
		switch yys3014 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3017 := &x.ObjectMeta
				yyv3017.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3018 := &x.Spec
				yyv3018.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3014)
		} // end switch yys3014
	} // end for yyj3014
	if !yyhl3014 {
		r.ReadEnd()
	}
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3019 int
	var yyb3019 bool
	var yyhl3019 bool = l >= 0
	yyj3019++
	if yyhl3019 {
		yyb3019 = yyj3019 > l
	} else {
		yyb3019 = r.CheckBreak()
	}
	if yyb3019 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3019++
	if yyhl3019 {
		yyb3019 = yyj3019 > l
	} else {
		yyb3019 = r.CheckBreak()
	}
	if yyb3019 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3019++
	if yyhl3019 {
		yyb3019 = yyj3019 > l
	} else {
		yyb3019 = r.CheckBreak()
	}
	if yyb3019 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3022 := &x.ObjectMeta
		yyv3022.CodecDecodeSelf(d)
	}
	yyj3019++
	if yyhl3019 {
		yyb3019 = yyj3019 > l
	} else {
		yyb3019 = r.CheckBreak()
	}
	if yyb3019 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3023 := &x.Spec
		yyv3023.CodecDecodeSelf(d)
	}
	for {
		yyj3019++
		if yyhl3019 {
			yyb3019 = yyj3019 > l
		} else {
			yyb3019 = r.CheckBreak()
		}
		if yyb3019 {
			break
		}
		z.DecStructFieldNotFound(yyj3019-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3024 := z.EncBinary()
		_ = yym3024
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3025 := !z.EncBinary()
			yy2arr3025 := z.EncBasicHandle().StructToArray
			var yyq3025 [4]bool
			_, _, _ = yysep3025, yyq3025, yy2arr3025
			const yyr3025 bool = false
			yyq3025[0] = x.Kind != ""
			yyq3025[1] = x.APIVersion != ""
			yyq3025[2] = true
			if yyr3025 || yy2arr3025 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3025 int = 1
				for _, b := range yyq3025 {
					if b {
						yynn3025++
					}
				}
				r.EncodeMapStart(yynn3025)
			}
			if yyr3025 || yy2arr3025 {
				if yyq3025[0] {
					yym3027 := z.EncBinary()
					_ = yym3027
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3025[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3028 := z.EncBinary()
					_ = yym3028
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3025 || yy2arr3025 {
				if yyq3025[1] {
					yym3030 := z.EncBinary()
					_ = yym3030
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3025[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3031 := z.EncBinary()
					_ = yym3031
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3025 || yy2arr3025 {
				if yyq3025[2] {
					yy3033 := &x.ListMeta
					yym3034 := z.EncBinary()
					_ = yym3034
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3033) {
					} else {
						z.EncFallback(yy3033)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3025[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3035 := &x.ListMeta
					yym3036 := z.EncBinary()
					_ = yym3036
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3035) {
					} else {
						z.EncFallback(yy3035)
					}
				}
			}
			if yyr3025 || yy2arr3025 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3038 := z.EncBinary()
					_ = yym3038
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3039 := z.EncBinary()
					_ = yym3039
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yysep3025 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3040 := z.DecBinary()
	_ = yym3040
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3041 := r.ReadMapStart()
			if yyl3041 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3041, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3041 := r.ReadArrayStart()
			if yyl3041 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3041, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3042Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3042Slc
	var yyhl3042 bool = l >= 0
	for yyj3042 := 0; ; yyj3042++ {
		if yyhl3042 {
			if yyj3042 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3042Slc = r.DecodeBytes(yys3042Slc, true, true)
		yys3042 := string(yys3042Slc)
		switch yys3042 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3045 := &x.ListMeta
				yym3046 := z.DecBinary()
				_ = yym3046
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3045) {
				} else {
					z.DecFallback(yyv3045, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3047 := &x.Items
				yym3048 := z.DecBinary()
				_ = yym3048
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3047), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3042)
		} // end switch yys3042
	} // end for yyj3042
	if !yyhl3042 {
		r.ReadEnd()
	}
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3049 int
	var yyb3049 bool
	var yyhl3049 bool = l >= 0
	yyj3049++
	if yyhl3049 {
		yyb3049 = yyj3049 > l
	} else {
		yyb3049 = r.CheckBreak()
	}
	if yyb3049 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3049++
	if yyhl3049 {
		yyb3049 = yyj3049 > l
	} else {
		yyb3049 = r.CheckBreak()
	}
	if yyb3049 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3049++
	if yyhl3049 {
		yyb3049 = yyj3049 > l
	} else {
		yyb3049 = r.CheckBreak()
	}
	if yyb3049 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3052 := &x.ListMeta
		yym3053 := z.DecBinary()
		_ = yym3053
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3052) {
		} else {
			z.DecFallback(yyv3052, false)
		}
	}
	yyj3049++
	if yyhl3049 {
		yyb3049 = yyj3049 > l
	} else {
		yyb3049 = r.CheckBreak()
	}
	if yyb3049 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3054 := &x.Items
		yym3055 := z.DecBinary()
		_ = yym3055
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3054), d)
		}
	}
	for {
		yyj3049++
		if yyhl3049 {
			yyb3049 = yyj3049 > l
		} else {
			yyb3049 = r.CheckBreak()
		}
		if yyb3049 {
			break
		}
		z.DecStructFieldNotFound(yyj3049-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3056 := z.EncBinary()
		_ = yym3056
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3057 := !z.EncBinary()
			yy2arr3057 := z.EncBasicHandle().StructToArray
			var yyq3057 [1]bool
			_, _, _ = yysep3057, yyq3057, yy2arr3057
			const yyr3057 bool = false
			yyq3057[0] = len(x.Hard) != 0
			if yyr3057 || yy2arr3057 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3057 int = 0
				for _, b := range yyq3057 {
					if b {
						yynn3057++
					}
				}
				r.EncodeMapStart(yynn3057)
			}
			if yyr3057 || yy2arr3057 {
				if yyq3057[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3057[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3057 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3059 := z.DecBinary()
	_ = yym3059
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3060 := r.ReadMapStart()
			if yyl3060 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3060, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3060 := r.ReadArrayStart()
			if yyl3060 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3060, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3061Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3061Slc
	var yyhl3061 bool = l >= 0
	for yyj3061 := 0; ; yyj3061++ {
		if yyhl3061 {
			if yyj3061 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3061Slc = r.DecodeBytes(yys3061Slc, true, true)
		yys3061 := string(yys3061Slc)
		switch yys3061 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3062 := &x.Hard
				yyv3062.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3061)
		} // end switch yys3061
	} // end for yyj3061
	if !yyhl3061 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3063 int
	var yyb3063 bool
	var yyhl3063 bool = l >= 0
	yyj3063++
	if yyhl3063 {
		yyb3063 = yyj3063 > l
	} else {
		yyb3063 = r.CheckBreak()
	}
	if yyb3063 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3064 := &x.Hard
		yyv3064.CodecDecodeSelf(d)
	}
	for {
		yyj3063++
		if yyhl3063 {
			yyb3063 = yyj3063 > l
		} else {
			yyb3063 = r.CheckBreak()
		}
		if yyb3063 {
			break
		}
		z.DecStructFieldNotFound(yyj3063-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3065 := z.EncBinary()
		_ = yym3065
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3066 := !z.EncBinary()
			yy2arr3066 := z.EncBasicHandle().StructToArray
			var yyq3066 [2]bool
			_, _, _ = yysep3066, yyq3066, yy2arr3066
			const yyr3066 bool = false
			yyq3066[0] = len(x.Hard) != 0
			yyq3066[1] = len(x.Used) != 0
			if yyr3066 || yy2arr3066 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3066 int = 0
				for _, b := range yyq3066 {
					if b {
						yynn3066++
					}
				}
				r.EncodeMapStart(yynn3066)
			}
			if yyr3066 || yy2arr3066 {
				if yyq3066[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3066[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3066 || yy2arr3066 {
				if yyq3066[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3066[1] {
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3066 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3069 := z.DecBinary()
	_ = yym3069
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3070 := r.ReadMapStart()
			if yyl3070 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3070, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3070 := r.ReadArrayStart()
			if yyl3070 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3070, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3071Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3071Slc
	var yyhl3071 bool = l >= 0
	for yyj3071 := 0; ; yyj3071++ {
		if yyhl3071 {
			if yyj3071 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3071Slc = r.DecodeBytes(yys3071Slc, true, true)
		yys3071 := string(yys3071Slc)
		switch yys3071 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3072 := &x.Hard
				yyv3072.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3073 := &x.Used
				yyv3073.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3071)
		} // end switch yys3071
	} // end for yyj3071
	if !yyhl3071 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3074 int
	var yyb3074 bool
	var yyhl3074 bool = l >= 0
	yyj3074++
	if yyhl3074 {
		yyb3074 = yyj3074 > l
	} else {
		yyb3074 = r.CheckBreak()
	}
	if yyb3074 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3075 := &x.Hard
		yyv3075.CodecDecodeSelf(d)
	}
	yyj3074++
	if yyhl3074 {
		yyb3074 = yyj3074 > l
	} else {
		yyb3074 = r.CheckBreak()
	}
	if yyb3074 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3076 := &x.Used
		yyv3076.CodecDecodeSelf(d)
	}
	for {
		yyj3074++
		if yyhl3074 {
			yyb3074 = yyj3074 > l
		} else {
			yyb3074 = r.CheckBreak()
		}
		if yyb3074 {
			break
		}
		z.DecStructFieldNotFound(yyj3074-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3077 := z.EncBinary()
		_ = yym3077
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3078 := !z.EncBinary()
			yy2arr3078 := z.EncBasicHandle().StructToArray
			var yyq3078 [5]bool
			_, _, _ = yysep3078, yyq3078, yy2arr3078
			const yyr3078 bool = false
			yyq3078[0] = x.Kind != ""
			yyq3078[1] = x.APIVersion != ""
			yyq3078[2] = true
			yyq3078[3] = true
			yyq3078[4] = true
			if yyr3078 || yy2arr3078 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3078 int = 0
				for _, b := range yyq3078 {
					if b {
						yynn3078++
					}
				}
				r.EncodeMapStart(yynn3078)
			}
			if yyr3078 || yy2arr3078 {
				if yyq3078[0] {
					yym3080 := z.EncBinary()
					_ = yym3080
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3078[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3081 := z.EncBinary()
					_ = yym3081
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3078 || yy2arr3078 {
				if yyq3078[1] {
					yym3083 := z.EncBinary()
					_ = yym3083
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3078[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3084 := z.EncBinary()
					_ = yym3084
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3078 || yy2arr3078 {
				if yyq3078[2] {
					yy3086 := &x.ObjectMeta
					yy3086.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3078[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3087 := &x.ObjectMeta
					yy3087.CodecEncodeSelf(e)
				}
			}
			if yyr3078 || yy2arr3078 {
				if yyq3078[3] {
					yy3089 := &x.Spec
					yy3089.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3078[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3090 := &x.Spec
					yy3090.CodecEncodeSelf(e)
				}
			}
			if yyr3078 || yy2arr3078 {
				if yyq3078[4] {
					yy3092 := &x.Status
					yy3092.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3078[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy3093 := &x.Status
					yy3093.CodecEncodeSelf(e)
				}
			}
			if yysep3078 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3094 := z.DecBinary()
	_ = yym3094
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3095 := r.ReadMapStart()
			if yyl3095 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3095, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3095 := r.ReadArrayStart()
			if yyl3095 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3095, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3096Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3096Slc
	var yyhl3096 bool = l >= 0
	for yyj3096 := 0; ; yyj3096++ {
		if yyhl3096 {
			if yyj3096 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3096Slc = r.DecodeBytes(yys3096Slc, true, true)
		yys3096 := string(yys3096Slc)
		switch yys3096 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3099 := &x.ObjectMeta
				yyv3099.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3100 := &x.Spec
				yyv3100.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3101 := &x.Status
				yyv3101.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3096)
		} // end switch yys3096
	} // end for yyj3096
	if !yyhl3096 {
		r.ReadEnd()
	}
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3102 int
	var yyb3102 bool
	var yyhl3102 bool = l >= 0
	yyj3102++
	if yyhl3102 {
		yyb3102 = yyj3102 > l
	} else {
		yyb3102 = r.CheckBreak()
	}
	if yyb3102 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3102++
	if yyhl3102 {
		yyb3102 = yyj3102 > l
	} else {
		yyb3102 = r.CheckBreak()
	}
	if yyb3102 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3102++
	if yyhl3102 {
		yyb3102 = yyj3102 > l
	} else {
		yyb3102 = r.CheckBreak()
	}
	if yyb3102 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3105 := &x.ObjectMeta
		yyv3105.CodecDecodeSelf(d)
	}
	yyj3102++
	if yyhl3102 {
		yyb3102 = yyj3102 > l
	} else {
		yyb3102 = r.CheckBreak()
	}
	if yyb3102 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3106 := &x.Spec
		yyv3106.CodecDecodeSelf(d)
	}
	yyj3102++
	if yyhl3102 {
		yyb3102 = yyj3102 > l
	} else {
		yyb3102 = r.CheckBreak()
	}
	if yyb3102 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3107 := &x.Status
		yyv3107.CodecDecodeSelf(d)
	}
	for {
		yyj3102++
		if yyhl3102 {
			yyb3102 = yyj3102 > l
		} else {
			yyb3102 = r.CheckBreak()
		}
		if yyb3102 {
			break
		}
		z.DecStructFieldNotFound(yyj3102-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3108 := z.EncBinary()
		_ = yym3108
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3109 := !z.EncBinary()
			yy2arr3109 := z.EncBasicHandle().StructToArray
			var yyq3109 [4]bool
			_, _, _ = yysep3109, yyq3109, yy2arr3109
			const yyr3109 bool = false
			yyq3109[0] = x.Kind != ""
			yyq3109[1] = x.APIVersion != ""
			yyq3109[2] = true
			if yyr3109 || yy2arr3109 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3109 int = 1
				for _, b := range yyq3109 {
					if b {
						yynn3109++
					}
				}
				r.EncodeMapStart(yynn3109)
			}
			if yyr3109 || yy2arr3109 {
				if yyq3109[0] {
					yym3111 := z.EncBinary()
					_ = yym3111
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3109[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3112 := z.EncBinary()
					_ = yym3112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3109 || yy2arr3109 {
				if yyq3109[1] {
					yym3114 := z.EncBinary()
					_ = yym3114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3109[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3115 := z.EncBinary()
					_ = yym3115
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3109 || yy2arr3109 {
				if yyq3109[2] {
					yy3117 := &x.ListMeta
					yym3118 := z.EncBinary()
					_ = yym3118
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3117) {
					} else {
						z.EncFallback(yy3117)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3109[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3119 := &x.ListMeta
					yym3120 := z.EncBinary()
					_ = yym3120
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3119) {
					} else {
						z.EncFallback(yy3119)
					}
				}
			}
			if yyr3109 || yy2arr3109 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3122 := z.EncBinary()
					_ = yym3122
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3123 := z.EncBinary()
					_ = yym3123
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yysep3109 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3124 := z.DecBinary()
	_ = yym3124
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3125 := r.ReadMapStart()
			if yyl3125 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3125, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3125 := r.ReadArrayStart()
			if yyl3125 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3125, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3126Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3126Slc
	var yyhl3126 bool = l >= 0
	for yyj3126 := 0; ; yyj3126++ {
		if yyhl3126 {
			if yyj3126 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3126Slc = r.DecodeBytes(yys3126Slc, true, true)
		yys3126 := string(yys3126Slc)
		switch yys3126 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3129 := &x.ListMeta
				yym3130 := z.DecBinary()
				_ = yym3130
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3129) {
				} else {
					z.DecFallback(yyv3129, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3131 := &x.Items
				yym3132 := z.DecBinary()
				_ = yym3132
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3131), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3126)
		} // end switch yys3126
	} // end for yyj3126
	if !yyhl3126 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3133 int
	var yyb3133 bool
	var yyhl3133 bool = l >= 0
	yyj3133++
	if yyhl3133 {
		yyb3133 = yyj3133 > l
	} else {
		yyb3133 = r.CheckBreak()
	}
	if yyb3133 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3133++
	if yyhl3133 {
		yyb3133 = yyj3133 > l
	} else {
		yyb3133 = r.CheckBreak()
	}
	if yyb3133 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3133++
	if yyhl3133 {
		yyb3133 = yyj3133 > l
	} else {
		yyb3133 = r.CheckBreak()
	}
	if yyb3133 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3136 := &x.ListMeta
		yym3137 := z.DecBinary()
		_ = yym3137
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3136) {
		} else {
			z.DecFallback(yyv3136, false)
		}
	}
	yyj3133++
	if yyhl3133 {
		yyb3133 = yyj3133 > l
	} else {
		yyb3133 = r.CheckBreak()
	}
	if yyb3133 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3138 := &x.Items
		yym3139 := z.DecBinary()
		_ = yym3139
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3138), d)
		}
	}
	for {
		yyj3133++
		if yyhl3133 {
			yyb3133 = yyj3133 > l
		} else {
			yyb3133 = r.CheckBreak()
		}
		if yyb3133 {
			break
		}
		z.DecStructFieldNotFound(yyj3133-1, "")
	}
	r.ReadEnd()
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3140 := z.EncBinary()
		_ = yym3140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3141 := !z.EncBinary()
			yy2arr3141 := z.EncBasicHandle().StructToArray
			var yyq3141 [5]bool
			_, _, _ = yysep3141, yyq3141, yy2arr3141
			const yyr3141 bool = false
			yyq3141[0] = x.Kind != ""
			yyq3141[1] = x.APIVersion != ""
			yyq3141[2] = true
			yyq3141[3] = len(x.Data) != 0
			yyq3141[4] = x.Type != ""
			if yyr3141 || yy2arr3141 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3141 int = 0
				for _, b := range yyq3141 {
					if b {
						yynn3141++
					}
				}
				r.EncodeMapStart(yynn3141)
			}
			if yyr3141 || yy2arr3141 {
				if yyq3141[0] {
					yym3143 := z.EncBinary()
					_ = yym3143
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3141[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3144 := z.EncBinary()
					_ = yym3144
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3141 || yy2arr3141 {
				if yyq3141[1] {
					yym3146 := z.EncBinary()
					_ = yym3146
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3141[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3147 := z.EncBinary()
					_ = yym3147
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3141 || yy2arr3141 {
				if yyq3141[2] {
					yy3149 := &x.ObjectMeta
					yy3149.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3141[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3150 := &x.ObjectMeta
					yy3150.CodecEncodeSelf(e)
				}
			}
			if yyr3141 || yy2arr3141 {
				if yyq3141[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3152 := z.EncBinary()
						_ = yym3152
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3141[3] {
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3153 := z.EncBinary()
						_ = yym3153
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3141 || yy2arr3141 {
				if yyq3141[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3141[4] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yysep3141 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3155 := z.DecBinary()
	_ = yym3155
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3156 := r.ReadMapStart()
			if yyl3156 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3156, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3156 := r.ReadArrayStart()
			if yyl3156 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3156, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3157Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3157Slc
	var yyhl3157 bool = l >= 0
	for yyj3157 := 0; ; yyj3157++ {
		if yyhl3157 {
			if yyj3157 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3157Slc = r.DecodeBytes(yys3157Slc, true, true)
		yys3157 := string(yys3157Slc)
		switch yys3157 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3160 := &x.ObjectMeta
				yyv3160.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3161 := &x.Data
				yym3162 := z.DecBinary()
				_ = yym3162
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3161), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3157)
		} // end switch yys3157
	} // end for yyj3157
	if !yyhl3157 {
		r.ReadEnd()
	}
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3164 int
	var yyb3164 bool
	var yyhl3164 bool = l >= 0
	yyj3164++
	if yyhl3164 {
		yyb3164 = yyj3164 > l
	} else {
		yyb3164 = r.CheckBreak()
	}
	if yyb3164 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3164++
	if yyhl3164 {
		yyb3164 = yyj3164 > l
	} else {
		yyb3164 = r.CheckBreak()
	}
	if yyb3164 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3164++
	if yyhl3164 {
		yyb3164 = yyj3164 > l
	} else {
		yyb3164 = r.CheckBreak()
	}
	if yyb3164 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3167 := &x.ObjectMeta
		yyv3167.CodecDecodeSelf(d)
	}
	yyj3164++
	if yyhl3164 {
		yyb3164 = yyj3164 > l
	} else {
		yyb3164 = r.CheckBreak()
	}
	if yyb3164 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3168 := &x.Data
		yym3169 := z.DecBinary()
		_ = yym3169
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3168), d)
		}
	}
	yyj3164++
	if yyhl3164 {
		yyb3164 = yyj3164 > l
	} else {
		yyb3164 = r.CheckBreak()
	}
	if yyb3164 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj3164++
		if yyhl3164 {
			yyb3164 = yyj3164 > l
		} else {
			yyb3164 = r.CheckBreak()
		}
		if yyb3164 {
			break
		}
		z.DecStructFieldNotFound(yyj3164-1, "")
	}
	r.ReadEnd()
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3171 := z.EncBinary()
	_ = yym3171
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3172 := z.DecBinary()
	_ = yym3172
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3173 := z.EncBinary()
		_ = yym3173
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3174 := !z.EncBinary()
			yy2arr3174 := z.EncBasicHandle().StructToArray
			var yyq3174 [4]bool
			_, _, _ = yysep3174, yyq3174, yy2arr3174
			const yyr3174 bool = false
			yyq3174[0] = x.Kind != ""
			yyq3174[1] = x.APIVersion != ""
			yyq3174[2] = true
			if yyr3174 || yy2arr3174 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3174 int = 1
				for _, b := range yyq3174 {
					if b {
						yynn3174++
					}
				}
				r.EncodeMapStart(yynn3174)
			}
			if yyr3174 || yy2arr3174 {
				if yyq3174[0] {
					yym3176 := z.EncBinary()
					_ = yym3176
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3174[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3177 := z.EncBinary()
					_ = yym3177
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3174 || yy2arr3174 {
				if yyq3174[1] {
					yym3179 := z.EncBinary()
					_ = yym3179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3174[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3180 := z.EncBinary()
					_ = yym3180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3174 || yy2arr3174 {
				if yyq3174[2] {
					yy3182 := &x.ListMeta
					yym3183 := z.EncBinary()
					_ = yym3183
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3182) {
					} else {
						z.EncFallback(yy3182)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3174[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3184 := &x.ListMeta
					yym3185 := z.EncBinary()
					_ = yym3185
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3184) {
					} else {
						z.EncFallback(yy3184)
					}
				}
			}
			if yyr3174 || yy2arr3174 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3187 := z.EncBinary()
					_ = yym3187
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3188 := z.EncBinary()
					_ = yym3188
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yysep3174 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3189 := z.DecBinary()
	_ = yym3189
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3190 := r.ReadMapStart()
			if yyl3190 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3190, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3190 := r.ReadArrayStart()
			if yyl3190 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3190, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3191Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3191Slc
	var yyhl3191 bool = l >= 0
	for yyj3191 := 0; ; yyj3191++ {
		if yyhl3191 {
			if yyj3191 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3191Slc = r.DecodeBytes(yys3191Slc, true, true)
		yys3191 := string(yys3191Slc)
		switch yys3191 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3194 := &x.ListMeta
				yym3195 := z.DecBinary()
				_ = yym3195
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3194) {
				} else {
					z.DecFallback(yyv3194, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3196 := &x.Items
				yym3197 := z.DecBinary()
				_ = yym3197
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3196), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3191)
		} // end switch yys3191
	} // end for yyj3191
	if !yyhl3191 {
		r.ReadEnd()
	}
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3198 int
	var yyb3198 bool
	var yyhl3198 bool = l >= 0
	yyj3198++
	if yyhl3198 {
		yyb3198 = yyj3198 > l
	} else {
		yyb3198 = r.CheckBreak()
	}
	if yyb3198 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3198++
	if yyhl3198 {
		yyb3198 = yyj3198 > l
	} else {
		yyb3198 = r.CheckBreak()
	}
	if yyb3198 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3198++
	if yyhl3198 {
		yyb3198 = yyj3198 > l
	} else {
		yyb3198 = r.CheckBreak()
	}
	if yyb3198 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3201 := &x.ListMeta
		yym3202 := z.DecBinary()
		_ = yym3202
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3201) {
		} else {
			z.DecFallback(yyv3201, false)
		}
	}
	yyj3198++
	if yyhl3198 {
		yyb3198 = yyj3198 > l
	} else {
		yyb3198 = r.CheckBreak()
	}
	if yyb3198 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3203 := &x.Items
		yym3204 := z.DecBinary()
		_ = yym3204
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3203), d)
		}
	}
	for {
		yyj3198++
		if yyhl3198 {
			yyb3198 = yyj3198 > l
		} else {
			yyb3198 = r.CheckBreak()
		}
		if yyb3198 {
			break
		}
		z.DecStructFieldNotFound(yyj3198-1, "")
	}
	r.ReadEnd()
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3205 := z.EncBinary()
	_ = yym3205
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3206 := z.DecBinary()
	_ = yym3206
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3207 := z.EncBinary()
		_ = yym3207
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3208 := !z.EncBinary()
			yy2arr3208 := z.EncBasicHandle().StructToArray
			var yyq3208 [4]bool
			_, _, _ = yysep3208, yyq3208, yy2arr3208
			const yyr3208 bool = false
			yyq3208[2] = x.Message != ""
			yyq3208[3] = x.Error != ""
			if yyr3208 || yy2arr3208 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3208 int = 2
				for _, b := range yyq3208 {
					if b {
						yynn3208++
					}
				}
				r.EncodeMapStart(yynn3208)
			}
			if yyr3208 || yy2arr3208 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3208 || yy2arr3208 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3208 || yy2arr3208 {
				if yyq3208[2] {
					yym3212 := z.EncBinary()
					_ = yym3212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3208[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym3213 := z.EncBinary()
					_ = yym3213
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3208 || yy2arr3208 {
				if yyq3208[3] {
					yym3215 := z.EncBinary()
					_ = yym3215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3208[3] {
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					yym3216 := z.EncBinary()
					_ = yym3216
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yysep3208 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3217 := z.DecBinary()
	_ = yym3217
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3218 := r.ReadMapStart()
			if yyl3218 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3218, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3218 := r.ReadArrayStart()
			if yyl3218 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3218, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3219Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3219Slc
	var yyhl3219 bool = l >= 0
	for yyj3219 := 0; ; yyj3219++ {
		if yyhl3219 {
			if yyj3219 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3219Slc = r.DecodeBytes(yys3219Slc, true, true)
		yys3219 := string(yys3219Slc)
		switch yys3219 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3219)
		} // end switch yys3219
	} // end for yyj3219
	if !yyhl3219 {
		r.ReadEnd()
	}
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3224 int
	var yyb3224 bool
	var yyhl3224 bool = l >= 0
	yyj3224++
	if yyhl3224 {
		yyb3224 = yyj3224 > l
	} else {
		yyb3224 = r.CheckBreak()
	}
	if yyb3224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3224++
	if yyhl3224 {
		yyb3224 = yyj3224 > l
	} else {
		yyb3224 = r.CheckBreak()
	}
	if yyb3224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3224++
	if yyhl3224 {
		yyb3224 = yyj3224 > l
	} else {
		yyb3224 = r.CheckBreak()
	}
	if yyb3224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3224++
	if yyhl3224 {
		yyb3224 = yyj3224 > l
	} else {
		yyb3224 = r.CheckBreak()
	}
	if yyb3224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3224++
		if yyhl3224 {
			yyb3224 = yyj3224 > l
		} else {
			yyb3224 = r.CheckBreak()
		}
		if yyb3224 {
			break
		}
		z.DecStructFieldNotFound(yyj3224-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3229 := z.EncBinary()
		_ = yym3229
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3230 := !z.EncBinary()
			yy2arr3230 := z.EncBasicHandle().StructToArray
			var yyq3230 [4]bool
			_, _, _ = yysep3230, yyq3230, yy2arr3230
			const yyr3230 bool = false
			yyq3230[0] = x.Kind != ""
			yyq3230[1] = x.APIVersion != ""
			yyq3230[2] = true
			yyq3230[3] = len(x.Conditions) != 0
			if yyr3230 || yy2arr3230 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3230 int = 0
				for _, b := range yyq3230 {
					if b {
						yynn3230++
					}
				}
				r.EncodeMapStart(yynn3230)
			}
			if yyr3230 || yy2arr3230 {
				if yyq3230[0] {
					yym3232 := z.EncBinary()
					_ = yym3232
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3230[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3233 := z.EncBinary()
					_ = yym3233
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3230 || yy2arr3230 {
				if yyq3230[1] {
					yym3235 := z.EncBinary()
					_ = yym3235
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3230[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3236 := z.EncBinary()
					_ = yym3236
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3230 || yy2arr3230 {
				if yyq3230[2] {
					yy3238 := &x.ObjectMeta
					yy3238.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3230[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3239 := &x.ObjectMeta
					yy3239.CodecEncodeSelf(e)
				}
			}
			if yyr3230 || yy2arr3230 {
				if yyq3230[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3241 := z.EncBinary()
						_ = yym3241
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3230[3] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3242 := z.EncBinary()
						_ = yym3242
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yysep3230 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3243 := z.DecBinary()
	_ = yym3243
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3244 := r.ReadMapStart()
			if yyl3244 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3244, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3244 := r.ReadArrayStart()
			if yyl3244 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3244, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3245Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3245Slc
	var yyhl3245 bool = l >= 0
	for yyj3245 := 0; ; yyj3245++ {
		if yyhl3245 {
			if yyj3245 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3245Slc = r.DecodeBytes(yys3245Slc, true, true)
		yys3245 := string(yys3245Slc)
		switch yys3245 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3248 := &x.ObjectMeta
				yyv3248.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3249 := &x.Conditions
				yym3250 := z.DecBinary()
				_ = yym3250
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3249), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3245)
		} // end switch yys3245
	} // end for yyj3245
	if !yyhl3245 {
		r.ReadEnd()
	}
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3251 int
	var yyb3251 bool
	var yyhl3251 bool = l >= 0
	yyj3251++
	if yyhl3251 {
		yyb3251 = yyj3251 > l
	} else {
		yyb3251 = r.CheckBreak()
	}
	if yyb3251 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3251++
	if yyhl3251 {
		yyb3251 = yyj3251 > l
	} else {
		yyb3251 = r.CheckBreak()
	}
	if yyb3251 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3251++
	if yyhl3251 {
		yyb3251 = yyj3251 > l
	} else {
		yyb3251 = r.CheckBreak()
	}
	if yyb3251 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3254 := &x.ObjectMeta
		yyv3254.CodecDecodeSelf(d)
	}
	yyj3251++
	if yyhl3251 {
		yyb3251 = yyj3251 > l
	} else {
		yyb3251 = r.CheckBreak()
	}
	if yyb3251 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3255 := &x.Conditions
		yym3256 := z.DecBinary()
		_ = yym3256
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3255), d)
		}
	}
	for {
		yyj3251++
		if yyhl3251 {
			yyb3251 = yyj3251 > l
		} else {
			yyb3251 = r.CheckBreak()
		}
		if yyb3251 {
			break
		}
		z.DecStructFieldNotFound(yyj3251-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3257 := z.EncBinary()
		_ = yym3257
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3258 := !z.EncBinary()
			yy2arr3258 := z.EncBasicHandle().StructToArray
			var yyq3258 [4]bool
			_, _, _ = yysep3258, yyq3258, yy2arr3258
			const yyr3258 bool = false
			yyq3258[0] = x.Kind != ""
			yyq3258[1] = x.APIVersion != ""
			yyq3258[2] = true
			if yyr3258 || yy2arr3258 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3258 int = 1
				for _, b := range yyq3258 {
					if b {
						yynn3258++
					}
				}
				r.EncodeMapStart(yynn3258)
			}
			if yyr3258 || yy2arr3258 {
				if yyq3258[0] {
					yym3260 := z.EncBinary()
					_ = yym3260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3258[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3261 := z.EncBinary()
					_ = yym3261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3258 || yy2arr3258 {
				if yyq3258[1] {
					yym3263 := z.EncBinary()
					_ = yym3263
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3258[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3264 := z.EncBinary()
					_ = yym3264
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3258 || yy2arr3258 {
				if yyq3258[2] {
					yy3266 := &x.ListMeta
					yym3267 := z.EncBinary()
					_ = yym3267
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3266) {
					} else {
						z.EncFallback(yy3266)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3258[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3268 := &x.ListMeta
					yym3269 := z.EncBinary()
					_ = yym3269
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3268) {
					} else {
						z.EncFallback(yy3268)
					}
				}
			}
			if yyr3258 || yy2arr3258 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3271 := z.EncBinary()
					_ = yym3271
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3272 := z.EncBinary()
					_ = yym3272
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yysep3258 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3273 := z.DecBinary()
	_ = yym3273
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3274 := r.ReadMapStart()
			if yyl3274 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3274, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3274 := r.ReadArrayStart()
			if yyl3274 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3274, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3275Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3275Slc
	var yyhl3275 bool = l >= 0
	for yyj3275 := 0; ; yyj3275++ {
		if yyhl3275 {
			if yyj3275 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3275Slc = r.DecodeBytes(yys3275Slc, true, true)
		yys3275 := string(yys3275Slc)
		switch yys3275 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3278 := &x.ListMeta
				yym3279 := z.DecBinary()
				_ = yym3279
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3278) {
				} else {
					z.DecFallback(yyv3278, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3280 := &x.Items
				yym3281 := z.DecBinary()
				_ = yym3281
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3280), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3275)
		} // end switch yys3275
	} // end for yyj3275
	if !yyhl3275 {
		r.ReadEnd()
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3282 int
	var yyb3282 bool
	var yyhl3282 bool = l >= 0
	yyj3282++
	if yyhl3282 {
		yyb3282 = yyj3282 > l
	} else {
		yyb3282 = r.CheckBreak()
	}
	if yyb3282 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3282++
	if yyhl3282 {
		yyb3282 = yyj3282 > l
	} else {
		yyb3282 = r.CheckBreak()
	}
	if yyb3282 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3282++
	if yyhl3282 {
		yyb3282 = yyj3282 > l
	} else {
		yyb3282 = r.CheckBreak()
	}
	if yyb3282 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3285 := &x.ListMeta
		yym3286 := z.DecBinary()
		_ = yym3286
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3285) {
		} else {
			z.DecFallback(yyv3285, false)
		}
	}
	yyj3282++
	if yyhl3282 {
		yyb3282 = yyj3282 > l
	} else {
		yyb3282 = r.CheckBreak()
	}
	if yyb3282 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3287 := &x.Items
		yym3288 := z.DecBinary()
		_ = yym3288
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3287), d)
		}
	}
	for {
		yyj3282++
		if yyhl3282 {
			yyb3282 = yyj3282 > l
		} else {
			yyb3282 = r.CheckBreak()
		}
		if yyb3282 {
			break
		}
		z.DecStructFieldNotFound(yyj3282-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3289 := z.EncBinary()
		_ = yym3289
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3290 := !z.EncBinary()
			yy2arr3290 := z.EncBasicHandle().StructToArray
			var yyq3290 [1]bool
			_, _, _ = yysep3290, yyq3290, yy2arr3290
			const yyr3290 bool = false
			yyq3290[0] = len(x.Items) != 0
			if yyr3290 || yy2arr3290 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3290 int = 0
				for _, b := range yyq3290 {
					if b {
						yynn3290++
					}
				}
				r.EncodeMapStart(yynn3290)
			}
			if yyr3290 || yy2arr3290 {
				if yyq3290[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3292 := z.EncBinary()
						_ = yym3292
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3290[0] {
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3293 := z.EncBinary()
						_ = yym3293
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yysep3290 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3294 := z.DecBinary()
	_ = yym3294
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3295 := r.ReadMapStart()
			if yyl3295 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3295, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3295 := r.ReadArrayStart()
			if yyl3295 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3295, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3296Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3296Slc
	var yyhl3296 bool = l >= 0
	for yyj3296 := 0; ; yyj3296++ {
		if yyhl3296 {
			if yyj3296 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3296Slc = r.DecodeBytes(yys3296Slc, true, true)
		yys3296 := string(yys3296Slc)
		switch yys3296 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3297 := &x.Items
				yym3298 := z.DecBinary()
				_ = yym3298
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3297), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3296)
		} // end switch yys3296
	} // end for yyj3296
	if !yyhl3296 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3299 int
	var yyb3299 bool
	var yyhl3299 bool = l >= 0
	yyj3299++
	if yyhl3299 {
		yyb3299 = yyj3299 > l
	} else {
		yyb3299 = r.CheckBreak()
	}
	if yyb3299 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3300 := &x.Items
		yym3301 := z.DecBinary()
		_ = yym3301
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3300), d)
		}
	}
	for {
		yyj3299++
		if yyhl3299 {
			yyb3299 = yyj3299 > l
		} else {
			yyb3299 = r.CheckBreak()
		}
		if yyb3299 {
			break
		}
		z.DecStructFieldNotFound(yyj3299-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3302 := z.EncBinary()
		_ = yym3302
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3303 := !z.EncBinary()
			yy2arr3303 := z.EncBasicHandle().StructToArray
			var yyq3303 [2]bool
			_, _, _ = yysep3303, yyq3303, yy2arr3303
			const yyr3303 bool = false
			if yyr3303 || yy2arr3303 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3303 int = 2
				for _, b := range yyq3303 {
					if b {
						yynn3303++
					}
				}
				r.EncodeMapStart(yynn3303)
			}
			if yyr3303 || yy2arr3303 {
				yym3305 := z.EncBinary()
				_ = yym3305
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym3306 := z.EncBinary()
				_ = yym3306
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3303 || yy2arr3303 {
				yy3308 := &x.FieldRef
				yy3308.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				yy3309 := &x.FieldRef
				yy3309.CodecEncodeSelf(e)
			}
			if yysep3303 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3310 := z.DecBinary()
	_ = yym3310
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3311 := r.ReadMapStart()
			if yyl3311 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3311, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3311 := r.ReadArrayStart()
			if yyl3311 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3311, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3312Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3312Slc
	var yyhl3312 bool = l >= 0
	for yyj3312 := 0; ; yyj3312++ {
		if yyhl3312 {
			if yyj3312 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3312Slc = r.DecodeBytes(yys3312Slc, true, true)
		yys3312 := string(yys3312Slc)
		switch yys3312 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv3314 := &x.FieldRef
				yyv3314.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3312)
		} // end switch yys3312
	} // end for yyj3312
	if !yyhl3312 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3315 int
	var yyb3315 bool
	var yyhl3315 bool = l >= 0
	yyj3315++
	if yyhl3315 {
		yyb3315 = yyj3315 > l
	} else {
		yyb3315 = r.CheckBreak()
	}
	if yyb3315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj3315++
	if yyhl3315 {
		yyb3315 = yyj3315 > l
	} else {
		yyb3315 = r.CheckBreak()
	}
	if yyb3315 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv3317 := &x.FieldRef
		yyv3317.CodecDecodeSelf(d)
	}
	for {
		yyj3315++
		if yyhl3315 {
			yyb3315 = yyj3315 > l
		} else {
			yyb3315 = r.CheckBreak()
		}
		if yyb3315 {
			break
		}
		z.DecStructFieldNotFound(yyj3315-1, "")
	}
	r.ReadEnd()
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3318 := z.EncBinary()
		_ = yym3318
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3319 := !z.EncBinary()
			yy2arr3319 := z.EncBasicHandle().StructToArray
			var yyq3319 [5]bool
			_, _, _ = yysep3319, yyq3319, yy2arr3319
			const yyr3319 bool = false
			yyq3319[0] = x.Capabilities != nil
			yyq3319[1] = x.Privileged != nil
			yyq3319[2] = x.SELinuxOptions != nil
			yyq3319[3] = x.RunAsUser != nil
			yyq3319[4] = x.RunAsNonRoot != false
			if yyr3319 || yy2arr3319 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3319 int = 0
				for _, b := range yyq3319 {
					if b {
						yynn3319++
					}
				}
				r.EncodeMapStart(yynn3319)
			}
			if yyr3319 || yy2arr3319 {
				if yyq3319[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3319[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3319 || yy2arr3319 {
				if yyq3319[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3322 := *x.Privileged
						yym3323 := z.EncBinary()
						_ = yym3323
						if false {
						} else {
							r.EncodeBool(bool(yy3322))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3319[1] {
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3324 := *x.Privileged
						yym3325 := z.EncBinary()
						_ = yym3325
						if false {
						} else {
							r.EncodeBool(bool(yy3324))
						}
					}
				}
			}
			if yyr3319 || yy2arr3319 {
				if yyq3319[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3319[2] {
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3319 || yy2arr3319 {
				if yyq3319[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3328 := *x.RunAsUser
						yym3329 := z.EncBinary()
						_ = yym3329
						if false {
						} else {
							r.EncodeInt(int64(yy3328))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3319[3] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3330 := *x.RunAsUser
						yym3331 := z.EncBinary()
						_ = yym3331
						if false {
						} else {
							r.EncodeInt(int64(yy3330))
						}
					}
				}
			}
			if yyr3319 || yy2arr3319 {
				if yyq3319[4] {
					yym3333 := z.EncBinary()
					_ = yym3333
					if false {
					} else {
						r.EncodeBool(bool(x.RunAsNonRoot))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3319[4] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					yym3334 := z.EncBinary()
					_ = yym3334
					if false {
					} else {
						r.EncodeBool(bool(x.RunAsNonRoot))
					}
				}
			}
			if yysep3319 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3335 := z.DecBinary()
	_ = yym3335
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3336 := r.ReadMapStart()
			if yyl3336 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3336, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3336 := r.ReadArrayStart()
			if yyl3336 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3336, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3337Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3337Slc
	var yyhl3337 bool = l >= 0
	for yyj3337 := 0; ; yyj3337++ {
		if yyhl3337 {
			if yyj3337 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3337Slc = r.DecodeBytes(yys3337Slc, true, true)
		yys3337 := string(yys3337Slc)
		switch yys3337 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3340 := z.DecBinary()
				_ = yym3340
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3343 := z.DecBinary()
				_ = yym3343
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				x.RunAsNonRoot = false
			} else {
				x.RunAsNonRoot = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3337)
		} // end switch yys3337
	} // end for yyj3337
	if !yyhl3337 {
		r.ReadEnd()
	}
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3345 int
	var yyb3345 bool
	var yyhl3345 bool = l >= 0
	yyj3345++
	if yyhl3345 {
		yyb3345 = yyj3345 > l
	} else {
		yyb3345 = r.CheckBreak()
	}
	if yyb3345 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3345++
	if yyhl3345 {
		yyb3345 = yyj3345 > l
	} else {
		yyb3345 = r.CheckBreak()
	}
	if yyb3345 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3348 := z.DecBinary()
		_ = yym3348
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3345++
	if yyhl3345 {
		yyb3345 = yyj3345 > l
	} else {
		yyb3345 = r.CheckBreak()
	}
	if yyb3345 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3345++
	if yyhl3345 {
		yyb3345 = yyj3345 > l
	} else {
		yyb3345 = r.CheckBreak()
	}
	if yyb3345 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3351 := z.DecBinary()
		_ = yym3351
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3345++
	if yyhl3345 {
		yyb3345 = yyj3345 > l
	} else {
		yyb3345 = r.CheckBreak()
	}
	if yyb3345 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RunAsNonRoot = false
	} else {
		x.RunAsNonRoot = bool(r.DecodeBool())
	}
	for {
		yyj3345++
		if yyhl3345 {
			yyb3345 = yyj3345 > l
		} else {
			yyb3345 = r.CheckBreak()
		}
		if yyb3345 {
			break
		}
		z.DecStructFieldNotFound(yyj3345-1, "")
	}
	r.ReadEnd()
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3353 := z.EncBinary()
		_ = yym3353
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3354 := !z.EncBinary()
			yy2arr3354 := z.EncBasicHandle().StructToArray
			var yyq3354 [4]bool
			_, _, _ = yysep3354, yyq3354, yy2arr3354
			const yyr3354 bool = false
			yyq3354[0] = x.User != ""
			yyq3354[1] = x.Role != ""
			yyq3354[2] = x.Type != ""
			yyq3354[3] = x.Level != ""
			if yyr3354 || yy2arr3354 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3354 int = 0
				for _, b := range yyq3354 {
					if b {
						yynn3354++
					}
				}
				r.EncodeMapStart(yynn3354)
			}
			if yyr3354 || yy2arr3354 {
				if yyq3354[0] {
					yym3356 := z.EncBinary()
					_ = yym3356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3354[0] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym3357 := z.EncBinary()
					_ = yym3357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3354 || yy2arr3354 {
				if yyq3354[1] {
					yym3359 := z.EncBinary()
					_ = yym3359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3354[1] {
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					yym3360 := z.EncBinary()
					_ = yym3360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3354 || yy2arr3354 {
				if yyq3354[2] {
					yym3362 := z.EncBinary()
					_ = yym3362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3354[2] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					yym3363 := z.EncBinary()
					_ = yym3363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3354 || yy2arr3354 {
				if yyq3354[3] {
					yym3365 := z.EncBinary()
					_ = yym3365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3354[3] {
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					yym3366 := z.EncBinary()
					_ = yym3366
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yysep3354 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3367 := z.DecBinary()
	_ = yym3367
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3368 := r.ReadMapStart()
			if yyl3368 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3368, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3368 := r.ReadArrayStart()
			if yyl3368 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3368, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3369Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3369Slc
	var yyhl3369 bool = l >= 0
	for yyj3369 := 0; ; yyj3369++ {
		if yyhl3369 {
			if yyj3369 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3369Slc = r.DecodeBytes(yys3369Slc, true, true)
		yys3369 := string(yys3369Slc)
		switch yys3369 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3369)
		} // end switch yys3369
	} // end for yyj3369
	if !yyhl3369 {
		r.ReadEnd()
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3374 int
	var yyb3374 bool
	var yyhl3374 bool = l >= 0
	yyj3374++
	if yyhl3374 {
		yyb3374 = yyj3374 > l
	} else {
		yyb3374 = r.CheckBreak()
	}
	if yyb3374 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3374++
	if yyhl3374 {
		yyb3374 = yyj3374 > l
	} else {
		yyb3374 = r.CheckBreak()
	}
	if yyb3374 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3374++
	if yyhl3374 {
		yyb3374 = yyj3374 > l
	} else {
		yyb3374 = r.CheckBreak()
	}
	if yyb3374 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3374++
	if yyhl3374 {
		yyb3374 = yyj3374 > l
	} else {
		yyb3374 = r.CheckBreak()
	}
	if yyb3374 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3374++
		if yyhl3374 {
			yyb3374 = yyj3374 > l
		} else {
			yyb3374 = r.CheckBreak()
		}
		if yyb3374 {
			break
		}
		z.DecStructFieldNotFound(yyj3374-1, "")
	}
	r.ReadEnd()
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3379 := z.EncBinary()
		_ = yym3379
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3380 := !z.EncBinary()
			yy2arr3380 := z.EncBasicHandle().StructToArray
			var yyq3380 [5]bool
			_, _, _ = yysep3380, yyq3380, yy2arr3380
			const yyr3380 bool = false
			yyq3380[0] = x.Kind != ""
			yyq3380[1] = x.APIVersion != ""
			yyq3380[2] = true
			if yyr3380 || yy2arr3380 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3380 int = 2
				for _, b := range yyq3380 {
					if b {
						yynn3380++
					}
				}
				r.EncodeMapStart(yynn3380)
			}
			if yyr3380 || yy2arr3380 {
				if yyq3380[0] {
					yym3382 := z.EncBinary()
					_ = yym3382
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3380[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3383 := z.EncBinary()
					_ = yym3383
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3380 || yy2arr3380 {
				if yyq3380[1] {
					yym3385 := z.EncBinary()
					_ = yym3385
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3380[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3386 := z.EncBinary()
					_ = yym3386
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3380 || yy2arr3380 {
				if yyq3380[2] {
					yy3388 := &x.ObjectMeta
					yy3388.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3380[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3389 := &x.ObjectMeta
					yy3389.CodecEncodeSelf(e)
				}
			}
			if yyr3380 || yy2arr3380 {
				yym3391 := z.EncBinary()
				_ = yym3391
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				yym3392 := z.EncBinary()
				_ = yym3392
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3380 || yy2arr3380 {
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3394 := z.EncBinary()
					_ = yym3394
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3395 := z.EncBinary()
					_ = yym3395
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yysep3380 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3396 := z.DecBinary()
	_ = yym3396
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3397 := r.ReadMapStart()
			if yyl3397 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3397, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3397 := r.ReadArrayStart()
			if yyl3397 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3397, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3398Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3398Slc
	var yyhl3398 bool = l >= 0
	for yyj3398 := 0; ; yyj3398++ {
		if yyhl3398 {
			if yyj3398 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3398Slc = r.DecodeBytes(yys3398Slc, true, true)
		yys3398 := string(yys3398Slc)
		switch yys3398 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3401 := &x.ObjectMeta
				yyv3401.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3403 := &x.Data
				yym3404 := z.DecBinary()
				_ = yym3404
				if false {
				} else {
					*yyv3403 = r.DecodeBytes(*(*[]byte)(yyv3403), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3398)
		} // end switch yys3398
	} // end for yyj3398
	if !yyhl3398 {
		r.ReadEnd()
	}
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3405 int
	var yyb3405 bool
	var yyhl3405 bool = l >= 0
	yyj3405++
	if yyhl3405 {
		yyb3405 = yyj3405 > l
	} else {
		yyb3405 = r.CheckBreak()
	}
	if yyb3405 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3405++
	if yyhl3405 {
		yyb3405 = yyj3405 > l
	} else {
		yyb3405 = r.CheckBreak()
	}
	if yyb3405 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3405++
	if yyhl3405 {
		yyb3405 = yyj3405 > l
	} else {
		yyb3405 = r.CheckBreak()
	}
	if yyb3405 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3408 := &x.ObjectMeta
		yyv3408.CodecDecodeSelf(d)
	}
	yyj3405++
	if yyhl3405 {
		yyb3405 = yyj3405 > l
	} else {
		yyb3405 = r.CheckBreak()
	}
	if yyb3405 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3405++
	if yyhl3405 {
		yyb3405 = yyj3405 > l
	} else {
		yyb3405 = r.CheckBreak()
	}
	if yyb3405 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3410 := &x.Data
		yym3411 := z.DecBinary()
		_ = yym3411
		if false {
		} else {
			*yyv3410 = r.DecodeBytes(*(*[]byte)(yyv3410), false, false)
		}
	}
	for {
		yyj3405++
		if yyhl3405 {
			yyb3405 = yyj3405 > l
		} else {
			yyb3405 = r.CheckBreak()
		}
		if yyb3405 {
			break
		}
		z.DecStructFieldNotFound(yyj3405-1, "")
	}
	r.ReadEnd()
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3412 := range v {
		yyv3412.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3413 := *v
	yyh3413, yyl3413 := z.DecSliceHelperStart()

	var yyrr3413, yyrl3413 int
	var yyc3413, yyrt3413 bool
	_, _, _ = yyc3413, yyrt3413, yyrl3413
	yyrr3413 = yyl3413

	if yyv3413 == nil {
		if yyrl3413, yyrt3413 = z.DecInferLen(yyl3413, z.DecBasicHandle().MaxInitLen, 16); yyrt3413 {
			yyrr3413 = yyrl3413
		}
		yyv3413 = make([]PersistentVolumeAccessMode, yyrl3413)
		yyc3413 = true
	}

	if yyl3413 == 0 {
		if len(yyv3413) != 0 {
			yyv3413 = yyv3413[:0]
			yyc3413 = true
		}
	} else if yyl3413 > 0 {

		if yyl3413 > cap(yyv3413) {
			yyrl3413, yyrt3413 = z.DecInferLen(yyl3413, z.DecBasicHandle().MaxInitLen, 16)

			yyv23413 := yyv3413
			yyv3413 = make([]PersistentVolumeAccessMode, yyrl3413)
			if len(yyv3413) > 0 {
				copy(yyv3413, yyv23413[:cap(yyv23413)])
			}
			yyc3413 = true

			yyrr3413 = len(yyv3413)
		} else if yyl3413 != len(yyv3413) {
			yyv3413 = yyv3413[:yyl3413]
			yyc3413 = true
		}
		yyj3413 := 0
		for ; yyj3413 < yyrr3413; yyj3413++ {
			if r.TryDecodeAsNil() {
				yyv3413[yyj3413] = ""
			} else {
				yyv3413[yyj3413] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt3413 {
			for ; yyj3413 < yyl3413; yyj3413++ {
				yyv3413 = append(yyv3413, "")
				if r.TryDecodeAsNil() {
					yyv3413[yyj3413] = ""
				} else {
					yyv3413[yyj3413] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3413 := 0; !r.CheckBreak(); yyj3413++ {
			if yyj3413 >= len(yyv3413) {
				yyv3413 = append(yyv3413, "") // var yyz3413 PersistentVolumeAccessMode
				yyc3413 = true
			}

			if yyj3413 < len(yyv3413) {
				if r.TryDecodeAsNil() {
					yyv3413[yyj3413] = ""
				} else {
					yyv3413[yyj3413] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3413.End()
	}
	if yyc3413 {
		*v = yyv3413
	}

}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3417 := range v {
		yy3418 := &yyv3417
		yy3418.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3419 := *v
	yyh3419, yyl3419 := z.DecSliceHelperStart()

	var yyrr3419, yyrl3419 int
	var yyc3419, yyrt3419 bool
	_, _, _ = yyc3419, yyrt3419, yyrl3419
	yyrr3419 = yyl3419

	if yyv3419 == nil {
		if yyrl3419, yyrt3419 = z.DecInferLen(yyl3419, z.DecBasicHandle().MaxInitLen, 384); yyrt3419 {
			yyrr3419 = yyrl3419
		}
		yyv3419 = make([]PersistentVolume, yyrl3419)
		yyc3419 = true
	}

	if yyl3419 == 0 {
		if len(yyv3419) != 0 {
			yyv3419 = yyv3419[:0]
			yyc3419 = true
		}
	} else if yyl3419 > 0 {

		if yyl3419 > cap(yyv3419) {
			yyrl3419, yyrt3419 = z.DecInferLen(yyl3419, z.DecBasicHandle().MaxInitLen, 384)
			yyv3419 = make([]PersistentVolume, yyrl3419)
			yyc3419 = true

			yyrr3419 = len(yyv3419)
		} else if yyl3419 != len(yyv3419) {
			yyv3419 = yyv3419[:yyl3419]
			yyc3419 = true
		}
		yyj3419 := 0
		for ; yyj3419 < yyrr3419; yyj3419++ {
			if r.TryDecodeAsNil() {
				yyv3419[yyj3419] = PersistentVolume{}
			} else {
				yyv3420 := &yyv3419[yyj3419]
				yyv3420.CodecDecodeSelf(d)
			}

		}
		if yyrt3419 {
			for ; yyj3419 < yyl3419; yyj3419++ {
				yyv3419 = append(yyv3419, PersistentVolume{})
				if r.TryDecodeAsNil() {
					yyv3419[yyj3419] = PersistentVolume{}
				} else {
					yyv3421 := &yyv3419[yyj3419]
					yyv3421.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3419 := 0; !r.CheckBreak(); yyj3419++ {
			if yyj3419 >= len(yyv3419) {
				yyv3419 = append(yyv3419, PersistentVolume{}) // var yyz3419 PersistentVolume
				yyc3419 = true
			}

			if yyj3419 < len(yyv3419) {
				if r.TryDecodeAsNil() {
					yyv3419[yyj3419] = PersistentVolume{}
				} else {
					yyv3422 := &yyv3419[yyj3419]
					yyv3422.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3419.End()
	}
	if yyc3419 {
		*v = yyv3419
	}

}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3423 := range v {
		yy3424 := &yyv3423
		yy3424.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3425 := *v
	yyh3425, yyl3425 := z.DecSliceHelperStart()

	var yyrr3425, yyrl3425 int
	var yyc3425, yyrt3425 bool
	_, _, _ = yyc3425, yyrt3425, yyrl3425
	yyrr3425 = yyl3425

	if yyv3425 == nil {
		if yyrl3425, yyrt3425 = z.DecInferLen(yyl3425, z.DecBasicHandle().MaxInitLen, 296); yyrt3425 {
			yyrr3425 = yyrl3425
		}
		yyv3425 = make([]PersistentVolumeClaim, yyrl3425)
		yyc3425 = true
	}

	if yyl3425 == 0 {
		if len(yyv3425) != 0 {
			yyv3425 = yyv3425[:0]
			yyc3425 = true
		}
	} else if yyl3425 > 0 {

		if yyl3425 > cap(yyv3425) {
			yyrl3425, yyrt3425 = z.DecInferLen(yyl3425, z.DecBasicHandle().MaxInitLen, 296)
			yyv3425 = make([]PersistentVolumeClaim, yyrl3425)
			yyc3425 = true

			yyrr3425 = len(yyv3425)
		} else if yyl3425 != len(yyv3425) {
			yyv3425 = yyv3425[:yyl3425]
			yyc3425 = true
		}
		yyj3425 := 0
		for ; yyj3425 < yyrr3425; yyj3425++ {
			if r.TryDecodeAsNil() {
				yyv3425[yyj3425] = PersistentVolumeClaim{}
			} else {
				yyv3426 := &yyv3425[yyj3425]
				yyv3426.CodecDecodeSelf(d)
			}

		}
		if yyrt3425 {
			for ; yyj3425 < yyl3425; yyj3425++ {
				yyv3425 = append(yyv3425, PersistentVolumeClaim{})
				if r.TryDecodeAsNil() {
					yyv3425[yyj3425] = PersistentVolumeClaim{}
				} else {
					yyv3427 := &yyv3425[yyj3425]
					yyv3427.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3425 := 0; !r.CheckBreak(); yyj3425++ {
			if yyj3425 >= len(yyv3425) {
				yyv3425 = append(yyv3425, PersistentVolumeClaim{}) // var yyz3425 PersistentVolumeClaim
				yyc3425 = true
			}

			if yyj3425 < len(yyv3425) {
				if r.TryDecodeAsNil() {
					yyv3425[yyj3425] = PersistentVolumeClaim{}
				} else {
					yyv3428 := &yyv3425[yyj3425]
					yyv3428.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3425.End()
	}
	if yyc3425 {
		*v = yyv3425
	}

}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3429 := range v {
		yyv3429.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3430 := *v
	yyh3430, yyl3430 := z.DecSliceHelperStart()

	var yyrr3430, yyrl3430 int
	var yyc3430, yyrt3430 bool
	_, _, _ = yyc3430, yyrt3430, yyrl3430
	yyrr3430 = yyl3430

	if yyv3430 == nil {
		if yyrl3430, yyrt3430 = z.DecInferLen(yyl3430, z.DecBasicHandle().MaxInitLen, 16); yyrt3430 {
			yyrr3430 = yyrl3430
		}
		yyv3430 = make([]Capability, yyrl3430)
		yyc3430 = true
	}

	if yyl3430 == 0 {
		if len(yyv3430) != 0 {
			yyv3430 = yyv3430[:0]
			yyc3430 = true
		}
	} else if yyl3430 > 0 {

		if yyl3430 > cap(yyv3430) {
			yyrl3430, yyrt3430 = z.DecInferLen(yyl3430, z.DecBasicHandle().MaxInitLen, 16)

			yyv23430 := yyv3430
			yyv3430 = make([]Capability, yyrl3430)
			if len(yyv3430) > 0 {
				copy(yyv3430, yyv23430[:cap(yyv23430)])
			}
			yyc3430 = true

			yyrr3430 = len(yyv3430)
		} else if yyl3430 != len(yyv3430) {
			yyv3430 = yyv3430[:yyl3430]
			yyc3430 = true
		}
		yyj3430 := 0
		for ; yyj3430 < yyrr3430; yyj3430++ {
			if r.TryDecodeAsNil() {
				yyv3430[yyj3430] = ""
			} else {
				yyv3430[yyj3430] = Capability(r.DecodeString())
			}

		}
		if yyrt3430 {
			for ; yyj3430 < yyl3430; yyj3430++ {
				yyv3430 = append(yyv3430, "")
				if r.TryDecodeAsNil() {
					yyv3430[yyj3430] = ""
				} else {
					yyv3430[yyj3430] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3430 := 0; !r.CheckBreak(); yyj3430++ {
			if yyj3430 >= len(yyv3430) {
				yyv3430 = append(yyv3430, "") // var yyz3430 Capability
				yyc3430 = true
			}

			if yyj3430 < len(yyv3430) {
				if r.TryDecodeAsNil() {
					yyv3430[yyj3430] = ""
				} else {
					yyv3430[yyj3430] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3430.End()
	}
	if yyc3430 {
		*v = yyv3430
	}

}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3434 := range v {
		yy3435 := &yyv3434
		yy3435.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3436 := *v
	yyh3436, yyl3436 := z.DecSliceHelperStart()

	var yyrr3436, yyrl3436 int
	var yyc3436, yyrt3436 bool
	_, _, _ = yyc3436, yyrt3436, yyrl3436
	yyrr3436 = yyl3436

	if yyv3436 == nil {
		if yyrl3436, yyrt3436 = z.DecInferLen(yyl3436, z.DecBasicHandle().MaxInitLen, 64); yyrt3436 {
			yyrr3436 = yyrl3436
		}
		yyv3436 = make([]ContainerPort, yyrl3436)
		yyc3436 = true
	}

	if yyl3436 == 0 {
		if len(yyv3436) != 0 {
			yyv3436 = yyv3436[:0]
			yyc3436 = true
		}
	} else if yyl3436 > 0 {

		if yyl3436 > cap(yyv3436) {
			yyrl3436, yyrt3436 = z.DecInferLen(yyl3436, z.DecBasicHandle().MaxInitLen, 64)
			yyv3436 = make([]ContainerPort, yyrl3436)
			yyc3436 = true

			yyrr3436 = len(yyv3436)
		} else if yyl3436 != len(yyv3436) {
			yyv3436 = yyv3436[:yyl3436]
			yyc3436 = true
		}
		yyj3436 := 0
		for ; yyj3436 < yyrr3436; yyj3436++ {
			if r.TryDecodeAsNil() {
				yyv3436[yyj3436] = ContainerPort{}
			} else {
				yyv3437 := &yyv3436[yyj3436]
				yyv3437.CodecDecodeSelf(d)
			}

		}
		if yyrt3436 {
			for ; yyj3436 < yyl3436; yyj3436++ {
				yyv3436 = append(yyv3436, ContainerPort{})
				if r.TryDecodeAsNil() {
					yyv3436[yyj3436] = ContainerPort{}
				} else {
					yyv3438 := &yyv3436[yyj3436]
					yyv3438.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3436 := 0; !r.CheckBreak(); yyj3436++ {
			if yyj3436 >= len(yyv3436) {
				yyv3436 = append(yyv3436, ContainerPort{}) // var yyz3436 ContainerPort
				yyc3436 = true
			}

			if yyj3436 < len(yyv3436) {
				if r.TryDecodeAsNil() {
					yyv3436[yyj3436] = ContainerPort{}
				} else {
					yyv3439 := &yyv3436[yyj3436]
					yyv3439.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3436.End()
	}
	if yyc3436 {
		*v = yyv3436
	}

}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3440 := range v {
		yy3441 := &yyv3440
		yy3441.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3442 := *v
	yyh3442, yyl3442 := z.DecSliceHelperStart()

	var yyrr3442, yyrl3442 int
	var yyc3442, yyrt3442 bool
	_, _, _ = yyc3442, yyrt3442, yyrl3442
	yyrr3442 = yyl3442

	if yyv3442 == nil {
		if yyrl3442, yyrt3442 = z.DecInferLen(yyl3442, z.DecBasicHandle().MaxInitLen, 40); yyrt3442 {
			yyrr3442 = yyrl3442
		}
		yyv3442 = make([]EnvVar, yyrl3442)
		yyc3442 = true
	}

	if yyl3442 == 0 {
		if len(yyv3442) != 0 {
			yyv3442 = yyv3442[:0]
			yyc3442 = true
		}
	} else if yyl3442 > 0 {

		if yyl3442 > cap(yyv3442) {
			yyrl3442, yyrt3442 = z.DecInferLen(yyl3442, z.DecBasicHandle().MaxInitLen, 40)
			yyv3442 = make([]EnvVar, yyrl3442)
			yyc3442 = true

			yyrr3442 = len(yyv3442)
		} else if yyl3442 != len(yyv3442) {
			yyv3442 = yyv3442[:yyl3442]
			yyc3442 = true
		}
		yyj3442 := 0
		for ; yyj3442 < yyrr3442; yyj3442++ {
			if r.TryDecodeAsNil() {
				yyv3442[yyj3442] = EnvVar{}
			} else {
				yyv3443 := &yyv3442[yyj3442]
				yyv3443.CodecDecodeSelf(d)
			}

		}
		if yyrt3442 {
			for ; yyj3442 < yyl3442; yyj3442++ {
				yyv3442 = append(yyv3442, EnvVar{})
				if r.TryDecodeAsNil() {
					yyv3442[yyj3442] = EnvVar{}
				} else {
					yyv3444 := &yyv3442[yyj3442]
					yyv3444.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3442 := 0; !r.CheckBreak(); yyj3442++ {
			if yyj3442 >= len(yyv3442) {
				yyv3442 = append(yyv3442, EnvVar{}) // var yyz3442 EnvVar
				yyc3442 = true
			}

			if yyj3442 < len(yyv3442) {
				if r.TryDecodeAsNil() {
					yyv3442[yyj3442] = EnvVar{}
				} else {
					yyv3445 := &yyv3442[yyj3442]
					yyv3445.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3442.End()
	}
	if yyc3442 {
		*v = yyv3442
	}

}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3446 := range v {
		yy3447 := &yyv3446
		yy3447.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3448 := *v
	yyh3448, yyl3448 := z.DecSliceHelperStart()

	var yyrr3448, yyrl3448 int
	var yyc3448, yyrt3448 bool
	_, _, _ = yyc3448, yyrt3448, yyrl3448
	yyrr3448 = yyl3448

	if yyv3448 == nil {
		if yyrl3448, yyrt3448 = z.DecInferLen(yyl3448, z.DecBasicHandle().MaxInitLen, 40); yyrt3448 {
			yyrr3448 = yyrl3448
		}
		yyv3448 = make([]VolumeMount, yyrl3448)
		yyc3448 = true
	}

	if yyl3448 == 0 {
		if len(yyv3448) != 0 {
			yyv3448 = yyv3448[:0]
			yyc3448 = true
		}
	} else if yyl3448 > 0 {

		if yyl3448 > cap(yyv3448) {
			yyrl3448, yyrt3448 = z.DecInferLen(yyl3448, z.DecBasicHandle().MaxInitLen, 40)
			yyv3448 = make([]VolumeMount, yyrl3448)
			yyc3448 = true

			yyrr3448 = len(yyv3448)
		} else if yyl3448 != len(yyv3448) {
			yyv3448 = yyv3448[:yyl3448]
			yyc3448 = true
		}
		yyj3448 := 0
		for ; yyj3448 < yyrr3448; yyj3448++ {
			if r.TryDecodeAsNil() {
				yyv3448[yyj3448] = VolumeMount{}
			} else {
				yyv3449 := &yyv3448[yyj3448]
				yyv3449.CodecDecodeSelf(d)
			}

		}
		if yyrt3448 {
			for ; yyj3448 < yyl3448; yyj3448++ {
				yyv3448 = append(yyv3448, VolumeMount{})
				if r.TryDecodeAsNil() {
					yyv3448[yyj3448] = VolumeMount{}
				} else {
					yyv3450 := &yyv3448[yyj3448]
					yyv3450.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3448 := 0; !r.CheckBreak(); yyj3448++ {
			if yyj3448 >= len(yyv3448) {
				yyv3448 = append(yyv3448, VolumeMount{}) // var yyz3448 VolumeMount
				yyc3448 = true
			}

			if yyj3448 < len(yyv3448) {
				if r.TryDecodeAsNil() {
					yyv3448[yyj3448] = VolumeMount{}
				} else {
					yyv3451 := &yyv3448[yyj3448]
					yyv3451.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3448.End()
	}
	if yyc3448 {
		*v = yyv3448
	}

}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3452 := range v {
		yy3453 := &yyv3452
		yy3453.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3454 := *v
	yyh3454, yyl3454 := z.DecSliceHelperStart()

	var yyrr3454, yyrl3454 int
	var yyc3454, yyrt3454 bool
	_, _, _ = yyc3454, yyrt3454, yyrl3454
	yyrr3454 = yyl3454

	if yyv3454 == nil {
		if yyrl3454, yyrt3454 = z.DecInferLen(yyl3454, z.DecBasicHandle().MaxInitLen, 144); yyrt3454 {
			yyrr3454 = yyrl3454
		}
		yyv3454 = make([]Volume, yyrl3454)
		yyc3454 = true
	}

	if yyl3454 == 0 {
		if len(yyv3454) != 0 {
			yyv3454 = yyv3454[:0]
			yyc3454 = true
		}
	} else if yyl3454 > 0 {

		if yyl3454 > cap(yyv3454) {
			yyrl3454, yyrt3454 = z.DecInferLen(yyl3454, z.DecBasicHandle().MaxInitLen, 144)
			yyv3454 = make([]Volume, yyrl3454)
			yyc3454 = true

			yyrr3454 = len(yyv3454)
		} else if yyl3454 != len(yyv3454) {
			yyv3454 = yyv3454[:yyl3454]
			yyc3454 = true
		}
		yyj3454 := 0
		for ; yyj3454 < yyrr3454; yyj3454++ {
			if r.TryDecodeAsNil() {
				yyv3454[yyj3454] = Volume{}
			} else {
				yyv3455 := &yyv3454[yyj3454]
				yyv3455.CodecDecodeSelf(d)
			}

		}
		if yyrt3454 {
			for ; yyj3454 < yyl3454; yyj3454++ {
				yyv3454 = append(yyv3454, Volume{})
				if r.TryDecodeAsNil() {
					yyv3454[yyj3454] = Volume{}
				} else {
					yyv3456 := &yyv3454[yyj3454]
					yyv3456.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3454 := 0; !r.CheckBreak(); yyj3454++ {
			if yyj3454 >= len(yyv3454) {
				yyv3454 = append(yyv3454, Volume{}) // var yyz3454 Volume
				yyc3454 = true
			}

			if yyj3454 < len(yyv3454) {
				if r.TryDecodeAsNil() {
					yyv3454[yyj3454] = Volume{}
				} else {
					yyv3457 := &yyv3454[yyj3454]
					yyv3457.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3454.End()
	}
	if yyc3454 {
		*v = yyv3454
	}

}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3458 := range v {
		yy3459 := &yyv3458
		yy3459.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3460 := *v
	yyh3460, yyl3460 := z.DecSliceHelperStart()

	var yyrr3460, yyrl3460 int
	var yyc3460, yyrt3460 bool
	_, _, _ = yyc3460, yyrt3460, yyrl3460
	yyrr3460 = yyl3460

	if yyv3460 == nil {
		if yyrl3460, yyrt3460 = z.DecInferLen(yyl3460, z.DecBasicHandle().MaxInitLen, 256); yyrt3460 {
			yyrr3460 = yyrl3460
		}
		yyv3460 = make([]Container, yyrl3460)
		yyc3460 = true
	}

	if yyl3460 == 0 {
		if len(yyv3460) != 0 {
			yyv3460 = yyv3460[:0]
			yyc3460 = true
		}
	} else if yyl3460 > 0 {

		if yyl3460 > cap(yyv3460) {
			yyrl3460, yyrt3460 = z.DecInferLen(yyl3460, z.DecBasicHandle().MaxInitLen, 256)
			yyv3460 = make([]Container, yyrl3460)
			yyc3460 = true

			yyrr3460 = len(yyv3460)
		} else if yyl3460 != len(yyv3460) {
			yyv3460 = yyv3460[:yyl3460]
			yyc3460 = true
		}
		yyj3460 := 0
		for ; yyj3460 < yyrr3460; yyj3460++ {
			if r.TryDecodeAsNil() {
				yyv3460[yyj3460] = Container{}
			} else {
				yyv3461 := &yyv3460[yyj3460]
				yyv3461.CodecDecodeSelf(d)
			}

		}
		if yyrt3460 {
			for ; yyj3460 < yyl3460; yyj3460++ {
				yyv3460 = append(yyv3460, Container{})
				if r.TryDecodeAsNil() {
					yyv3460[yyj3460] = Container{}
				} else {
					yyv3462 := &yyv3460[yyj3460]
					yyv3462.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3460 := 0; !r.CheckBreak(); yyj3460++ {
			if yyj3460 >= len(yyv3460) {
				yyv3460 = append(yyv3460, Container{}) // var yyz3460 Container
				yyc3460 = true
			}

			if yyj3460 < len(yyv3460) {
				if r.TryDecodeAsNil() {
					yyv3460[yyj3460] = Container{}
				} else {
					yyv3463 := &yyv3460[yyj3460]
					yyv3463.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3460.End()
	}
	if yyc3460 {
		*v = yyv3460
	}

}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3464 := range v {
		yy3465 := &yyv3464
		yy3465.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3466 := *v
	yyh3466, yyl3466 := z.DecSliceHelperStart()

	var yyrr3466, yyrl3466 int
	var yyc3466, yyrt3466 bool
	_, _, _ = yyc3466, yyrt3466, yyrl3466
	yyrr3466 = yyl3466

	if yyv3466 == nil {
		if yyrl3466, yyrt3466 = z.DecInferLen(yyl3466, z.DecBasicHandle().MaxInitLen, 16); yyrt3466 {
			yyrr3466 = yyrl3466
		}
		yyv3466 = make([]LocalObjectReference, yyrl3466)
		yyc3466 = true
	}

	if yyl3466 == 0 {
		if len(yyv3466) != 0 {
			yyv3466 = yyv3466[:0]
			yyc3466 = true
		}
	} else if yyl3466 > 0 {

		if yyl3466 > cap(yyv3466) {
			yyrl3466, yyrt3466 = z.DecInferLen(yyl3466, z.DecBasicHandle().MaxInitLen, 16)
			yyv3466 = make([]LocalObjectReference, yyrl3466)
			yyc3466 = true

			yyrr3466 = len(yyv3466)
		} else if yyl3466 != len(yyv3466) {
			yyv3466 = yyv3466[:yyl3466]
			yyc3466 = true
		}
		yyj3466 := 0
		for ; yyj3466 < yyrr3466; yyj3466++ {
			if r.TryDecodeAsNil() {
				yyv3466[yyj3466] = LocalObjectReference{}
			} else {
				yyv3467 := &yyv3466[yyj3466]
				yyv3467.CodecDecodeSelf(d)
			}

		}
		if yyrt3466 {
			for ; yyj3466 < yyl3466; yyj3466++ {
				yyv3466 = append(yyv3466, LocalObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3466[yyj3466] = LocalObjectReference{}
				} else {
					yyv3468 := &yyv3466[yyj3466]
					yyv3468.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3466 := 0; !r.CheckBreak(); yyj3466++ {
			if yyj3466 >= len(yyv3466) {
				yyv3466 = append(yyv3466, LocalObjectReference{}) // var yyz3466 LocalObjectReference
				yyc3466 = true
			}

			if yyj3466 < len(yyv3466) {
				if r.TryDecodeAsNil() {
					yyv3466[yyj3466] = LocalObjectReference{}
				} else {
					yyv3469 := &yyv3466[yyj3466]
					yyv3469.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3466.End()
	}
	if yyc3466 {
		*v = yyv3466
	}

}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3470 := range v {
		yy3471 := &yyv3470
		yy3471.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3472 := *v
	yyh3472, yyl3472 := z.DecSliceHelperStart()

	var yyrr3472, yyrl3472 int
	var yyc3472, yyrt3472 bool
	_, _, _ = yyc3472, yyrt3472, yyrl3472
	yyrr3472 = yyl3472

	if yyv3472 == nil {
		if yyrl3472, yyrt3472 = z.DecInferLen(yyl3472, z.DecBasicHandle().MaxInitLen, 112); yyrt3472 {
			yyrr3472 = yyrl3472
		}
		yyv3472 = make([]PodCondition, yyrl3472)
		yyc3472 = true
	}

	if yyl3472 == 0 {
		if len(yyv3472) != 0 {
			yyv3472 = yyv3472[:0]
			yyc3472 = true
		}
	} else if yyl3472 > 0 {

		if yyl3472 > cap(yyv3472) {
			yyrl3472, yyrt3472 = z.DecInferLen(yyl3472, z.DecBasicHandle().MaxInitLen, 112)
			yyv3472 = make([]PodCondition, yyrl3472)
			yyc3472 = true

			yyrr3472 = len(yyv3472)
		} else if yyl3472 != len(yyv3472) {
			yyv3472 = yyv3472[:yyl3472]
			yyc3472 = true
		}
		yyj3472 := 0
		for ; yyj3472 < yyrr3472; yyj3472++ {
			if r.TryDecodeAsNil() {
				yyv3472[yyj3472] = PodCondition{}
			} else {
				yyv3473 := &yyv3472[yyj3472]
				yyv3473.CodecDecodeSelf(d)
			}

		}
		if yyrt3472 {
			for ; yyj3472 < yyl3472; yyj3472++ {
				yyv3472 = append(yyv3472, PodCondition{})
				if r.TryDecodeAsNil() {
					yyv3472[yyj3472] = PodCondition{}
				} else {
					yyv3474 := &yyv3472[yyj3472]
					yyv3474.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3472 := 0; !r.CheckBreak(); yyj3472++ {
			if yyj3472 >= len(yyv3472) {
				yyv3472 = append(yyv3472, PodCondition{}) // var yyz3472 PodCondition
				yyc3472 = true
			}

			if yyj3472 < len(yyv3472) {
				if r.TryDecodeAsNil() {
					yyv3472[yyj3472] = PodCondition{}
				} else {
					yyv3475 := &yyv3472[yyj3472]
					yyv3475.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3472.End()
	}
	if yyc3472 {
		*v = yyv3472
	}

}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3476 := range v {
		yy3477 := &yyv3476
		yy3477.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3478 := *v
	yyh3478, yyl3478 := z.DecSliceHelperStart()

	var yyrr3478, yyrl3478 int
	var yyc3478, yyrt3478 bool
	_, _, _ = yyc3478, yyrt3478, yyrl3478
	yyrr3478 = yyl3478

	if yyv3478 == nil {
		if yyrl3478, yyrt3478 = z.DecInferLen(yyl3478, z.DecBasicHandle().MaxInitLen, 128); yyrt3478 {
			yyrr3478 = yyrl3478
		}
		yyv3478 = make([]ContainerStatus, yyrl3478)
		yyc3478 = true
	}

	if yyl3478 == 0 {
		if len(yyv3478) != 0 {
			yyv3478 = yyv3478[:0]
			yyc3478 = true
		}
	} else if yyl3478 > 0 {

		if yyl3478 > cap(yyv3478) {
			yyrl3478, yyrt3478 = z.DecInferLen(yyl3478, z.DecBasicHandle().MaxInitLen, 128)
			yyv3478 = make([]ContainerStatus, yyrl3478)
			yyc3478 = true

			yyrr3478 = len(yyv3478)
		} else if yyl3478 != len(yyv3478) {
			yyv3478 = yyv3478[:yyl3478]
			yyc3478 = true
		}
		yyj3478 := 0
		for ; yyj3478 < yyrr3478; yyj3478++ {
			if r.TryDecodeAsNil() {
				yyv3478[yyj3478] = ContainerStatus{}
			} else {
				yyv3479 := &yyv3478[yyj3478]
				yyv3479.CodecDecodeSelf(d)
			}

		}
		if yyrt3478 {
			for ; yyj3478 < yyl3478; yyj3478++ {
				yyv3478 = append(yyv3478, ContainerStatus{})
				if r.TryDecodeAsNil() {
					yyv3478[yyj3478] = ContainerStatus{}
				} else {
					yyv3480 := &yyv3478[yyj3478]
					yyv3480.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3478 := 0; !r.CheckBreak(); yyj3478++ {
			if yyj3478 >= len(yyv3478) {
				yyv3478 = append(yyv3478, ContainerStatus{}) // var yyz3478 ContainerStatus
				yyc3478 = true
			}

			if yyj3478 < len(yyv3478) {
				if r.TryDecodeAsNil() {
					yyv3478[yyj3478] = ContainerStatus{}
				} else {
					yyv3481 := &yyv3478[yyj3478]
					yyv3481.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3478.End()
	}
	if yyc3478 {
		*v = yyv3478
	}

}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3482 := range v {
		yy3483 := &yyv3482
		yy3483.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3484 := *v
	yyh3484, yyl3484 := z.DecSliceHelperStart()

	var yyrr3484, yyrl3484 int
	var yyc3484, yyrt3484 bool
	_, _, _ = yyc3484, yyrt3484, yyrl3484
	yyrr3484 = yyl3484

	if yyv3484 == nil {
		if yyrl3484, yyrt3484 = z.DecInferLen(yyl3484, z.DecBasicHandle().MaxInitLen, 520); yyrt3484 {
			yyrr3484 = yyrl3484
		}
		yyv3484 = make([]Pod, yyrl3484)
		yyc3484 = true
	}

	if yyl3484 == 0 {
		if len(yyv3484) != 0 {
			yyv3484 = yyv3484[:0]
			yyc3484 = true
		}
	} else if yyl3484 > 0 {

		if yyl3484 > cap(yyv3484) {
			yyrl3484, yyrt3484 = z.DecInferLen(yyl3484, z.DecBasicHandle().MaxInitLen, 520)
			yyv3484 = make([]Pod, yyrl3484)
			yyc3484 = true

			yyrr3484 = len(yyv3484)
		} else if yyl3484 != len(yyv3484) {
			yyv3484 = yyv3484[:yyl3484]
			yyc3484 = true
		}
		yyj3484 := 0
		for ; yyj3484 < yyrr3484; yyj3484++ {
			if r.TryDecodeAsNil() {
				yyv3484[yyj3484] = Pod{}
			} else {
				yyv3485 := &yyv3484[yyj3484]
				yyv3485.CodecDecodeSelf(d)
			}

		}
		if yyrt3484 {
			for ; yyj3484 < yyl3484; yyj3484++ {
				yyv3484 = append(yyv3484, Pod{})
				if r.TryDecodeAsNil() {
					yyv3484[yyj3484] = Pod{}
				} else {
					yyv3486 := &yyv3484[yyj3484]
					yyv3486.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3484 := 0; !r.CheckBreak(); yyj3484++ {
			if yyj3484 >= len(yyv3484) {
				yyv3484 = append(yyv3484, Pod{}) // var yyz3484 Pod
				yyc3484 = true
			}

			if yyj3484 < len(yyv3484) {
				if r.TryDecodeAsNil() {
					yyv3484[yyj3484] = Pod{}
				} else {
					yyv3487 := &yyv3484[yyj3484]
					yyv3487.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3484.End()
	}
	if yyc3484 {
		*v = yyv3484
	}

}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3488 := range v {
		yy3489 := &yyv3488
		yy3489.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3490 := *v
	yyh3490, yyl3490 := z.DecSliceHelperStart()

	var yyrr3490, yyrl3490 int
	var yyc3490, yyrt3490 bool
	_, _, _ = yyc3490, yyrt3490, yyrl3490
	yyrr3490 = yyl3490

	if yyv3490 == nil {
		if yyrl3490, yyrt3490 = z.DecInferLen(yyl3490, z.DecBasicHandle().MaxInitLen, 544); yyrt3490 {
			yyrr3490 = yyrl3490
		}
		yyv3490 = make([]PodTemplate, yyrl3490)
		yyc3490 = true
	}

	if yyl3490 == 0 {
		if len(yyv3490) != 0 {
			yyv3490 = yyv3490[:0]
			yyc3490 = true
		}
	} else if yyl3490 > 0 {

		if yyl3490 > cap(yyv3490) {
			yyrl3490, yyrt3490 = z.DecInferLen(yyl3490, z.DecBasicHandle().MaxInitLen, 544)
			yyv3490 = make([]PodTemplate, yyrl3490)
			yyc3490 = true

			yyrr3490 = len(yyv3490)
		} else if yyl3490 != len(yyv3490) {
			yyv3490 = yyv3490[:yyl3490]
			yyc3490 = true
		}
		yyj3490 := 0
		for ; yyj3490 < yyrr3490; yyj3490++ {
			if r.TryDecodeAsNil() {
				yyv3490[yyj3490] = PodTemplate{}
			} else {
				yyv3491 := &yyv3490[yyj3490]
				yyv3491.CodecDecodeSelf(d)
			}

		}
		if yyrt3490 {
			for ; yyj3490 < yyl3490; yyj3490++ {
				yyv3490 = append(yyv3490, PodTemplate{})
				if r.TryDecodeAsNil() {
					yyv3490[yyj3490] = PodTemplate{}
				} else {
					yyv3492 := &yyv3490[yyj3490]
					yyv3492.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3490 := 0; !r.CheckBreak(); yyj3490++ {
			if yyj3490 >= len(yyv3490) {
				yyv3490 = append(yyv3490, PodTemplate{}) // var yyz3490 PodTemplate
				yyc3490 = true
			}

			if yyj3490 < len(yyv3490) {
				if r.TryDecodeAsNil() {
					yyv3490[yyj3490] = PodTemplate{}
				} else {
					yyv3493 := &yyv3490[yyj3490]
					yyv3493.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3490.End()
	}
	if yyc3490 {
		*v = yyv3490
	}

}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3494 := range v {
		yy3495 := &yyv3494
		yy3495.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3496 := *v
	yyh3496, yyl3496 := z.DecSliceHelperStart()

	var yyrr3496, yyrl3496 int
	var yyc3496, yyrt3496 bool
	_, _, _ = yyc3496, yyrt3496, yyrl3496
	yyrr3496 = yyl3496

	if yyv3496 == nil {
		if yyrl3496, yyrt3496 = z.DecInferLen(yyl3496, z.DecBasicHandle().MaxInitLen, 232); yyrt3496 {
			yyrr3496 = yyrl3496
		}
		yyv3496 = make([]ReplicationController, yyrl3496)
		yyc3496 = true
	}

	if yyl3496 == 0 {
		if len(yyv3496) != 0 {
			yyv3496 = yyv3496[:0]
			yyc3496 = true
		}
	} else if yyl3496 > 0 {

		if yyl3496 > cap(yyv3496) {
			yyrl3496, yyrt3496 = z.DecInferLen(yyl3496, z.DecBasicHandle().MaxInitLen, 232)
			yyv3496 = make([]ReplicationController, yyrl3496)
			yyc3496 = true

			yyrr3496 = len(yyv3496)
		} else if yyl3496 != len(yyv3496) {
			yyv3496 = yyv3496[:yyl3496]
			yyc3496 = true
		}
		yyj3496 := 0
		for ; yyj3496 < yyrr3496; yyj3496++ {
			if r.TryDecodeAsNil() {
				yyv3496[yyj3496] = ReplicationController{}
			} else {
				yyv3497 := &yyv3496[yyj3496]
				yyv3497.CodecDecodeSelf(d)
			}

		}
		if yyrt3496 {
			for ; yyj3496 < yyl3496; yyj3496++ {
				yyv3496 = append(yyv3496, ReplicationController{})
				if r.TryDecodeAsNil() {
					yyv3496[yyj3496] = ReplicationController{}
				} else {
					yyv3498 := &yyv3496[yyj3496]
					yyv3498.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3496 := 0; !r.CheckBreak(); yyj3496++ {
			if yyj3496 >= len(yyv3496) {
				yyv3496 = append(yyv3496, ReplicationController{}) // var yyz3496 ReplicationController
				yyc3496 = true
			}

			if yyj3496 < len(yyv3496) {
				if r.TryDecodeAsNil() {
					yyv3496[yyj3496] = ReplicationController{}
				} else {
					yyv3499 := &yyv3496[yyj3496]
					yyv3499.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3496.End()
	}
	if yyc3496 {
		*v = yyv3496
	}

}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3500 := range v {
		yy3501 := &yyv3500
		yy3501.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3502 := *v
	yyh3502, yyl3502 := z.DecSliceHelperStart()

	var yyrr3502, yyrl3502 int
	var yyc3502, yyrt3502 bool
	_, _, _ = yyc3502, yyrt3502, yyrl3502
	yyrr3502 = yyl3502

	if yyv3502 == nil {
		if yyrl3502, yyrt3502 = z.DecInferLen(yyl3502, z.DecBasicHandle().MaxInitLen, 32); yyrt3502 {
			yyrr3502 = yyrl3502
		}
		yyv3502 = make([]LoadBalancerIngress, yyrl3502)
		yyc3502 = true
	}

	if yyl3502 == 0 {
		if len(yyv3502) != 0 {
			yyv3502 = yyv3502[:0]
			yyc3502 = true
		}
	} else if yyl3502 > 0 {

		if yyl3502 > cap(yyv3502) {
			yyrl3502, yyrt3502 = z.DecInferLen(yyl3502, z.DecBasicHandle().MaxInitLen, 32)
			yyv3502 = make([]LoadBalancerIngress, yyrl3502)
			yyc3502 = true

			yyrr3502 = len(yyv3502)
		} else if yyl3502 != len(yyv3502) {
			yyv3502 = yyv3502[:yyl3502]
			yyc3502 = true
		}
		yyj3502 := 0
		for ; yyj3502 < yyrr3502; yyj3502++ {
			if r.TryDecodeAsNil() {
				yyv3502[yyj3502] = LoadBalancerIngress{}
			} else {
				yyv3503 := &yyv3502[yyj3502]
				yyv3503.CodecDecodeSelf(d)
			}

		}
		if yyrt3502 {
			for ; yyj3502 < yyl3502; yyj3502++ {
				yyv3502 = append(yyv3502, LoadBalancerIngress{})
				if r.TryDecodeAsNil() {
					yyv3502[yyj3502] = LoadBalancerIngress{}
				} else {
					yyv3504 := &yyv3502[yyj3502]
					yyv3504.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3502 := 0; !r.CheckBreak(); yyj3502++ {
			if yyj3502 >= len(yyv3502) {
				yyv3502 = append(yyv3502, LoadBalancerIngress{}) // var yyz3502 LoadBalancerIngress
				yyc3502 = true
			}

			if yyj3502 < len(yyv3502) {
				if r.TryDecodeAsNil() {
					yyv3502[yyj3502] = LoadBalancerIngress{}
				} else {
					yyv3505 := &yyv3502[yyj3502]
					yyv3505.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3502.End()
	}
	if yyc3502 {
		*v = yyv3502
	}

}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3506 := range v {
		yy3507 := &yyv3506
		yy3507.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3508 := *v
	yyh3508, yyl3508 := z.DecSliceHelperStart()

	var yyrr3508, yyrl3508 int
	var yyc3508, yyrt3508 bool
	_, _, _ = yyc3508, yyrt3508, yyrl3508
	yyrr3508 = yyl3508

	if yyv3508 == nil {
		if yyrl3508, yyrt3508 = z.DecInferLen(yyl3508, z.DecBasicHandle().MaxInitLen, 80); yyrt3508 {
			yyrr3508 = yyrl3508
		}
		yyv3508 = make([]ServicePort, yyrl3508)
		yyc3508 = true
	}

	if yyl3508 == 0 {
		if len(yyv3508) != 0 {
			yyv3508 = yyv3508[:0]
			yyc3508 = true
		}
	} else if yyl3508 > 0 {

		if yyl3508 > cap(yyv3508) {
			yyrl3508, yyrt3508 = z.DecInferLen(yyl3508, z.DecBasicHandle().MaxInitLen, 80)
			yyv3508 = make([]ServicePort, yyrl3508)
			yyc3508 = true

			yyrr3508 = len(yyv3508)
		} else if yyl3508 != len(yyv3508) {
			yyv3508 = yyv3508[:yyl3508]
			yyc3508 = true
		}
		yyj3508 := 0
		for ; yyj3508 < yyrr3508; yyj3508++ {
			if r.TryDecodeAsNil() {
				yyv3508[yyj3508] = ServicePort{}
			} else {
				yyv3509 := &yyv3508[yyj3508]
				yyv3509.CodecDecodeSelf(d)
			}

		}
		if yyrt3508 {
			for ; yyj3508 < yyl3508; yyj3508++ {
				yyv3508 = append(yyv3508, ServicePort{})
				if r.TryDecodeAsNil() {
					yyv3508[yyj3508] = ServicePort{}
				} else {
					yyv3510 := &yyv3508[yyj3508]
					yyv3510.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3508 := 0; !r.CheckBreak(); yyj3508++ {
			if yyj3508 >= len(yyv3508) {
				yyv3508 = append(yyv3508, ServicePort{}) // var yyz3508 ServicePort
				yyc3508 = true
			}

			if yyj3508 < len(yyv3508) {
				if r.TryDecodeAsNil() {
					yyv3508[yyj3508] = ServicePort{}
				} else {
					yyv3511 := &yyv3508[yyj3508]
					yyv3511.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3508.End()
	}
	if yyc3508 {
		*v = yyv3508
	}

}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3512 := range v {
		yy3513 := &yyv3512
		yy3513.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3514 := *v
	yyh3514, yyl3514 := z.DecSliceHelperStart()

	var yyrr3514, yyrl3514 int
	var yyc3514, yyrt3514 bool
	_, _, _ = yyc3514, yyrt3514, yyrl3514
	yyrr3514 = yyl3514

	if yyv3514 == nil {
		if yyrl3514, yyrt3514 = z.DecInferLen(yyl3514, z.DecBasicHandle().MaxInitLen, 360); yyrt3514 {
			yyrr3514 = yyrl3514
		}
		yyv3514 = make([]Service, yyrl3514)
		yyc3514 = true
	}

	if yyl3514 == 0 {
		if len(yyv3514) != 0 {
			yyv3514 = yyv3514[:0]
			yyc3514 = true
		}
	} else if yyl3514 > 0 {

		if yyl3514 > cap(yyv3514) {
			yyrl3514, yyrt3514 = z.DecInferLen(yyl3514, z.DecBasicHandle().MaxInitLen, 360)
			yyv3514 = make([]Service, yyrl3514)
			yyc3514 = true

			yyrr3514 = len(yyv3514)
		} else if yyl3514 != len(yyv3514) {
			yyv3514 = yyv3514[:yyl3514]
			yyc3514 = true
		}
		yyj3514 := 0
		for ; yyj3514 < yyrr3514; yyj3514++ {
			if r.TryDecodeAsNil() {
				yyv3514[yyj3514] = Service{}
			} else {
				yyv3515 := &yyv3514[yyj3514]
				yyv3515.CodecDecodeSelf(d)
			}

		}
		if yyrt3514 {
			for ; yyj3514 < yyl3514; yyj3514++ {
				yyv3514 = append(yyv3514, Service{})
				if r.TryDecodeAsNil() {
					yyv3514[yyj3514] = Service{}
				} else {
					yyv3516 := &yyv3514[yyj3514]
					yyv3516.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3514 := 0; !r.CheckBreak(); yyj3514++ {
			if yyj3514 >= len(yyv3514) {
				yyv3514 = append(yyv3514, Service{}) // var yyz3514 Service
				yyc3514 = true
			}

			if yyj3514 < len(yyv3514) {
				if r.TryDecodeAsNil() {
					yyv3514[yyj3514] = Service{}
				} else {
					yyv3517 := &yyv3514[yyj3514]
					yyv3517.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3514.End()
	}
	if yyc3514 {
		*v = yyv3514
	}

}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3518 := range v {
		yy3519 := &yyv3518
		yy3519.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3520 := *v
	yyh3520, yyl3520 := z.DecSliceHelperStart()

	var yyrr3520, yyrl3520 int
	var yyc3520, yyrt3520 bool
	_, _, _ = yyc3520, yyrt3520, yyrl3520
	yyrr3520 = yyl3520

	if yyv3520 == nil {
		if yyrl3520, yyrt3520 = z.DecInferLen(yyl3520, z.DecBasicHandle().MaxInitLen, 112); yyrt3520 {
			yyrr3520 = yyrl3520
		}
		yyv3520 = make([]ObjectReference, yyrl3520)
		yyc3520 = true
	}

	if yyl3520 == 0 {
		if len(yyv3520) != 0 {
			yyv3520 = yyv3520[:0]
			yyc3520 = true
		}
	} else if yyl3520 > 0 {

		if yyl3520 > cap(yyv3520) {
			yyrl3520, yyrt3520 = z.DecInferLen(yyl3520, z.DecBasicHandle().MaxInitLen, 112)
			yyv3520 = make([]ObjectReference, yyrl3520)
			yyc3520 = true

			yyrr3520 = len(yyv3520)
		} else if yyl3520 != len(yyv3520) {
			yyv3520 = yyv3520[:yyl3520]
			yyc3520 = true
		}
		yyj3520 := 0
		for ; yyj3520 < yyrr3520; yyj3520++ {
			if r.TryDecodeAsNil() {
				yyv3520[yyj3520] = ObjectReference{}
			} else {
				yyv3521 := &yyv3520[yyj3520]
				yyv3521.CodecDecodeSelf(d)
			}

		}
		if yyrt3520 {
			for ; yyj3520 < yyl3520; yyj3520++ {
				yyv3520 = append(yyv3520, ObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3520[yyj3520] = ObjectReference{}
				} else {
					yyv3522 := &yyv3520[yyj3520]
					yyv3522.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3520 := 0; !r.CheckBreak(); yyj3520++ {
			if yyj3520 >= len(yyv3520) {
				yyv3520 = append(yyv3520, ObjectReference{}) // var yyz3520 ObjectReference
				yyc3520 = true
			}

			if yyj3520 < len(yyv3520) {
				if r.TryDecodeAsNil() {
					yyv3520[yyj3520] = ObjectReference{}
				} else {
					yyv3523 := &yyv3520[yyj3520]
					yyv3523.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3520.End()
	}
	if yyc3520 {
		*v = yyv3520
	}

}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3524 := range v {
		yy3525 := &yyv3524
		yy3525.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3526 := *v
	yyh3526, yyl3526 := z.DecSliceHelperStart()

	var yyrr3526, yyrl3526 int
	var yyc3526, yyrt3526 bool
	_, _, _ = yyc3526, yyrt3526, yyrl3526
	yyrr3526 = yyl3526

	if yyv3526 == nil {
		if yyrl3526, yyrt3526 = z.DecInferLen(yyl3526, z.DecBasicHandle().MaxInitLen, 240); yyrt3526 {
			yyrr3526 = yyrl3526
		}
		yyv3526 = make([]ServiceAccount, yyrl3526)
		yyc3526 = true
	}

	if yyl3526 == 0 {
		if len(yyv3526) != 0 {
			yyv3526 = yyv3526[:0]
			yyc3526 = true
		}
	} else if yyl3526 > 0 {

		if yyl3526 > cap(yyv3526) {
			yyrl3526, yyrt3526 = z.DecInferLen(yyl3526, z.DecBasicHandle().MaxInitLen, 240)
			yyv3526 = make([]ServiceAccount, yyrl3526)
			yyc3526 = true

			yyrr3526 = len(yyv3526)
		} else if yyl3526 != len(yyv3526) {
			yyv3526 = yyv3526[:yyl3526]
			yyc3526 = true
		}
		yyj3526 := 0
		for ; yyj3526 < yyrr3526; yyj3526++ {
			if r.TryDecodeAsNil() {
				yyv3526[yyj3526] = ServiceAccount{}
			} else {
				yyv3527 := &yyv3526[yyj3526]
				yyv3527.CodecDecodeSelf(d)
			}

		}
		if yyrt3526 {
			for ; yyj3526 < yyl3526; yyj3526++ {
				yyv3526 = append(yyv3526, ServiceAccount{})
				if r.TryDecodeAsNil() {
					yyv3526[yyj3526] = ServiceAccount{}
				} else {
					yyv3528 := &yyv3526[yyj3526]
					yyv3528.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3526 := 0; !r.CheckBreak(); yyj3526++ {
			if yyj3526 >= len(yyv3526) {
				yyv3526 = append(yyv3526, ServiceAccount{}) // var yyz3526 ServiceAccount
				yyc3526 = true
			}

			if yyj3526 < len(yyv3526) {
				if r.TryDecodeAsNil() {
					yyv3526[yyj3526] = ServiceAccount{}
				} else {
					yyv3529 := &yyv3526[yyj3526]
					yyv3529.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3526.End()
	}
	if yyc3526 {
		*v = yyv3526
	}

}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3530 := range v {
		yy3531 := &yyv3530
		yy3531.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3532 := *v
	yyh3532, yyl3532 := z.DecSliceHelperStart()

	var yyrr3532, yyrl3532 int
	var yyc3532, yyrt3532 bool
	_, _, _ = yyc3532, yyrt3532, yyrl3532
	yyrr3532 = yyl3532

	if yyv3532 == nil {
		if yyrl3532, yyrt3532 = z.DecInferLen(yyl3532, z.DecBasicHandle().MaxInitLen, 72); yyrt3532 {
			yyrr3532 = yyrl3532
		}
		yyv3532 = make([]EndpointSubset, yyrl3532)
		yyc3532 = true
	}

	if yyl3532 == 0 {
		if len(yyv3532) != 0 {
			yyv3532 = yyv3532[:0]
			yyc3532 = true
		}
	} else if yyl3532 > 0 {

		if yyl3532 > cap(yyv3532) {
			yyrl3532, yyrt3532 = z.DecInferLen(yyl3532, z.DecBasicHandle().MaxInitLen, 72)
			yyv3532 = make([]EndpointSubset, yyrl3532)
			yyc3532 = true

			yyrr3532 = len(yyv3532)
		} else if yyl3532 != len(yyv3532) {
			yyv3532 = yyv3532[:yyl3532]
			yyc3532 = true
		}
		yyj3532 := 0
		for ; yyj3532 < yyrr3532; yyj3532++ {
			if r.TryDecodeAsNil() {
				yyv3532[yyj3532] = EndpointSubset{}
			} else {
				yyv3533 := &yyv3532[yyj3532]
				yyv3533.CodecDecodeSelf(d)
			}

		}
		if yyrt3532 {
			for ; yyj3532 < yyl3532; yyj3532++ {
				yyv3532 = append(yyv3532, EndpointSubset{})
				if r.TryDecodeAsNil() {
					yyv3532[yyj3532] = EndpointSubset{}
				} else {
					yyv3534 := &yyv3532[yyj3532]
					yyv3534.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3532 := 0; !r.CheckBreak(); yyj3532++ {
			if yyj3532 >= len(yyv3532) {
				yyv3532 = append(yyv3532, EndpointSubset{}) // var yyz3532 EndpointSubset
				yyc3532 = true
			}

			if yyj3532 < len(yyv3532) {
				if r.TryDecodeAsNil() {
					yyv3532[yyj3532] = EndpointSubset{}
				} else {
					yyv3535 := &yyv3532[yyj3532]
					yyv3535.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3532.End()
	}
	if yyc3532 {
		*v = yyv3532
	}

}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3536 := range v {
		yy3537 := &yyv3536
		yy3537.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3538 := *v
	yyh3538, yyl3538 := z.DecSliceHelperStart()

	var yyrr3538, yyrl3538 int
	var yyc3538, yyrt3538 bool
	_, _, _ = yyc3538, yyrt3538, yyrl3538
	yyrr3538 = yyl3538

	if yyv3538 == nil {
		if yyrl3538, yyrt3538 = z.DecInferLen(yyl3538, z.DecBasicHandle().MaxInitLen, 24); yyrt3538 {
			yyrr3538 = yyrl3538
		}
		yyv3538 = make([]EndpointAddress, yyrl3538)
		yyc3538 = true
	}

	if yyl3538 == 0 {
		if len(yyv3538) != 0 {
			yyv3538 = yyv3538[:0]
			yyc3538 = true
		}
	} else if yyl3538 > 0 {

		if yyl3538 > cap(yyv3538) {
			yyrl3538, yyrt3538 = z.DecInferLen(yyl3538, z.DecBasicHandle().MaxInitLen, 24)
			yyv3538 = make([]EndpointAddress, yyrl3538)
			yyc3538 = true

			yyrr3538 = len(yyv3538)
		} else if yyl3538 != len(yyv3538) {
			yyv3538 = yyv3538[:yyl3538]
			yyc3538 = true
		}
		yyj3538 := 0
		for ; yyj3538 < yyrr3538; yyj3538++ {
			if r.TryDecodeAsNil() {
				yyv3538[yyj3538] = EndpointAddress{}
			} else {
				yyv3539 := &yyv3538[yyj3538]
				yyv3539.CodecDecodeSelf(d)
			}

		}
		if yyrt3538 {
			for ; yyj3538 < yyl3538; yyj3538++ {
				yyv3538 = append(yyv3538, EndpointAddress{})
				if r.TryDecodeAsNil() {
					yyv3538[yyj3538] = EndpointAddress{}
				} else {
					yyv3540 := &yyv3538[yyj3538]
					yyv3540.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3538 := 0; !r.CheckBreak(); yyj3538++ {
			if yyj3538 >= len(yyv3538) {
				yyv3538 = append(yyv3538, EndpointAddress{}) // var yyz3538 EndpointAddress
				yyc3538 = true
			}

			if yyj3538 < len(yyv3538) {
				if r.TryDecodeAsNil() {
					yyv3538[yyj3538] = EndpointAddress{}
				} else {
					yyv3541 := &yyv3538[yyj3538]
					yyv3541.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3538.End()
	}
	if yyc3538 {
		*v = yyv3538
	}

}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3542 := range v {
		yy3543 := &yyv3542
		yy3543.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3544 := *v
	yyh3544, yyl3544 := z.DecSliceHelperStart()

	var yyrr3544, yyrl3544 int
	var yyc3544, yyrt3544 bool
	_, _, _ = yyc3544, yyrt3544, yyrl3544
	yyrr3544 = yyl3544

	if yyv3544 == nil {
		if yyrl3544, yyrt3544 = z.DecInferLen(yyl3544, z.DecBasicHandle().MaxInitLen, 40); yyrt3544 {
			yyrr3544 = yyrl3544
		}
		yyv3544 = make([]EndpointPort, yyrl3544)
		yyc3544 = true
	}

	if yyl3544 == 0 {
		if len(yyv3544) != 0 {
			yyv3544 = yyv3544[:0]
			yyc3544 = true
		}
	} else if yyl3544 > 0 {

		if yyl3544 > cap(yyv3544) {
			yyrl3544, yyrt3544 = z.DecInferLen(yyl3544, z.DecBasicHandle().MaxInitLen, 40)
			yyv3544 = make([]EndpointPort, yyrl3544)
			yyc3544 = true

			yyrr3544 = len(yyv3544)
		} else if yyl3544 != len(yyv3544) {
			yyv3544 = yyv3544[:yyl3544]
			yyc3544 = true
		}
		yyj3544 := 0
		for ; yyj3544 < yyrr3544; yyj3544++ {
			if r.TryDecodeAsNil() {
				yyv3544[yyj3544] = EndpointPort{}
			} else {
				yyv3545 := &yyv3544[yyj3544]
				yyv3545.CodecDecodeSelf(d)
			}

		}
		if yyrt3544 {
			for ; yyj3544 < yyl3544; yyj3544++ {
				yyv3544 = append(yyv3544, EndpointPort{})
				if r.TryDecodeAsNil() {
					yyv3544[yyj3544] = EndpointPort{}
				} else {
					yyv3546 := &yyv3544[yyj3544]
					yyv3546.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3544 := 0; !r.CheckBreak(); yyj3544++ {
			if yyj3544 >= len(yyv3544) {
				yyv3544 = append(yyv3544, EndpointPort{}) // var yyz3544 EndpointPort
				yyc3544 = true
			}

			if yyj3544 < len(yyv3544) {
				if r.TryDecodeAsNil() {
					yyv3544[yyj3544] = EndpointPort{}
				} else {
					yyv3547 := &yyv3544[yyj3544]
					yyv3547.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3544.End()
	}
	if yyc3544 {
		*v = yyv3544
	}

}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3548 := range v {
		yy3549 := &yyv3548
		yy3549.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3550 := *v
	yyh3550, yyl3550 := z.DecSliceHelperStart()

	var yyrr3550, yyrl3550 int
	var yyc3550, yyrt3550 bool
	_, _, _ = yyc3550, yyrt3550, yyrl3550
	yyrr3550 = yyl3550

	if yyv3550 == nil {
		if yyrl3550, yyrt3550 = z.DecInferLen(yyl3550, z.DecBasicHandle().MaxInitLen, 216); yyrt3550 {
			yyrr3550 = yyrl3550
		}
		yyv3550 = make([]Endpoints, yyrl3550)
		yyc3550 = true
	}

	if yyl3550 == 0 {
		if len(yyv3550) != 0 {
			yyv3550 = yyv3550[:0]
			yyc3550 = true
		}
	} else if yyl3550 > 0 {

		if yyl3550 > cap(yyv3550) {
			yyrl3550, yyrt3550 = z.DecInferLen(yyl3550, z.DecBasicHandle().MaxInitLen, 216)
			yyv3550 = make([]Endpoints, yyrl3550)
			yyc3550 = true

			yyrr3550 = len(yyv3550)
		} else if yyl3550 != len(yyv3550) {
			yyv3550 = yyv3550[:yyl3550]
			yyc3550 = true
		}
		yyj3550 := 0
		for ; yyj3550 < yyrr3550; yyj3550++ {
			if r.TryDecodeAsNil() {
				yyv3550[yyj3550] = Endpoints{}
			} else {
				yyv3551 := &yyv3550[yyj3550]
				yyv3551.CodecDecodeSelf(d)
			}

		}
		if yyrt3550 {
			for ; yyj3550 < yyl3550; yyj3550++ {
				yyv3550 = append(yyv3550, Endpoints{})
				if r.TryDecodeAsNil() {
					yyv3550[yyj3550] = Endpoints{}
				} else {
					yyv3552 := &yyv3550[yyj3550]
					yyv3552.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3550 := 0; !r.CheckBreak(); yyj3550++ {
			if yyj3550 >= len(yyv3550) {
				yyv3550 = append(yyv3550, Endpoints{}) // var yyz3550 Endpoints
				yyc3550 = true
			}

			if yyj3550 < len(yyv3550) {
				if r.TryDecodeAsNil() {
					yyv3550[yyj3550] = Endpoints{}
				} else {
					yyv3553 := &yyv3550[yyj3550]
					yyv3553.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3550.End()
	}
	if yyc3550 {
		*v = yyv3550
	}

}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3554 := range v {
		yy3555 := &yyv3554
		yy3555.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3556 := *v
	yyh3556, yyl3556 := z.DecSliceHelperStart()

	var yyrr3556, yyrl3556 int
	var yyc3556, yyrt3556 bool
	_, _, _ = yyc3556, yyrt3556, yyrl3556
	yyrr3556 = yyl3556

	if yyv3556 == nil {
		if yyrl3556, yyrt3556 = z.DecInferLen(yyl3556, z.DecBasicHandle().MaxInitLen, 112); yyrt3556 {
			yyrr3556 = yyrl3556
		}
		yyv3556 = make([]NodeCondition, yyrl3556)
		yyc3556 = true
	}

	if yyl3556 == 0 {
		if len(yyv3556) != 0 {
			yyv3556 = yyv3556[:0]
			yyc3556 = true
		}
	} else if yyl3556 > 0 {

		if yyl3556 > cap(yyv3556) {
			yyrl3556, yyrt3556 = z.DecInferLen(yyl3556, z.DecBasicHandle().MaxInitLen, 112)
			yyv3556 = make([]NodeCondition, yyrl3556)
			yyc3556 = true

			yyrr3556 = len(yyv3556)
		} else if yyl3556 != len(yyv3556) {
			yyv3556 = yyv3556[:yyl3556]
			yyc3556 = true
		}
		yyj3556 := 0
		for ; yyj3556 < yyrr3556; yyj3556++ {
			if r.TryDecodeAsNil() {
				yyv3556[yyj3556] = NodeCondition{}
			} else {
				yyv3557 := &yyv3556[yyj3556]
				yyv3557.CodecDecodeSelf(d)
			}

		}
		if yyrt3556 {
			for ; yyj3556 < yyl3556; yyj3556++ {
				yyv3556 = append(yyv3556, NodeCondition{})
				if r.TryDecodeAsNil() {
					yyv3556[yyj3556] = NodeCondition{}
				} else {
					yyv3558 := &yyv3556[yyj3556]
					yyv3558.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3556 := 0; !r.CheckBreak(); yyj3556++ {
			if yyj3556 >= len(yyv3556) {
				yyv3556 = append(yyv3556, NodeCondition{}) // var yyz3556 NodeCondition
				yyc3556 = true
			}

			if yyj3556 < len(yyv3556) {
				if r.TryDecodeAsNil() {
					yyv3556[yyj3556] = NodeCondition{}
				} else {
					yyv3559 := &yyv3556[yyj3556]
					yyv3559.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3556.End()
	}
	if yyc3556 {
		*v = yyv3556
	}

}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3560 := range v {
		yy3561 := &yyv3560
		yy3561.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3562 := *v
	yyh3562, yyl3562 := z.DecSliceHelperStart()

	var yyrr3562, yyrl3562 int
	var yyc3562, yyrt3562 bool
	_, _, _ = yyc3562, yyrt3562, yyrl3562
	yyrr3562 = yyl3562

	if yyv3562 == nil {
		if yyrl3562, yyrt3562 = z.DecInferLen(yyl3562, z.DecBasicHandle().MaxInitLen, 32); yyrt3562 {
			yyrr3562 = yyrl3562
		}
		yyv3562 = make([]NodeAddress, yyrl3562)
		yyc3562 = true
	}

	if yyl3562 == 0 {
		if len(yyv3562) != 0 {
			yyv3562 = yyv3562[:0]
			yyc3562 = true
		}
	} else if yyl3562 > 0 {

		if yyl3562 > cap(yyv3562) {
			yyrl3562, yyrt3562 = z.DecInferLen(yyl3562, z.DecBasicHandle().MaxInitLen, 32)
			yyv3562 = make([]NodeAddress, yyrl3562)
			yyc3562 = true

			yyrr3562 = len(yyv3562)
		} else if yyl3562 != len(yyv3562) {
			yyv3562 = yyv3562[:yyl3562]
			yyc3562 = true
		}
		yyj3562 := 0
		for ; yyj3562 < yyrr3562; yyj3562++ {
			if r.TryDecodeAsNil() {
				yyv3562[yyj3562] = NodeAddress{}
			} else {
				yyv3563 := &yyv3562[yyj3562]
				yyv3563.CodecDecodeSelf(d)
			}

		}
		if yyrt3562 {
			for ; yyj3562 < yyl3562; yyj3562++ {
				yyv3562 = append(yyv3562, NodeAddress{})
				if r.TryDecodeAsNil() {
					yyv3562[yyj3562] = NodeAddress{}
				} else {
					yyv3564 := &yyv3562[yyj3562]
					yyv3564.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3562 := 0; !r.CheckBreak(); yyj3562++ {
			if yyj3562 >= len(yyv3562) {
				yyv3562 = append(yyv3562, NodeAddress{}) // var yyz3562 NodeAddress
				yyc3562 = true
			}

			if yyj3562 < len(yyv3562) {
				if r.TryDecodeAsNil() {
					yyv3562[yyj3562] = NodeAddress{}
				} else {
					yyv3565 := &yyv3562[yyj3562]
					yyv3565.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3562.End()
	}
	if yyc3562 {
		*v = yyv3562
	}

}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3566, yyv3566 := range v {
		yyk3566.CodecEncodeSelf(e)
		yy3567 := &yyv3566
		yym3568 := z.EncBinary()
		_ = yym3568
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3567) {
		} else if !yym3568 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3567)
		} else {
			z.EncFallback(yy3567)
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3569 := *v
	yyl3569 := r.ReadMapStart()
	yybh3569 := z.DecBasicHandle()
	if yyv3569 == nil {
		yyrl3569, _ := z.DecInferLen(yyl3569, yybh3569.MaxInitLen, 40)
		yyv3569 = make(map[ResourceName]pkg3_resource.Quantity, yyrl3569)
		*v = yyv3569
	}
	var yymk3569 ResourceName
	var yymv3569 pkg3_resource.Quantity
	var yymg3569 bool
	if yybh3569.MapValueReset {
		yymg3569 = true
	}
	if yyl3569 > 0 {
		for yyj3569 := 0; yyj3569 < yyl3569; yyj3569++ {
			if r.TryDecodeAsNil() {
				yymk3569 = ""
			} else {
				yymk3569 = ResourceName(r.DecodeString())
			}

			if yymg3569 {
				yymv3569 = yyv3569[yymk3569]
			} else {
				yymv3569 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3569 = pkg3_resource.Quantity{}
			} else {
				yyv3571 := &yymv3569
				yym3572 := z.DecBinary()
				_ = yym3572
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3571) {
				} else if !yym3572 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3571)
				} else {
					z.DecFallback(yyv3571, false)
				}
			}

			if yyv3569 != nil {
				yyv3569[yymk3569] = yymv3569
			}
		}
	} else if yyl3569 < 0 {
		for yyj3569 := 0; !r.CheckBreak(); yyj3569++ {
			if r.TryDecodeAsNil() {
				yymk3569 = ""
			} else {
				yymk3569 = ResourceName(r.DecodeString())
			}

			if yymg3569 {
				yymv3569 = yyv3569[yymk3569]
			} else {
				yymv3569 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3569 = pkg3_resource.Quantity{}
			} else {
				yyv3574 := &yymv3569
				yym3575 := z.DecBinary()
				_ = yym3575
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3574) {
				} else if !yym3575 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3574)
				} else {
					z.DecFallback(yyv3574, false)
				}
			}

			if yyv3569 != nil {
				yyv3569[yymk3569] = yymv3569
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3576 := range v {
		yy3577 := &yyv3576
		yy3577.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3578 := *v
	yyh3578, yyl3578 := z.DecSliceHelperStart()

	var yyrr3578, yyrl3578 int
	var yyc3578, yyrt3578 bool
	_, _, _ = yyc3578, yyrt3578, yyrl3578
	yyrr3578 = yyl3578

	if yyv3578 == nil {
		if yyrl3578, yyrt3578 = z.DecInferLen(yyl3578, z.DecBasicHandle().MaxInitLen, 456); yyrt3578 {
			yyrr3578 = yyrl3578
		}
		yyv3578 = make([]Node, yyrl3578)
		yyc3578 = true
	}

	if yyl3578 == 0 {
		if len(yyv3578) != 0 {
			yyv3578 = yyv3578[:0]
			yyc3578 = true
		}
	} else if yyl3578 > 0 {

		if yyl3578 > cap(yyv3578) {
			yyrl3578, yyrt3578 = z.DecInferLen(yyl3578, z.DecBasicHandle().MaxInitLen, 456)
			yyv3578 = make([]Node, yyrl3578)
			yyc3578 = true

			yyrr3578 = len(yyv3578)
		} else if yyl3578 != len(yyv3578) {
			yyv3578 = yyv3578[:yyl3578]
			yyc3578 = true
		}
		yyj3578 := 0
		for ; yyj3578 < yyrr3578; yyj3578++ {
			if r.TryDecodeAsNil() {
				yyv3578[yyj3578] = Node{}
			} else {
				yyv3579 := &yyv3578[yyj3578]
				yyv3579.CodecDecodeSelf(d)
			}

		}
		if yyrt3578 {
			for ; yyj3578 < yyl3578; yyj3578++ {
				yyv3578 = append(yyv3578, Node{})
				if r.TryDecodeAsNil() {
					yyv3578[yyj3578] = Node{}
				} else {
					yyv3580 := &yyv3578[yyj3578]
					yyv3580.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3578 := 0; !r.CheckBreak(); yyj3578++ {
			if yyj3578 >= len(yyv3578) {
				yyv3578 = append(yyv3578, Node{}) // var yyz3578 Node
				yyc3578 = true
			}

			if yyj3578 < len(yyv3578) {
				if r.TryDecodeAsNil() {
					yyv3578[yyj3578] = Node{}
				} else {
					yyv3581 := &yyv3578[yyj3578]
					yyv3581.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3578.End()
	}
	if yyc3578 {
		*v = yyv3578
	}

}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3582 := range v {
		yyv3582.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3583 := *v
	yyh3583, yyl3583 := z.DecSliceHelperStart()

	var yyrr3583, yyrl3583 int
	var yyc3583, yyrt3583 bool
	_, _, _ = yyc3583, yyrt3583, yyrl3583
	yyrr3583 = yyl3583

	if yyv3583 == nil {
		if yyrl3583, yyrt3583 = z.DecInferLen(yyl3583, z.DecBasicHandle().MaxInitLen, 16); yyrt3583 {
			yyrr3583 = yyrl3583
		}
		yyv3583 = make([]FinalizerName, yyrl3583)
		yyc3583 = true
	}

	if yyl3583 == 0 {
		if len(yyv3583) != 0 {
			yyv3583 = yyv3583[:0]
			yyc3583 = true
		}
	} else if yyl3583 > 0 {

		if yyl3583 > cap(yyv3583) {
			yyrl3583, yyrt3583 = z.DecInferLen(yyl3583, z.DecBasicHandle().MaxInitLen, 16)

			yyv23583 := yyv3583
			yyv3583 = make([]FinalizerName, yyrl3583)
			if len(yyv3583) > 0 {
				copy(yyv3583, yyv23583[:cap(yyv23583)])
			}
			yyc3583 = true

			yyrr3583 = len(yyv3583)
		} else if yyl3583 != len(yyv3583) {
			yyv3583 = yyv3583[:yyl3583]
			yyc3583 = true
		}
		yyj3583 := 0
		for ; yyj3583 < yyrr3583; yyj3583++ {
			if r.TryDecodeAsNil() {
				yyv3583[yyj3583] = ""
			} else {
				yyv3583[yyj3583] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt3583 {
			for ; yyj3583 < yyl3583; yyj3583++ {
				yyv3583 = append(yyv3583, "")
				if r.TryDecodeAsNil() {
					yyv3583[yyj3583] = ""
				} else {
					yyv3583[yyj3583] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3583 := 0; !r.CheckBreak(); yyj3583++ {
			if yyj3583 >= len(yyv3583) {
				yyv3583 = append(yyv3583, "") // var yyz3583 FinalizerName
				yyc3583 = true
			}

			if yyj3583 < len(yyv3583) {
				if r.TryDecodeAsNil() {
					yyv3583[yyj3583] = ""
				} else {
					yyv3583[yyj3583] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3583.End()
	}
	if yyc3583 {
		*v = yyv3583
	}

}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3587 := range v {
		yy3588 := &yyv3587
		yy3588.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3589 := *v
	yyh3589, yyl3589 := z.DecSliceHelperStart()

	var yyrr3589, yyrl3589 int
	var yyc3589, yyrt3589 bool
	_, _, _ = yyc3589, yyrt3589, yyrl3589
	yyrr3589 = yyl3589

	if yyv3589 == nil {
		if yyrl3589, yyrt3589 = z.DecInferLen(yyl3589, z.DecBasicHandle().MaxInitLen, 232); yyrt3589 {
			yyrr3589 = yyrl3589
		}
		yyv3589 = make([]Namespace, yyrl3589)
		yyc3589 = true
	}

	if yyl3589 == 0 {
		if len(yyv3589) != 0 {
			yyv3589 = yyv3589[:0]
			yyc3589 = true
		}
	} else if yyl3589 > 0 {

		if yyl3589 > cap(yyv3589) {
			yyrl3589, yyrt3589 = z.DecInferLen(yyl3589, z.DecBasicHandle().MaxInitLen, 232)
			yyv3589 = make([]Namespace, yyrl3589)
			yyc3589 = true

			yyrr3589 = len(yyv3589)
		} else if yyl3589 != len(yyv3589) {
			yyv3589 = yyv3589[:yyl3589]
			yyc3589 = true
		}
		yyj3589 := 0
		for ; yyj3589 < yyrr3589; yyj3589++ {
			if r.TryDecodeAsNil() {
				yyv3589[yyj3589] = Namespace{}
			} else {
				yyv3590 := &yyv3589[yyj3589]
				yyv3590.CodecDecodeSelf(d)
			}

		}
		if yyrt3589 {
			for ; yyj3589 < yyl3589; yyj3589++ {
				yyv3589 = append(yyv3589, Namespace{})
				if r.TryDecodeAsNil() {
					yyv3589[yyj3589] = Namespace{}
				} else {
					yyv3591 := &yyv3589[yyj3589]
					yyv3591.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3589 := 0; !r.CheckBreak(); yyj3589++ {
			if yyj3589 >= len(yyv3589) {
				yyv3589 = append(yyv3589, Namespace{}) // var yyz3589 Namespace
				yyc3589 = true
			}

			if yyj3589 < len(yyv3589) {
				if r.TryDecodeAsNil() {
					yyv3589[yyj3589] = Namespace{}
				} else {
					yyv3592 := &yyv3589[yyj3589]
					yyv3592.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3589.End()
	}
	if yyc3589 {
		*v = yyv3589
	}

}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3593 := range v {
		yy3594 := &yyv3593
		yy3594.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3595 := *v
	yyh3595, yyl3595 := z.DecSliceHelperStart()

	var yyrr3595, yyrl3595 int
	var yyc3595, yyrt3595 bool
	_, _, _ = yyc3595, yyrt3595, yyrl3595
	yyrr3595 = yyl3595

	if yyv3595 == nil {
		if yyrl3595, yyrt3595 = z.DecInferLen(yyl3595, z.DecBasicHandle().MaxInitLen, 424); yyrt3595 {
			yyrr3595 = yyrl3595
		}
		yyv3595 = make([]Event, yyrl3595)
		yyc3595 = true
	}

	if yyl3595 == 0 {
		if len(yyv3595) != 0 {
			yyv3595 = yyv3595[:0]
			yyc3595 = true
		}
	} else if yyl3595 > 0 {

		if yyl3595 > cap(yyv3595) {
			yyrl3595, yyrt3595 = z.DecInferLen(yyl3595, z.DecBasicHandle().MaxInitLen, 424)
			yyv3595 = make([]Event, yyrl3595)
			yyc3595 = true

			yyrr3595 = len(yyv3595)
		} else if yyl3595 != len(yyv3595) {
			yyv3595 = yyv3595[:yyl3595]
			yyc3595 = true
		}
		yyj3595 := 0
		for ; yyj3595 < yyrr3595; yyj3595++ {
			if r.TryDecodeAsNil() {
				yyv3595[yyj3595] = Event{}
			} else {
				yyv3596 := &yyv3595[yyj3595]
				yyv3596.CodecDecodeSelf(d)
			}

		}
		if yyrt3595 {
			for ; yyj3595 < yyl3595; yyj3595++ {
				yyv3595 = append(yyv3595, Event{})
				if r.TryDecodeAsNil() {
					yyv3595[yyj3595] = Event{}
				} else {
					yyv3597 := &yyv3595[yyj3595]
					yyv3597.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3595 := 0; !r.CheckBreak(); yyj3595++ {
			if yyj3595 >= len(yyv3595) {
				yyv3595 = append(yyv3595, Event{}) // var yyz3595 Event
				yyc3595 = true
			}

			if yyj3595 < len(yyv3595) {
				if r.TryDecodeAsNil() {
					yyv3595[yyj3595] = Event{}
				} else {
					yyv3598 := &yyv3595[yyj3595]
					yyv3598.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3595.End()
	}
	if yyc3595 {
		*v = yyv3595
	}

}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg6_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3599 := range v {
		yy3600 := &yyv3599
		yym3601 := z.EncBinary()
		_ = yym3601
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3600) {
		} else if !yym3601 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3600)
		} else {
			z.EncFallback(yy3600)
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg6_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3602 := *v
	yyh3602, yyl3602 := z.DecSliceHelperStart()

	var yyrr3602, yyrl3602 int
	var yyc3602, yyrt3602 bool
	_, _, _ = yyc3602, yyrt3602, yyrl3602
	yyrr3602 = yyl3602

	if yyv3602 == nil {
		if yyrl3602, yyrt3602 = z.DecInferLen(yyl3602, z.DecBasicHandle().MaxInitLen, 24); yyrt3602 {
			yyrr3602 = yyrl3602
		}
		yyv3602 = make([]pkg6_runtime.RawExtension, yyrl3602)
		yyc3602 = true
	}

	if yyl3602 == 0 {
		if len(yyv3602) != 0 {
			yyv3602 = yyv3602[:0]
			yyc3602 = true
		}
	} else if yyl3602 > 0 {

		if yyl3602 > cap(yyv3602) {
			yyrl3602, yyrt3602 = z.DecInferLen(yyl3602, z.DecBasicHandle().MaxInitLen, 24)
			yyv3602 = make([]pkg6_runtime.RawExtension, yyrl3602)
			yyc3602 = true

			yyrr3602 = len(yyv3602)
		} else if yyl3602 != len(yyv3602) {
			yyv3602 = yyv3602[:yyl3602]
			yyc3602 = true
		}
		yyj3602 := 0
		for ; yyj3602 < yyrr3602; yyj3602++ {
			if r.TryDecodeAsNil() {
				yyv3602[yyj3602] = pkg6_runtime.RawExtension{}
			} else {
				yyv3603 := &yyv3602[yyj3602]
				yym3604 := z.DecBinary()
				_ = yym3604
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3603) {
				} else if !yym3604 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3603)
				} else {
					z.DecFallback(yyv3603, false)
				}
			}

		}
		if yyrt3602 {
			for ; yyj3602 < yyl3602; yyj3602++ {
				yyv3602 = append(yyv3602, pkg6_runtime.RawExtension{})
				if r.TryDecodeAsNil() {
					yyv3602[yyj3602] = pkg6_runtime.RawExtension{}
				} else {
					yyv3605 := &yyv3602[yyj3602]
					yym3606 := z.DecBinary()
					_ = yym3606
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3605) {
					} else if !yym3606 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv3605)
					} else {
						z.DecFallback(yyv3605, false)
					}
				}

			}
		}

	} else {
		for yyj3602 := 0; !r.CheckBreak(); yyj3602++ {
			if yyj3602 >= len(yyv3602) {
				yyv3602 = append(yyv3602, pkg6_runtime.RawExtension{}) // var yyz3602 pkg6_runtime.RawExtension
				yyc3602 = true
			}

			if yyj3602 < len(yyv3602) {
				if r.TryDecodeAsNil() {
					yyv3602[yyj3602] = pkg6_runtime.RawExtension{}
				} else {
					yyv3607 := &yyv3602[yyj3602]
					yym3608 := z.DecBinary()
					_ = yym3608
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3607) {
					} else if !yym3608 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv3607)
					} else {
						z.DecFallback(yyv3607, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3602.End()
	}
	if yyc3602 {
		*v = yyv3602
	}

}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3609 := range v {
		yy3610 := &yyv3609
		yy3610.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3611 := *v
	yyh3611, yyl3611 := z.DecSliceHelperStart()

	var yyrr3611, yyrl3611 int
	var yyc3611, yyrt3611 bool
	_, _, _ = yyc3611, yyrt3611, yyrl3611
	yyrr3611 = yyl3611

	if yyv3611 == nil {
		if yyrl3611, yyrt3611 = z.DecInferLen(yyl3611, z.DecBasicHandle().MaxInitLen, 56); yyrt3611 {
			yyrr3611 = yyrl3611
		}
		yyv3611 = make([]LimitRangeItem, yyrl3611)
		yyc3611 = true
	}

	if yyl3611 == 0 {
		if len(yyv3611) != 0 {
			yyv3611 = yyv3611[:0]
			yyc3611 = true
		}
	} else if yyl3611 > 0 {

		if yyl3611 > cap(yyv3611) {
			yyrl3611, yyrt3611 = z.DecInferLen(yyl3611, z.DecBasicHandle().MaxInitLen, 56)
			yyv3611 = make([]LimitRangeItem, yyrl3611)
			yyc3611 = true

			yyrr3611 = len(yyv3611)
		} else if yyl3611 != len(yyv3611) {
			yyv3611 = yyv3611[:yyl3611]
			yyc3611 = true
		}
		yyj3611 := 0
		for ; yyj3611 < yyrr3611; yyj3611++ {
			if r.TryDecodeAsNil() {
				yyv3611[yyj3611] = LimitRangeItem{}
			} else {
				yyv3612 := &yyv3611[yyj3611]
				yyv3612.CodecDecodeSelf(d)
			}

		}
		if yyrt3611 {
			for ; yyj3611 < yyl3611; yyj3611++ {
				yyv3611 = append(yyv3611, LimitRangeItem{})
				if r.TryDecodeAsNil() {
					yyv3611[yyj3611] = LimitRangeItem{}
				} else {
					yyv3613 := &yyv3611[yyj3611]
					yyv3613.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3611 := 0; !r.CheckBreak(); yyj3611++ {
			if yyj3611 >= len(yyv3611) {
				yyv3611 = append(yyv3611, LimitRangeItem{}) // var yyz3611 LimitRangeItem
				yyc3611 = true
			}

			if yyj3611 < len(yyv3611) {
				if r.TryDecodeAsNil() {
					yyv3611[yyj3611] = LimitRangeItem{}
				} else {
					yyv3614 := &yyv3611[yyj3611]
					yyv3614.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3611.End()
	}
	if yyc3611 {
		*v = yyv3611
	}

}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3615 := range v {
		yy3616 := &yyv3615
		yy3616.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3617 := *v
	yyh3617, yyl3617 := z.DecSliceHelperStart()

	var yyrr3617, yyrl3617 int
	var yyc3617, yyrt3617 bool
	_, _, _ = yyc3617, yyrt3617, yyrl3617
	yyrr3617 = yyl3617

	if yyv3617 == nil {
		if yyrl3617, yyrt3617 = z.DecInferLen(yyl3617, z.DecBasicHandle().MaxInitLen, 216); yyrt3617 {
			yyrr3617 = yyrl3617
		}
		yyv3617 = make([]LimitRange, yyrl3617)
		yyc3617 = true
	}

	if yyl3617 == 0 {
		if len(yyv3617) != 0 {
			yyv3617 = yyv3617[:0]
			yyc3617 = true
		}
	} else if yyl3617 > 0 {

		if yyl3617 > cap(yyv3617) {
			yyrl3617, yyrt3617 = z.DecInferLen(yyl3617, z.DecBasicHandle().MaxInitLen, 216)
			yyv3617 = make([]LimitRange, yyrl3617)
			yyc3617 = true

			yyrr3617 = len(yyv3617)
		} else if yyl3617 != len(yyv3617) {
			yyv3617 = yyv3617[:yyl3617]
			yyc3617 = true
		}
		yyj3617 := 0
		for ; yyj3617 < yyrr3617; yyj3617++ {
			if r.TryDecodeAsNil() {
				yyv3617[yyj3617] = LimitRange{}
			} else {
				yyv3618 := &yyv3617[yyj3617]
				yyv3618.CodecDecodeSelf(d)
			}

		}
		if yyrt3617 {
			for ; yyj3617 < yyl3617; yyj3617++ {
				yyv3617 = append(yyv3617, LimitRange{})
				if r.TryDecodeAsNil() {
					yyv3617[yyj3617] = LimitRange{}
				} else {
					yyv3619 := &yyv3617[yyj3617]
					yyv3619.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3617 := 0; !r.CheckBreak(); yyj3617++ {
			if yyj3617 >= len(yyv3617) {
				yyv3617 = append(yyv3617, LimitRange{}) // var yyz3617 LimitRange
				yyc3617 = true
			}

			if yyj3617 < len(yyv3617) {
				if r.TryDecodeAsNil() {
					yyv3617[yyj3617] = LimitRange{}
				} else {
					yyv3620 := &yyv3617[yyj3617]
					yyv3620.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3617.End()
	}
	if yyc3617 {
		*v = yyv3617
	}

}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3621 := range v {
		yy3622 := &yyv3621
		yy3622.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3623 := *v
	yyh3623, yyl3623 := z.DecSliceHelperStart()

	var yyrr3623, yyrl3623 int
	var yyc3623, yyrt3623 bool
	_, _, _ = yyc3623, yyrt3623, yyrl3623
	yyrr3623 = yyl3623

	if yyv3623 == nil {
		if yyrl3623, yyrt3623 = z.DecInferLen(yyl3623, z.DecBasicHandle().MaxInitLen, 216); yyrt3623 {
			yyrr3623 = yyrl3623
		}
		yyv3623 = make([]ResourceQuota, yyrl3623)
		yyc3623 = true
	}

	if yyl3623 == 0 {
		if len(yyv3623) != 0 {
			yyv3623 = yyv3623[:0]
			yyc3623 = true
		}
	} else if yyl3623 > 0 {

		if yyl3623 > cap(yyv3623) {
			yyrl3623, yyrt3623 = z.DecInferLen(yyl3623, z.DecBasicHandle().MaxInitLen, 216)
			yyv3623 = make([]ResourceQuota, yyrl3623)
			yyc3623 = true

			yyrr3623 = len(yyv3623)
		} else if yyl3623 != len(yyv3623) {
			yyv3623 = yyv3623[:yyl3623]
			yyc3623 = true
		}
		yyj3623 := 0
		for ; yyj3623 < yyrr3623; yyj3623++ {
			if r.TryDecodeAsNil() {
				yyv3623[yyj3623] = ResourceQuota{}
			} else {
				yyv3624 := &yyv3623[yyj3623]
				yyv3624.CodecDecodeSelf(d)
			}

		}
		if yyrt3623 {
			for ; yyj3623 < yyl3623; yyj3623++ {
				yyv3623 = append(yyv3623, ResourceQuota{})
				if r.TryDecodeAsNil() {
					yyv3623[yyj3623] = ResourceQuota{}
				} else {
					yyv3625 := &yyv3623[yyj3623]
					yyv3625.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3623 := 0; !r.CheckBreak(); yyj3623++ {
			if yyj3623 >= len(yyv3623) {
				yyv3623 = append(yyv3623, ResourceQuota{}) // var yyz3623 ResourceQuota
				yyc3623 = true
			}

			if yyj3623 < len(yyv3623) {
				if r.TryDecodeAsNil() {
					yyv3623[yyj3623] = ResourceQuota{}
				} else {
					yyv3626 := &yyv3623[yyj3623]
					yyv3626.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3623.End()
	}
	if yyc3623 {
		*v = yyv3623
	}

}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3627, yyv3627 := range v {
		yym3628 := z.EncBinary()
		_ = yym3628
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk3627))
		}
		if yyv3627 == nil {
			r.EncodeNil()
		} else {
			yym3629 := z.EncBinary()
			_ = yym3629
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv3627))
			}
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3630 := *v
	yyl3630 := r.ReadMapStart()
	yybh3630 := z.DecBasicHandle()
	if yyv3630 == nil {
		yyrl3630, _ := z.DecInferLen(yyl3630, yybh3630.MaxInitLen, 40)
		yyv3630 = make(map[string][]uint8, yyrl3630)
		*v = yyv3630
	}
	var yymk3630 string
	var yymv3630 []uint8
	var yymg3630 bool
	if yybh3630.MapValueReset {
		yymg3630 = true
	}
	if yyl3630 > 0 {
		for yyj3630 := 0; yyj3630 < yyl3630; yyj3630++ {
			if r.TryDecodeAsNil() {
				yymk3630 = ""
			} else {
				yymk3630 = string(r.DecodeString())
			}

			if yymg3630 {
				yymv3630 = yyv3630[yymk3630]
			} else {
				yymv3630 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3630 = nil
			} else {
				yyv3632 := &yymv3630
				yym3633 := z.DecBinary()
				_ = yym3633
				if false {
				} else {
					*yyv3632 = r.DecodeBytes(*(*[]byte)(yyv3632), false, false)
				}
			}

			if yyv3630 != nil {
				yyv3630[yymk3630] = yymv3630
			}
		}
	} else if yyl3630 < 0 {
		for yyj3630 := 0; !r.CheckBreak(); yyj3630++ {
			if r.TryDecodeAsNil() {
				yymk3630 = ""
			} else {
				yymk3630 = string(r.DecodeString())
			}

			if yymg3630 {
				yymv3630 = yyv3630[yymk3630]
			} else {
				yymv3630 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3630 = nil
			} else {
				yyv3635 := &yymv3630
				yym3636 := z.DecBinary()
				_ = yym3636
				if false {
				} else {
					*yyv3635 = r.DecodeBytes(*(*[]byte)(yyv3635), false, false)
				}
			}

			if yyv3630 != nil {
				yyv3630[yymk3630] = yymv3630
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3637 := range v {
		yy3638 := &yyv3637
		yy3638.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3639 := *v
	yyh3639, yyl3639 := z.DecSliceHelperStart()

	var yyrr3639, yyrl3639 int
	var yyc3639, yyrt3639 bool
	_, _, _ = yyc3639, yyrt3639, yyrl3639
	yyrr3639 = yyl3639

	if yyv3639 == nil {
		if yyrl3639, yyrt3639 = z.DecInferLen(yyl3639, z.DecBasicHandle().MaxInitLen, 216); yyrt3639 {
			yyrr3639 = yyrl3639
		}
		yyv3639 = make([]Secret, yyrl3639)
		yyc3639 = true
	}

	if yyl3639 == 0 {
		if len(yyv3639) != 0 {
			yyv3639 = yyv3639[:0]
			yyc3639 = true
		}
	} else if yyl3639 > 0 {

		if yyl3639 > cap(yyv3639) {
			yyrl3639, yyrt3639 = z.DecInferLen(yyl3639, z.DecBasicHandle().MaxInitLen, 216)
			yyv3639 = make([]Secret, yyrl3639)
			yyc3639 = true

			yyrr3639 = len(yyv3639)
		} else if yyl3639 != len(yyv3639) {
			yyv3639 = yyv3639[:yyl3639]
			yyc3639 = true
		}
		yyj3639 := 0
		for ; yyj3639 < yyrr3639; yyj3639++ {
			if r.TryDecodeAsNil() {
				yyv3639[yyj3639] = Secret{}
			} else {
				yyv3640 := &yyv3639[yyj3639]
				yyv3640.CodecDecodeSelf(d)
			}

		}
		if yyrt3639 {
			for ; yyj3639 < yyl3639; yyj3639++ {
				yyv3639 = append(yyv3639, Secret{})
				if r.TryDecodeAsNil() {
					yyv3639[yyj3639] = Secret{}
				} else {
					yyv3641 := &yyv3639[yyj3639]
					yyv3641.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3639 := 0; !r.CheckBreak(); yyj3639++ {
			if yyj3639 >= len(yyv3639) {
				yyv3639 = append(yyv3639, Secret{}) // var yyz3639 Secret
				yyc3639 = true
			}

			if yyj3639 < len(yyv3639) {
				if r.TryDecodeAsNil() {
					yyv3639[yyj3639] = Secret{}
				} else {
					yyv3642 := &yyv3639[yyj3639]
					yyv3642.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3639.End()
	}
	if yyc3639 {
		*v = yyv3639
	}

}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3643 := range v {
		yy3644 := &yyv3643
		yy3644.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3645 := *v
	yyh3645, yyl3645 := z.DecSliceHelperStart()

	var yyrr3645, yyrl3645 int
	var yyc3645, yyrt3645 bool
	_, _, _ = yyc3645, yyrt3645, yyrl3645
	yyrr3645 = yyl3645

	if yyv3645 == nil {
		if yyrl3645, yyrt3645 = z.DecInferLen(yyl3645, z.DecBasicHandle().MaxInitLen, 64); yyrt3645 {
			yyrr3645 = yyrl3645
		}
		yyv3645 = make([]ComponentCondition, yyrl3645)
		yyc3645 = true
	}

	if yyl3645 == 0 {
		if len(yyv3645) != 0 {
			yyv3645 = yyv3645[:0]
			yyc3645 = true
		}
	} else if yyl3645 > 0 {

		if yyl3645 > cap(yyv3645) {
			yyrl3645, yyrt3645 = z.DecInferLen(yyl3645, z.DecBasicHandle().MaxInitLen, 64)
			yyv3645 = make([]ComponentCondition, yyrl3645)
			yyc3645 = true

			yyrr3645 = len(yyv3645)
		} else if yyl3645 != len(yyv3645) {
			yyv3645 = yyv3645[:yyl3645]
			yyc3645 = true
		}
		yyj3645 := 0
		for ; yyj3645 < yyrr3645; yyj3645++ {
			if r.TryDecodeAsNil() {
				yyv3645[yyj3645] = ComponentCondition{}
			} else {
				yyv3646 := &yyv3645[yyj3645]
				yyv3646.CodecDecodeSelf(d)
			}

		}
		if yyrt3645 {
			for ; yyj3645 < yyl3645; yyj3645++ {
				yyv3645 = append(yyv3645, ComponentCondition{})
				if r.TryDecodeAsNil() {
					yyv3645[yyj3645] = ComponentCondition{}
				} else {
					yyv3647 := &yyv3645[yyj3645]
					yyv3647.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3645 := 0; !r.CheckBreak(); yyj3645++ {
			if yyj3645 >= len(yyv3645) {
				yyv3645 = append(yyv3645, ComponentCondition{}) // var yyz3645 ComponentCondition
				yyc3645 = true
			}

			if yyj3645 < len(yyv3645) {
				if r.TryDecodeAsNil() {
					yyv3645[yyj3645] = ComponentCondition{}
				} else {
					yyv3648 := &yyv3645[yyj3645]
					yyv3648.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3645.End()
	}
	if yyc3645 {
		*v = yyv3645
	}

}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3649 := range v {
		yy3650 := &yyv3649
		yy3650.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3651 := *v
	yyh3651, yyl3651 := z.DecSliceHelperStart()

	var yyrr3651, yyrl3651 int
	var yyc3651, yyrt3651 bool
	_, _, _ = yyc3651, yyrt3651, yyrl3651
	yyrr3651 = yyl3651

	if yyv3651 == nil {
		if yyrl3651, yyrt3651 = z.DecInferLen(yyl3651, z.DecBasicHandle().MaxInitLen, 216); yyrt3651 {
			yyrr3651 = yyrl3651
		}
		yyv3651 = make([]ComponentStatus, yyrl3651)
		yyc3651 = true
	}

	if yyl3651 == 0 {
		if len(yyv3651) != 0 {
			yyv3651 = yyv3651[:0]
			yyc3651 = true
		}
	} else if yyl3651 > 0 {

		if yyl3651 > cap(yyv3651) {
			yyrl3651, yyrt3651 = z.DecInferLen(yyl3651, z.DecBasicHandle().MaxInitLen, 216)
			yyv3651 = make([]ComponentStatus, yyrl3651)
			yyc3651 = true

			yyrr3651 = len(yyv3651)
		} else if yyl3651 != len(yyv3651) {
			yyv3651 = yyv3651[:yyl3651]
			yyc3651 = true
		}
		yyj3651 := 0
		for ; yyj3651 < yyrr3651; yyj3651++ {
			if r.TryDecodeAsNil() {
				yyv3651[yyj3651] = ComponentStatus{}
			} else {
				yyv3652 := &yyv3651[yyj3651]
				yyv3652.CodecDecodeSelf(d)
			}

		}
		if yyrt3651 {
			for ; yyj3651 < yyl3651; yyj3651++ {
				yyv3651 = append(yyv3651, ComponentStatus{})
				if r.TryDecodeAsNil() {
					yyv3651[yyj3651] = ComponentStatus{}
				} else {
					yyv3653 := &yyv3651[yyj3651]
					yyv3653.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3651 := 0; !r.CheckBreak(); yyj3651++ {
			if yyj3651 >= len(yyv3651) {
				yyv3651 = append(yyv3651, ComponentStatus{}) // var yyz3651 ComponentStatus
				yyc3651 = true
			}

			if yyj3651 < len(yyv3651) {
				if r.TryDecodeAsNil() {
					yyv3651[yyj3651] = ComponentStatus{}
				} else {
					yyv3654 := &yyv3651[yyj3651]
					yyv3654.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3651.End()
	}
	if yyc3651 {
		*v = yyv3651
	}

}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3655 := range v {
		yy3656 := &yyv3655
		yy3656.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3657 := *v
	yyh3657, yyl3657 := z.DecSliceHelperStart()

	var yyrr3657, yyrl3657 int
	var yyc3657, yyrt3657 bool
	_, _, _ = yyc3657, yyrt3657, yyrl3657
	yyrr3657 = yyl3657

	if yyv3657 == nil {
		if yyrl3657, yyrt3657 = z.DecInferLen(yyl3657, z.DecBasicHandle().MaxInitLen, 48); yyrt3657 {
			yyrr3657 = yyrl3657
		}
		yyv3657 = make([]DownwardAPIVolumeFile, yyrl3657)
		yyc3657 = true
	}

	if yyl3657 == 0 {
		if len(yyv3657) != 0 {
			yyv3657 = yyv3657[:0]
			yyc3657 = true
		}
	} else if yyl3657 > 0 {

		if yyl3657 > cap(yyv3657) {
			yyrl3657, yyrt3657 = z.DecInferLen(yyl3657, z.DecBasicHandle().MaxInitLen, 48)
			yyv3657 = make([]DownwardAPIVolumeFile, yyrl3657)
			yyc3657 = true

			yyrr3657 = len(yyv3657)
		} else if yyl3657 != len(yyv3657) {
			yyv3657 = yyv3657[:yyl3657]
			yyc3657 = true
		}
		yyj3657 := 0
		for ; yyj3657 < yyrr3657; yyj3657++ {
			if r.TryDecodeAsNil() {
				yyv3657[yyj3657] = DownwardAPIVolumeFile{}
			} else {
				yyv3658 := &yyv3657[yyj3657]
				yyv3658.CodecDecodeSelf(d)
			}

		}
		if yyrt3657 {
			for ; yyj3657 < yyl3657; yyj3657++ {
				yyv3657 = append(yyv3657, DownwardAPIVolumeFile{})
				if r.TryDecodeAsNil() {
					yyv3657[yyj3657] = DownwardAPIVolumeFile{}
				} else {
					yyv3659 := &yyv3657[yyj3657]
					yyv3659.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3657 := 0; !r.CheckBreak(); yyj3657++ {
			if yyj3657 >= len(yyv3657) {
				yyv3657 = append(yyv3657, DownwardAPIVolumeFile{}) // var yyz3657 DownwardAPIVolumeFile
				yyc3657 = true
			}

			if yyj3657 < len(yyv3657) {
				if r.TryDecodeAsNil() {
					yyv3657[yyj3657] = DownwardAPIVolumeFile{}
				} else {
					yyv3660 := &yyv3657[yyj3657]
					yyv3660.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3657.End()
	}
	if yyc3657 {
		*v = yyv3657
	}

}
